<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>04-项目开发-2_学习day04</title>
    <link href="/2023/11/24/Django/04-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-2/"/>
    <url>/2023/11/24/Django/04-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-2/</url>
    
    <content type="html"><![CDATA[<h2 id="1、模板的继承"><a href="#1、模板的继承" class="headerlink" title="1、模板的继承"></a>1、模板的继承</h2><ul><li><p>创建一个母板：使用<code> &#123;% block content %&#125; &#123;% endblock %&#125;</code>用来表示子板的内容</p></li><li><p>子板继承时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% extends <span class="hljs-string">&#x27;layout.html&#x27;</span> %&#125; <span class="hljs-comment"># layout.html可以自定义其他名字</span><br>&#123;% block content %&#125;<br><span class="hljs-comment"># 子板特有的内容</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure></li></ul><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/5584615b4d7c3529c69279b87416f519.png" alt="image-20231123220425430"></p><h2 id="2、用户管理"><a href="#2、用户管理" class="headerlink" title="2、用户管理"></a>2、用户管理</h2><ul><li>向数据库表中插入一些数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into app01_userinfo (name,password,age,account,creat_time,gender,depart_id)<br>values (&#x27;张三&#x27;,&#x27;123&#x27;,23,100.68,&#x27;2021-11-11&#x27;,1,1),<br>(&#x27;大乔&#x27;,&#x27;333dsf&#x27;,24,200.00,&#x27;2021-12-12&#x27;,2,2),<br>(&#x27;小乔&#x27;,&#x27;23dsf&#x27;,20,321.00,&#x27;2018-05-23&#x27;,2,2),<br>(&#x27;张飞&#x27;,&#x27;55ggg&#x27;,25,251.66,&#x27;2020-08-13&#x27;,1,5),<br>(&#x27;关羽&#x27;,&#x27;666888&#x27;,27,342.55,&#x27;2019-05-15&#x27;,1,5),<br>(&#x27;刘备&#x27;,&#x27;ggg321&#x27;,29,666.68,&#x27;2017-07-12&#x27;,1,1);<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在Django中可以使用 get_字段名_display() 的方式来获取元组中数字对应的中文名称</span><br><span class="hljs-comment"># 例如获取性别：</span><br> gender_choices = (<br>        (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;男&#x27;</span>),<br>        (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;女&#x27;</span>),<br>    )<br> gender = models.SmallIntegerField(verbose_name=<span class="hljs-string">&#x27;性别&#x27;</span>,choices=gender_choices)<br><span class="hljs-comment"># obj.get_gender_display(), 根据在models.py文件中设置的上述两条语句，如果数据库表中gender字段的值为1，则打印输出‘男’ ，字段的值为2，则打印输出‘女’ </span><br></code></pre></td></tr></table></figure><ul><li><p>获取时间戳，并设置格式<code> obj.creat_time.strftime(&quot;%Y-%m-%d&quot;)</code></p></li><li><p>存在关联数据时，Django会根据设置的关联变量自动去关联表，并根据id获取那一行的数据对象：<code> obj.depart.title</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># depart 是用来关联的变量</span><br>depart = models.ForeignKey(to=<span class="hljs-string">&quot;Department&quot;</span>, to_field=<span class="hljs-string">&quot;id&quot;</span>, on_delete=models.CASCADE)<br></code></pre></td></tr></table></figure></li><li><p>在html中使用模板语言，对时间进行格式设置，需要用过滤器 |  <code> &#123;&#123; obj.creat_time | data:"Y-m-d" &#125;&#125;</code></p></li></ul><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/cd3640e44f1d6f14047adde28ff894fd.png" alt="image-20231124102145498" style="zoom:80%;" /><h2 id="3、新建用户"><a href="#3、新建用户" class="headerlink" title="3、新建用户"></a>3、新建用户</h2><ul><li><p>原始方法：一般不采用【麻烦】</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>用户提交数据没有校验<br><span class="hljs-bullet">- </span>错误输入时，应该有错误提示<br><span class="hljs-bullet">- </span>页面上，每一个字段都需要重新写一遍<br><span class="hljs-bullet">- </span>关联的数据，需要手动去获取并循环展示在页面中<br></code></pre></td></tr></table></figure></li><li><p>Django组件</p><ul><li>Form组件（较简便）</li><li>ModeForm组件（最简便）</li></ul></li></ul><h3 id="3-1-原始方法"><a href="#3-1-原始方法" class="headerlink" title="3.1 原始方法"></a>3.1 原始方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;添加用户(原始方法)&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-comment"># 使用一个字典保存数据库中的性别元组</span><br>        context = &#123;<br>            <span class="hljs-string">&#x27;gender_choices&#x27;</span>: models.UserInfo.gender_choices,<br>            <span class="hljs-string">&#x27;depart_list&#x27;</span>:models.Department.objects.<span class="hljs-built_in">all</span>()<br>        &#125;<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;user_add.html&quot;</span>, context)<br>    <span class="hljs-comment"># 获取用户提交的数据</span><br>    name = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>    pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>    age = request.POST.get(<span class="hljs-string">&quot;age&quot;</span>)<br>    ac = request.POST.get(<span class="hljs-string">&quot;ac&quot;</span>)<br>    dt = request.POST.get(<span class="hljs-string">&quot;dt&quot;</span>)<br>    gd = request.POST.get(<span class="hljs-string">&quot;gd&quot;</span>)<br>    dp = request.POST.get(<span class="hljs-string">&quot;dp&quot;</span>)<br><br>    <span class="hljs-comment"># 添加到数据库</span><br>    models.UserInfo.objects.create(name=name,password=pwd,age=age,<br>                                   account=ac,creat_time=dt,<br>                                   gender=gd,depart_id=dp)<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/user/list/&quot;</span>)<br><br><br><span class="hljs-comment"># user_add.html</span><br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>    &lt;label&gt;性别&lt;/label&gt;<br>    &lt;select <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;<br>          &#123;% <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> gender_choices %&#125;<br>               &lt;option value=<span class="hljs-string">&quot;&#123;&#123; item.0 &#125;&#125;&quot;</span>&gt;&#123;&#123; item<span class="hljs-number">.1</span> &#125;&#125;&lt;/option&gt;<span class="hljs-comment"># 模板语言</span><br>          &#123;% endfor %&#125;<br>     &lt;/select&gt;<br>&lt;/div&gt;<br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>     &lt;label&gt;部门&lt;/label&gt;<br>     &lt;select <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;<br>           &#123;% <span class="hljs-keyword">for</span> depart <span class="hljs-keyword">in</span> depart_list %&#125;<br>                 &lt;option value=<span class="hljs-string">&quot;&#123;&#123; depart.id &#125;&#125;&quot;</span>&gt;&#123;&#123; depart.title &#125;&#125;&lt;/option&gt;<br>           &#123;% endfor %&#125;<br>      &lt;/select&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/d4a11b32b4726bb11b8a78a4c006b8b5.png" alt="image-20231124105649979" style="zoom: 80%;" /><h3 id="3-2-初识Form"><a href="#3-2-初识Form" class="headerlink" title="3.2 初识Form"></a>3.2 初识Form</h3><h4 id="1、views-py"><a href="#1、views-py" class="headerlink" title="1、views.py"></a>1、views.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 新建一个类，继承Django的Form</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyForm</span>(<span class="hljs-title class_ inherited__">Form</span>):<br>    user = forms.CharField(widget=forms.Input)<span class="hljs-comment"># django会自己创建输入框，不用在html中写输入框了</span><br>    pwd = forms.CharField(widget=forms.Input)<br>    email = forms.CharField(widget=forms.Input)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>form = MyForm()    <span class="hljs-comment"># 实例Form对象</span><br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;user_add.html&quot;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>:form&#125;)<br></code></pre></td></tr></table></figure><h4 id="2、user-add-html"><a href="#2、user-add-html" class="headerlink" title="2、user_add.html"></a>2、user_add.html</h4><ul><li>通过for循环来加载form</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    &#123;% for field in form %&#125;<br>    &#123;&#123; field &#125;&#125;<br>    &#123;% endfor %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-初识ModelForm（推荐）"><a href="#3-3-初识ModelForm（推荐）" class="headerlink" title="3.3 初识ModelForm（推荐）"></a>3.3 初识ModelForm（推荐）</h3><h4 id="0、models-py"><a href="#0、models-py" class="headerlink" title="0、models.py"></a>0、models.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot; 员工表 &quot;&quot;&quot;</span><br>    name = models.CharField(verbose_name=<span class="hljs-string">&#x27;姓名&#x27;</span>, max_length=<span class="hljs-number">16</span>)<br>    password = models.CharField(verbose_name=<span class="hljs-string">&#x27;密码&#x27;</span>, max_length=<span class="hljs-number">64</span>)<br>    age = models.IntegerField(verbose_name=<span class="hljs-string">&#x27;年龄&#x27;</span>)<br>    account = models.DecimalField(verbose_name=<span class="hljs-string">&#x27;账户余额&#x27;</span>, max_digits=<span class="hljs-number">10</span>, decimal_places=<span class="hljs-number">2</span>, default=<span class="hljs-number">0</span>)<br>    creat_time = models.DateTimeField(verbose_name=<span class="hljs-string">&#x27;入职时间&#x27;</span>)<br><br>    depart = models.ForeignKey(to=<span class="hljs-string">&quot;Department&quot;</span>, to_field=<span class="hljs-string">&quot;id&quot;</span>, on_delete=models.CASCADE)<br>   <br>    gender_choices = (<br>        (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;男&#x27;</span>),<br>        (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;女&#x27;</span>),<br>    )<br>    gender = models.SmallIntegerField(verbose_name=<span class="hljs-string">&#x27;性别&#x27;</span>,choices=gender_choices)<br></code></pre></td></tr></table></figure><h4 id="1、views-py-1"><a href="#1、views-py-1" class="headerlink" title="1、views.py"></a>1、views.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 新建一个类，继承Django的ModelForm</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyForm</span>(<span class="hljs-title class_ inherited__">ModelForm</span>):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = UserInfo<br>        fields = [<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>]<span class="hljs-comment"># 直接写表中的字段名</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>form = MyForm()    <span class="hljs-comment"># 实例Form对象</span><br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;user_add.html&quot;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>:form&#125;)<br></code></pre></td></tr></table></figure><h4 id="2、user-add-html-1"><a href="#2、user-add-html-1" class="headerlink" title="2、user_add.html"></a>2、user_add.html</h4><ul><li>通过for循环来加载form</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    &#123;% for field in form %&#125;<br>    &#123;&#123; field &#125;&#125;<br>    &#123;% endfor %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-4-使用ModelForm新建用户"><a href="#3-4-使用ModelForm新建用户" class="headerlink" title="3.4 使用ModelForm新建用户"></a>3.4 使用ModelForm新建用户</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ------------modelForm示例------------ #</span><br><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> forms<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserModelForm</span>(forms.ModelForm):<br>    <span class="hljs-comment"># 添加验证规则</span><br>    name = forms.CharField(min_length=<span class="hljs-number">3</span>,label=<span class="hljs-string">&quot;姓名&quot;</span>)<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.UserInfo<br>        fields = [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;account&quot;</span>,<span class="hljs-string">&quot;creat_time&quot;</span>,<br>                  <span class="hljs-string">&quot;gender&quot;</span>,<span class="hljs-string">&quot;depart&quot;</span>]<br>    <span class="hljs-comment"># 批量更改样式    </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br><br>        <span class="hljs-comment"># 循环找到所有的插件，添加&quot;class&quot;:&quot;form-control&quot;样式</span><br>        <span class="hljs-keyword">for</span> name, field <span class="hljs-keyword">in</span> self.fields.items():<br>            field.widget.attrs = &#123;<span class="hljs-string">&quot;class&quot;</span>:<span class="hljs-string">&quot;form-control&quot;</span>,<span class="hljs-string">&quot;placeholder&quot;</span>:field.label&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_model_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;添加用户（modelForm版本）&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.method ==<span class="hljs-string">&quot;GET&quot;</span>:<br>        form = UserModelForm()<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;user_model_add.html&quot;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>: form&#125;)<br>    <span class="hljs-comment"># 用户提交数据，需要校验</span><br>    form = UserModelForm(data=request.POST)<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        <span class="hljs-comment"># 如果数据合法，则保存到数据库</span><br>        form.save()<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/user/list/&quot;</span>)<br>    <span class="hljs-comment"># 如果有错误信息</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;user_model_add.html&quot;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>: form&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    &#123;% csrf_token %&#125;<br>&#123;% for field in form %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">lable</span>&gt;</span>&#123;&#123; field.label &#125;&#125;: <span class="hljs-tag">&lt;/<span class="hljs-name">lable</span>&gt;</span><br>        &#123;&#123; field &#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; field.errors.0 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     &#123;% endfor %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>保存<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>错误验证</p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/1467098d0465dbc6ec3e4ab6c18daa83.png" alt="image-20231124170504488" style="zoom:80%;" /></li></ul>]]></content>
    
    
    <categories>
      
      <category>Django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03-项目开发-1_学习day03</title>
    <link href="/2023/11/22/Django/03-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-1/"/>
    <url>/2023/11/22/Django/03-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-1/</url>
    
    <content type="html"><![CDATA[<h2 id="1、设计表结构"><a href="#1、设计表结构" class="headerlink" title="1、设计表结构"></a>1、设计表结构</h2><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231122151744.png" alt="image-20231122151742295"  /> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># models.py</span><br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot; 部门表 &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># verbose_name=&#x27;&#x27;：是用来对列字段进行备注，可写可不写</span><br>    title = models.CharField(verbose_name=<span class="hljs-string">&#x27;标题&#x27;</span>, max_length=<span class="hljs-number">32</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot; 员工表 &quot;&quot;&quot;</span><br>    name = models.CharField(verbose_name=<span class="hljs-string">&#x27;姓名&#x27;</span>, max_length=<span class="hljs-number">16</span>)<br>    password = models.CharField(verbose_name=<span class="hljs-string">&#x27;密码&#x27;</span>, max_length=<span class="hljs-number">64</span>)<br>    age = models.IntegerField(verbose_name=<span class="hljs-string">&#x27;年龄&#x27;</span>)<br>    account = models.DecimalField(verbose_name=<span class="hljs-string">&#x27;账户余额&#x27;</span>, max_digits=<span class="hljs-number">10</span>, decimal_places=<span class="hljs-number">2</span>, default=<span class="hljs-number">0</span>)<br>    creat_time = models.DateTimeField(verbose_name=<span class="hljs-string">&#x27;入职时间&#x27;</span>)<br><br>    <span class="hljs-comment"># 创建部门id是有约束的</span><br>    <span class="hljs-comment"># to 表示与哪张表关联</span><br>    <span class="hljs-comment"># to_field 表示与表中哪一列关联</span><br>    <span class="hljs-comment"># --1、如果部门表删除，1）级联删除</span><br>    depart = models.ForeignKey(to=<span class="hljs-string">&quot;Department&quot;</span>, to_field=<span class="hljs-string">&quot;id&quot;</span>, on_delete=models.CASCADE)<br>    <span class="hljs-comment"># --2) 置空</span><br>    <span class="hljs-comment"># depart = models.ForeignKey(to=&quot;Department&quot;, to_field=&quot;id&quot;, null=True,blank=True,on_delete=models.SET_NULL)</span><br>    <br>    <span class="hljs-comment"># 在django中做约束，性别</span><br>    gender_choices = (<br>        (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;男&#x27;</span>),<br>        (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;女&#x27;</span>),<br>    )<br>    gender = models.SmallIntegerField(verbose_name=<span class="hljs-string">&#x27;性别&#x27;</span>,choices=gender_choices)<br></code></pre></td></tr></table></figure><h2 id="2、在MySQL中创建数据库"><a href="#2、在MySQL中创建数据库" class="headerlink" title="2、在MySQL中创建数据库"></a>2、在MySQL中创建数据库</h2><ul><li><p>创建数据库django_learn</p></li><li><p>修改settings.py文件中DATABASES</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">DATABASES = &#123;<br>    <span class="hljs-string">&quot;default&quot;</span>: &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;django_learn&#x27;</span>,<br>        <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>        <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string">&#x27;123123&#x27;</span>,<br>        <span class="hljs-string">&#x27;HOST&#x27;</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>        <span class="hljs-string">&#x27;PORT&#x27;</span>: <span class="hljs-string">&#x27;3306&#x27;</span>,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>django命令生成表（快捷键ctrl+alt+R，然后输入一下命令）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">makemigrations<br>migrate<br></code></pre></td></tr></table></figure></li></ul><h2 id="3、部门管理"><a href="#3、部门管理" class="headerlink" title="3、部门管理"></a>3、部门管理</h2><blockquote><ul><li>先体验最原始的方法来做</li><li>Django中提供Form和ModelForm组件（方便）</li></ul></blockquote><h3 id="3-1、部门列表"><a href="#3-1、部门列表" class="headerlink" title="3.1、部门列表"></a>3.1、部门列表</h3><p><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231122160327.png" alt="image-20231122160327015"></p><p><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231122175756.png" alt="image-20231122175755326"></p><ul><li><p>部门列表从数据库中取出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">depart_list</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; 部门列表 &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 去数据库中获取所有的部门列表</span><br>    data_list = models.Department.objects.<span class="hljs-built_in">all</span>()<br>    <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&quot;depart_list.html&quot;</span>, &#123;<span class="hljs-string">&quot;data_list&quot;</span>: data_list&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>          &#123;% for obj in data_list %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">th</span> &gt;</span>&#123;&#123; obj.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; obj.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-sm&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-sm&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                  <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>          &#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><p>使用for循环读取数据库的数据，并显示</p></li><li><p>新建部门页面</p><p><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231122201909.png" alt="image-20231122201909114"></p><p><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231122201946.png" alt="image-20231122201946282"></p></li><li><p>添加、删除、修改部门</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">depart_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;添加部门&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;depart_add.html&quot;</span>)<br><br>    <span class="hljs-comment"># 获取用户POST提交过来的数据</span><br>    title = request.POST.get(<span class="hljs-string">&quot;title&quot;</span>)<br><br>    <span class="hljs-comment"># 保存到数据库</span><br>    models.Department.objects.create(title=title)<br>    <span class="hljs-comment"># 重定向回部门列表</span><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/depart/list/&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">depart_del</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;删除部门&quot;&quot;&quot;</span><br>    nid = request.GET.get(<span class="hljs-string">&#x27;nid&#x27;</span>)<br>    models.Department.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).delete()<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/depart/list/&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">depart_edit</span>(<span class="hljs-params">request, nid</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;修改部门&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-comment"># 根据nid，获取数据</span><br>        row_obj = models.Department.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).first()<br>        <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&quot;depart_edit.html&quot;</span>,&#123;<span class="hljs-string">&quot;row_obj&quot;</span>:row_obj&#125;)<br>    <span class="hljs-comment"># 获取数据</span><br>    title = request.POST.get(<span class="hljs-string">&quot;title&quot;</span>)<br>    <span class="hljs-comment"># 根据ID找到数据库中的数据并进行更新</span><br>    models.Department.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).update(title=title)<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/depart/list/&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-第一节-认识复杂度、对数器、二分法</title>
    <link href="/2023/11/22/%E9%A9%AC%E5%A3%AB%E5%85%B5%E7%AE%97%E6%B3%95%E4%BD%93%E7%B3%BB%E7%8F%AD/01-%E7%AC%AC%E4%B8%80%E8%8A%82-%E8%AE%A4%E8%AF%86%E5%A4%8D%E6%9D%82%E5%BA%A6%E3%80%81%E5%AF%B9%E6%95%B0%E5%99%A8%E3%80%81%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    <url>/2023/11/22/%E9%A9%AC%E5%A3%AB%E5%85%B5%E7%AE%97%E6%B3%95%E4%BD%93%E7%B3%BB%E7%8F%AD/01-%E7%AC%AC%E4%B8%80%E8%8A%82-%E8%AE%A4%E8%AF%86%E5%A4%8D%E6%9D%82%E5%BA%A6%E3%80%81%E5%AF%B9%E6%95%B0%E5%99%A8%E3%80%81%E4%BA%8C%E5%88%86%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1、认识复杂度"><a href="#1、认识复杂度" class="headerlink" title="1、认识复杂度"></a>1、认识复杂度</h2><p>等差数列求和，最终可以化成<br>$$<br>a<em>N^2+b</em>N+c<br>$$<br>因此，计算时间复杂度时，记作O(N^2)</p><h3 id="常见的常数时间操作O-1"><a href="#常见的常数时间操作O-1" class="headerlink" title="常见的常数时间操作O(1)"></a>常见的常数时间操作O(1)</h3><ul><li>常见的算术运算（+、-、*、&#x2F;、%等）</li><li>常见的位运算（&gt;&gt;、&gt;&gt;&gt;、&lt;&lt;、|、&amp;、^等）</li><li>赋值、比较、自增、自减操作</li><li>数组寻址操作</li></ul><p>计算算法的时间复杂度时，需要将算法步骤拆分到常数时间操作，再去计算。</p><p>当时间复杂度指标相同时，比较两个算法，则使用常数量去分析。可以随机生成数据直接测。</p><h2 id="2、对数器"><a href="#2、对数器" class="headerlink" title="2、对数器"></a>2、对数器</h2><p><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231122101838.png" alt="image-20231122101837050"></p><p>通过大样本，对比两种方法，如果两种方法都能通过，则算法正确</p><ul><li><p>以测试冒泡算法为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 冒泡排序,时间复杂度O(N^2)</span><br><span class="hljs-comment"># 使用对数器来验证算法</span><br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-comment"># 冒泡排序算法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bubble_sort</span>(<span class="hljs-params">alist</span>):<br>    n = <span class="hljs-built_in">len</span>(alist)<br>    <span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:<br>        newn = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>            <span class="hljs-keyword">if</span> alist[i - <span class="hljs-number">1</span>] &gt; alist[i]:<br>                alist[i - <span class="hljs-number">1</span>], alist[i] = alist[i], alist[i - <span class="hljs-number">1</span>]<br>                newn = i<br>        n = newn<br>    <span class="hljs-keyword">return</span> alist<br><br><span class="hljs-comment"># ----- 对数器 -----</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">num_test</span>(<span class="hljs-params">testTime, maxSize, maxValue</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    testTime：测试次数</span><br><span class="hljs-string">    maxSize：数据的长度</span><br><span class="hljs-string">    maxValue：数据的范围</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    succeed = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(testTime):<br>        arr1 = [random.randint(-maxValue, maxValue) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(maxSize)]<br>        arr2 = arr1.copy()<br>        arr3 = arr1.copy()<br><br>        bubble_sort(arr2)<br>        arr3.sort()<br>        <span class="hljs-keyword">if</span> arr2 != arr3:<br>            succeed = <span class="hljs-literal">False</span><br>            <span class="hljs-built_in">print</span>(arr1)<br>            <span class="hljs-built_in">print</span>(arr2)<br>            <span class="hljs-built_in">print</span>(arr3)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;succeed&quot;</span> <span class="hljs-keyword">if</span> succeed <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;failed&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    num_test(<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure></li></ul><h2 id="3、二分法"><a href="#3、二分法" class="headerlink" title="3、二分法"></a>3、二分法</h2><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231122105723.png" alt="image-20231122105722486" style="zoom:80%;" /><ul><li>二分法取中位数时使用<code> mid = L+(R-L)/2</code>能防止溢出</li><li>一个数<code>N/2 = N &gt;&gt; 1</code>，位移运算比算术运算快</li></ul><blockquote><ul><li>while left &lt;&#x3D; right时：right &#x3D; mid-1# 左闭右闭区间</li><li>while left &lt; right时：right &#x3D; mid         # 左闭右开区间</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>马士兵算法体系班</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-orm数据库连接_学习day02</title>
    <link href="/2023/11/21/Django/02-orm%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/"/>
    <url>/2023/11/21/Django/02-orm%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><ul><li>Django开发中，提供ORM框架来操作数据库。ORM相当于一个翻译功能，将简单语句翻译成sql语句</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231121151627.png" alt="image-20231121151625382"></p><h2 id="1、安装第三方模块"><a href="#1、安装第三方模块" class="headerlink" title="1、安装第三方模块"></a>1、安装第三方模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install mysqlclient<br></code></pre></td></tr></table></figure><h2 id="2、ORM"><a href="#2、ORM" class="headerlink" title="2、ORM"></a>2、ORM</h2><p>orm可以帮我们做两件事：</p><ul><li>创建、修改、删除数据库中的表（不用自己写SQL语句）。【无法创建数据库】</li><li>操作表中数据（不写SQL语句）</li></ul><h3 id="2-1、自己创建数据库"><a href="#2-1、自己创建数据库" class="headerlink" title="2.1、自己创建数据库"></a>2.1、自己创建数据库</h3><ul><li>需要自己在Navicat上创建一个数据库</li></ul><h3 id="2-3、Django连接数据库"><a href="#2-3、Django连接数据库" class="headerlink" title="2.3、Django连接数据库"></a>2.3、Django连接数据库</h3><p>在setting.py文件中进行配置和修改</p><p><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231121155930.png" alt="image-20231121155930194"></p><h3 id="2-4、Django操作表"><a href="#2-4、Django操作表" class="headerlink" title="2.4、Django操作表"></a>2.4、Django操作表</h3><ul><li><strong>创建表</strong></li></ul><p>1、在models.py文件中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span>(models.Model):<br>    name = models.CharField(max_length=<span class="hljs-number">32</span>)  <span class="hljs-comment"># CharField字符串型</span><br>    password = models.CharField(max_length=<span class="hljs-number">64</span>)<br>    age = models.IntegerField()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">以上创建的类，orm会将其翻译成：</span><br><span class="hljs-string">create table demo_userinfo(</span><br><span class="hljs-string">    id bigint auto_increment primary key,</span><br><span class="hljs-string">    name varchar(32),</span><br><span class="hljs-string">    password varchar(64),</span><br><span class="hljs-string">    age int</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>2、在终端执行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py makemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure><blockquote><p>注意：app需要提前注册</p></blockquote><ul><li><p>删除表</p><ul><li>如果需要删除表或删除表中的列，则只需在models.py文件中注释表对应的class类，并再次执行上述两条语句就行</li></ul></li><li><p>修改表</p><ul><li>如果删除表中的列后，还想新增一列，则需要给新增的列添加默认值</li></ul></li></ul><h3 id="2-5、操作表中的数据（增删改查）"><a href="#2-5、操作表中的数据（增删改查）" class="headerlink" title="2.5、操作表中的数据（增删改查）"></a>2.5、操作表中的数据（增删改查）</h3><ul><li><p>增加数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> demo.models <span class="hljs-keyword">import</span> UserInfo<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orm</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># ------ 1、增加数据 ------ #</span><br>    UserInfo.objects.create(name=<span class="hljs-string">&quot;小明&quot;</span>,password=<span class="hljs-string">&quot;123&quot;</span>,age=<span class="hljs-number">12</span>)<br>    UserInfo.objects.create(name=<span class="hljs-string">&quot;小红&quot;</span>, password=<span class="hljs-string">&quot;4567&quot;</span>, age=<span class="hljs-number">21</span>)<br>    UserInfo.objects.create(name=<span class="hljs-string">&quot;小黄&quot;</span>, password=<span class="hljs-string">&quot;1323&quot;</span>, age=<span class="hljs-number">32</span>)<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;操作成功&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ------ 2、删除数据 ------ #</span><br>   UserInfo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">3</span>).delete() <span class="hljs-comment"># 删除id=3的行</span><br>   UserInfo.objects.<span class="hljs-built_in">all</span>().delete() <span class="hljs-comment"># 删除表中所有数据</span><br></code></pre></td></tr></table></figure></li><li><p>查找数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ------ 3、查找数据 ------ #</span><br>   <span class="hljs-comment"># 此时data_list是 data_list = [对象，对象，对象]</span><br>   data_list = UserInfo.objects.<span class="hljs-built_in">all</span>()<br>   <span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> data_list:<br>       <span class="hljs-built_in">print</span>(obj.<span class="hljs-built_in">id</span>, obj.name, obj.password, obj.age)<br></code></pre></td></tr></table></figure></li><li><p>修改数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ------ 4、修改数据 ------ #</span><br>UserInfo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">6</span>).update(password=<span class="hljs-number">999</span>) <span class="hljs-comment"># 修改id=6的行</span><br>UserInfo.objects.<span class="hljs-built_in">all</span>().update(password=<span class="hljs-number">333</span>) <span class="hljs-comment"># 修改表中所有数据</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="3、案例：用户管理"><a href="#3、案例：用户管理" class="headerlink" title="3、案例：用户管理"></a>3、案例：用户管理</h2><h3 id="1-展示用户列表"><a href="#1-展示用户列表" class="headerlink" title="1.展示用户列表"></a>1.展示用户列表</h3><ul><li>创建url</li><li>创建函数<ul><li>获取所有数据库的用户信息，用一个列表存储</li><li>使用html渲染</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231121175336.png" alt="image-20231121175335893"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>用户列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        &#123;% for obj in data_list %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; obj.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; obj.password &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; obj.age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        &#123;% endfor %&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231121175454.png" alt="image-20231121175453640"></p><h3 id="2-添加用户"><a href="#2-添加用户" class="headerlink" title="2.添加用户"></a>2.添加用户</h3><ul><li>URL</li><li>函数<ul><li>get请求，看到页面，输入内容</li><li>post，提交–&gt;写入到数据库</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">info_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;info_add.html&quot;</span>)<br><br>    <span class="hljs-comment"># 获取用户提交的数据</span><br>    user = request.POST.get(<span class="hljs-string">&quot;user&quot;</span>)<br>    pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>    age = request.POST.get(<span class="hljs-string">&quot;age&quot;</span>)<br><br>    <span class="hljs-comment"># 添加到数据库</span><br>    UserInfo.objects.create(name=user,password=pwd,age=age)<br><br>    <span class="hljs-comment"># 重定向自动跳转到列表查看页面</span><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/info/list/&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-删除用户"><a href="#3-删除用户" class="headerlink" title="3.删除用户"></a>3.删除用户</h3><ul><li>URL</li><li>函数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231121203445.png" alt="image-20231121203444363"></p><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231121203622.png" alt="image-20231121203622091" style="zoom:80%;" />]]></content>
    
    
    <categories>
      
      <category>Django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01.django_学习day01</title>
    <link href="/2023/11/20/Django/01-django%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/"/>
    <url>/2023/11/20/Django/01-django%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="第一个Django项目"><a href="#第一个Django项目" class="headerlink" title="第一个Django项目"></a>第一个Django项目</h1><p>pycharm创建一个Django项目，项目文件目录如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 1c">day01/ <span class="hljs-meta"># 根目录</span><br>    manage.py <span class="hljs-meta"># Django命令行工具</span><br>    day01/ <span class="hljs-meta"># 项目配置目录</span><br>        __init__.py <span class="hljs-meta"># 空文件，告诉python这个目录是python包</span><br>        settings.py <span class="hljs-meta"># 项目配置文件</span><br>        urls.py <span class="hljs-meta"># 项目所有urls声明汇总</span><br>        asgi.py <span class="hljs-meta"># ASGI服务器的入口文件</span><br>        wsgi.py <span class="hljs-meta"># WSGI服务器的入口文件</span><br></code></pre></td></tr></table></figure><ul><li>pycharm创建项目会默认穿件一个templates文件夹【需要删除】</li><li>在settings.py中【删除】“DIRS”:[<strong>os.path.join(BASE_DIR, ‘templates’)</strong>] ——&gt; “DIRS”:[]</li></ul><h3 id="1、终端运行"><a href="#1、终端运行" class="headerlink" title="1、终端运行"></a>1、终端运行</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">python manage.py runserver<br></code></pre></td></tr></table></figure><p><strong>更换端口：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">python manage.py runserver <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><h3 id="2、创建应用APP"><a href="#2、创建应用APP" class="headerlink" title="2、创建应用APP"></a>2、创建应用APP</h3><p>**1-**在manage.py同级目录下创建新应用：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">python manage.py startapp demo<br></code></pre></td></tr></table></figure><p>这将会创建一个 <code>demo</code> 目录，它的目录结构大致如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">demo/<br>    __init__<span class="hljs-selector-class">.py</span><br>    admin<span class="hljs-selector-class">.py</span>【固定不用动】Django默认提供了admin后台管理<br>    apps<span class="hljs-selector-class">.py</span>【固定不用动】app启动类<br>    migrations/【固定不用动】数据库变更记录<br>        __init__<span class="hljs-selector-class">.py</span><br>    models<span class="hljs-selector-class">.py</span>【重要】 对数据库操作<br>    tests<span class="hljs-selector-class">.py</span>【固定不用动】单元测试的<br>    views<span class="hljs-selector-class">.py</span>【重要】 视图函数<br></code></pre></td></tr></table></figure><p>**2-**在项目配置文件<code>day01\settings.py</code>的INSTALLED_APPS中加入demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED_APPS = [<br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class="hljs-string">&#x27;demo&#x27;</span>, <span class="hljs-comment"># 注册app</span><br>]<br></code></pre></td></tr></table></figure><p>**3-**然后编辑<code>day01/urls.py</code>, 把demo应用的urls也加入到项目的urls中去，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, include(<span class="hljs-string">&#x27;demo.urls&#x27;</span>)) <span class="hljs-comment"># 加入app对应urls</span><br>]<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231120233846.png" alt="image-20231120101528546" style="zoom:80%;" /><h3 id="3、编写视图函数和URL配置"><a href="#3、编写视图函数和URL配置" class="headerlink" title="3、编写视图函数和URL配置"></a>3、编写视图函数和URL配置</h3><p>**1-**编辑<code>demo/views.py</code>, 新增一个名为index的视图函数。每个视图函数的第一个默认参数都必需是<code>request</code>, 它是一个全局变量。Django把每个用户请求封装成了<code>request</code>对象，它包含里当前请求的所有信息，比如请求路径<code>request.path</code>, 当前用户<code>request.user</code>以及用户通过POST提交的数据<code>request.POST</code>。</p><p>index视图函数通过调用<code>HttpReponse</code>方法打印输出当前的请求路径<code>request.path</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># demo/views.py</span><br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;Hello, world. You&#x27;re at the polls index.&quot;</span>)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231120233859.png" alt="image-20231120101758204" style="zoom:75%;" /><p>**2-**使用<code> python manage.py runserver</code>重启服务器，打开<a href="http://127.0.0.1:8000/index/%E4%BC%9A%E6%98%BE%E7%A4%BA%22Hello">http://127.0.0.1:8000/index/会显示&quot;Hello</a>, world. You’re at the polls index.”</p><h3 id="4、templates模板"><a href="#4、templates模板" class="headerlink" title="4、templates模板"></a>4、templates模板</h3><p>返回html页面需要使用render</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 默认去当前目录下的templates文件夹中寻找对应html文件（根据app注册顺序找 ）</span><br>  <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&quot;XXX.html&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="5、静态文件"><a href="#5、静态文件" class="headerlink" title="5、静态文件"></a>5、静态文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs -">-static<br>-css【存放CSS样式】<br>-img 【存放图片】<br>-js【存放js样式】<br></code></pre></td></tr></table></figure><h4 id="加载静态文件"><a href="#加载静态文件" class="headerlink" title="加载静态文件"></a>加载静态文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># req.html</span><br>&#123;% load static %&#125;<span class="hljs-comment"># 加载</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231120233909.png" alt="image-20231120110846092" style="zoom:80%;" /><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="1、列表"><a href="#1、列表" class="headerlink" title="1、列表"></a>1、列表</h3><p>在render中添加一个字典，引入变量。读取列表，需要通过. 去索引</p><p><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231120233916.png" alt="image-20231120114142547"></p><h3 id="2、for语法，进行循环读取"><a href="#2、for语法，进行循环读取" class="headerlink" title="2、for语法，进行循环读取"></a>2、for语法，进行循环读取</h3><p><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231120233924.png" alt="image-20231120155003475"></p><h3 id="3、读取字典"><a href="#3、读取字典" class="headerlink" title="3、读取字典"></a><strong>3、读取字典</strong></h3><ul><li>可以根据字典的键去获取值：、</li><li>或者for循环键</li></ul><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231120233929.png" alt="image-20231120155818311" style="zoom:80%;" /><h3 id="4、判断语句if"><a href="#4、判断语句if" class="headerlink" title="4、判断语句if"></a>4、判断语句if</h3><p><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231120233934.png" alt="image-20231120160600216"></p><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231120233939.png" alt="image-20231120160954459" style="zoom:80%;" /><h2 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h2><p><strong>响应方式：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;返回请求&quot;</span>)<span class="hljs-comment"># 将字符串内容返回给请求者</span><br><span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;xxx.html&#x27;</span>,&#123;<span class="hljs-string">&quot;n1&quot;</span>:name&#125;)<span class="hljs-comment">#读取html的内容+渲染(替换)--&gt;字符串，返回给用户浏览器</span><br><br><span class="hljs-comment"># 重定向</span><br><span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml">避免Django表单提交出现错误，需要在form中加入语句 &quot;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">csrf_token</span></span> %&#125;</span><span class="language-xml">&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Grainup/note_pic/img/20231120233944.png" alt="image-20231120170840935"></p>]]></content>
    
    
    <categories>
      
      <category>Django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01.金蝶_一面_面经</title>
    <link href="/2023/11/02/%E9%9D%A2%E7%BB%8F/01.%E9%87%91%E8%9D%B6_%E4%B8%80%E9%9D%A2_%E9%9D%A2%E7%BB%8F/"/>
    <url>/2023/11/02/%E9%9D%A2%E7%BB%8F/01.%E9%87%91%E8%9D%B6_%E4%B8%80%E9%9D%A2_%E9%9D%A2%E7%BB%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="一面-10-17"><a href="#一面-10-17" class="headerlink" title="一面 10.17"></a>一面 10.17</h1><ul><li>对金蝶的了解多少？做哪些业务？</li><li>你和这个岗位的匹配度如何？你有哪些优势和缺点？</li><li>你觉得如果我们招聘你的话，你会给我们公司带来什么？</li><li>在校期间最有成就的事情</li><li>未来五年的规划</li></ul>]]></content>
    
    
    <categories>
      
      <category>秋招面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03.星星充电_一面_面经</title>
    <link href="/2023/11/02/%E9%9D%A2%E7%BB%8F/03.%E6%98%9F%E6%98%9F%E5%85%85%E7%94%B5_%E4%B8%80%E9%9D%A2_%E9%9D%A2%E7%BB%8F/"/>
    <url>/2023/11/02/%E9%9D%A2%E7%BB%8F/03.%E6%98%9F%E6%98%9F%E5%85%85%E7%94%B5_%E4%B8%80%E9%9D%A2_%E9%9D%A2%E7%BB%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="一面-10-30-（32min）"><a href="#一面-10-30-（32min）" class="headerlink" title="一面 10.30 （32min）"></a>一面 10.30 （32min）</h1><ul><li>自我介绍</li><li>介绍一下项目</li><li>怎么理解selenium web driver</li><li>那假如我要实现一个场景，用我的一个脚本，然后实现对不同的一些页面的一个兼容性验证。要用到不同版本的浏览器，比方说Chrome、火狐，还有 re ，或者是其他的浏览器，这种你觉得应该怎样去实现?（答：使用selenium grid分布式执行操作）</li><li>解释一下装饰器，它与函数的区别</li><li>解释一下什么是JSON，JSON返回的元素是有序的还是无序的</li><li>假如我现在要做两个JSON 文件的对比，一个老接口的 API输出的结果，一个新接口的输出，我想要对比这两个结果字段有没有差异，我该怎么做?</li><li>TCP、UDP介绍，区别，使用场景</li><li>get请求和post请求的区别</li><li>Linux：查看占用8080端口的进程，并结束该进程</li><li>锁的特点和机制</li><li>什么是协程？有什么特点？</li><li>对公司的了解</li><li>对常州有什么印象</li><li>你个人最大的优势？</li><li>从测试的角度看，如何保证课题的运行结果是满足要求的</li><li>课题有遇到什么难点吗</li></ul><p>反问：</p><ul><li>软测在公司负责的内容大概是什么</li><li>自动化占比？（答：自动化混合在业务中，都会有涉及，没有专门的自动化）</li></ul>]]></content>
    
    
    <categories>
      
      <category>秋招面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04.力维_一面+二面</title>
    <link href="/2023/11/02/%E9%9D%A2%E7%BB%8F/04.%E5%8A%9B%E7%BB%B4_%E4%B8%80%E9%9D%A2+%E4%BA%8C%E9%9D%A2/"/>
    <url>/2023/11/02/%E9%9D%A2%E7%BB%8F/04.%E5%8A%9B%E7%BB%B4_%E4%B8%80%E9%9D%A2+%E4%BA%8C%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="一面-10-31-（21min）"><a href="#一面-10-31-（21min）" class="headerlink" title="一面 10.31 （21min）"></a>一面 10.31 （21min）</h1><ul><li>自我介绍</li><li>说一下整个产品生命周期，软件测试在哪些节点做哪些事</li><li>测试的目的</li><li>白盒测试和黑盒测试的区别</li><li>登录界面，设计测试用例</li><li>测试用例包括哪些内容</li><li>postman如何做接口测试</li><li>接口鉴权token在postman中如何处理</li><li>抓包工具怎么使用（fiddler）</li><li>selenium使用哪些元素定位方法</li><li>下拉菜单的元素如何获取</li><li>Linux的常用命令，文件授权命令，vim保存命令</li><li>TCP、UDP的区别</li><li>OSI模型和TCP&#x2F;IP模型的区别</li><li>MySQL中索引的定义，优缺点</li><li>MySQL删除表中数据的命令（delete from 表名 where 条件、truncate table 表名）</li><li>什么是左连接、右连接</li><li>python：字符串拆分（split）、字符串转化成大小写（upper、lower），正则表达式了解吗（不了解）</li><li>字典是什么</li></ul><h1 id="二面-11-1-（23min）"><a href="#二面-11-1-（23min）" class="headerlink" title="二面 11.1 （23min）"></a>二面 11.1 （23min）</h1><ul><li>自我介绍</li><li>研究生目前做的是什么样的工作（人工智能交叉方向）</li><li>你的研究方向好像和测试方向是两个不同的方向，你为什么选择去做测试</li><li>手头有offer吗</li><li>研究生课题是几个人负责？主要分工咋样</li><li>测试流程</li><li>测试项目介绍</li><li>数据库有用过吗</li><li>对公司的了解</li><li>做项目过程中遇到的障碍，如何攻克的</li><li>在校期间是否担任过一些职位或参加过社团活动</li><li>平时业余时间喜欢做什么工作</li><li>对于毕业后的第一份工作，你最看重什么</li><li>代码量如何</li><li>明年三四月能否实习</li></ul><p>反问：</p><p>公司中自动化测试的比例？</p>]]></content>
    
    
    <categories>
      
      <category>秋招面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05.TCL格创_一面</title>
    <link href="/2023/11/02/%E9%9D%A2%E7%BB%8F/05.TCL%E6%A0%BC%E5%88%9B_%E4%B8%80%E9%9D%A2/"/>
    <url>/2023/11/02/%E9%9D%A2%E7%BB%8F/05.TCL%E6%A0%BC%E5%88%9B_%E4%B8%80%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="一面-11-1-（25min）"><a href="#一面-11-1-（25min）" class="headerlink" title="一面 11.1 （25min）"></a>一面 11.1 （25min）</h1><ul><li><p>自我介绍</p></li><li><p>项目介绍</p></li><li><p>购物车测试用例设计</p></li><li><p>有做过性能测试吗</p></li><li><p>数据库去重的命令（distinct、group by）</p></li><li><p>模糊匹配的语句包括（%，_）</p><ul><li>%代表任意多个字符</li><li>_代表任意一个字符</li></ul></li><li><p>浏览器键入网站后经历了哪些步骤</p></li><li><p>OSI七层模型有哪些组成</p></li><li><p><strong>链表、栈、哈希表他们的特性以及应用场景</strong></p></li><li><p><strong>索引类型、使用的存储结构（B+树）</strong></p></li><li><p>测试的基本流程</p></li><li><p>在回归测试中，如何进行测试保证问题已经解决并且不会引发其他代码问题或业务功能问题？</p></li><li><p>有做过购物车下单并发测试吗</p></li><li><p>postman压测有做过吗</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>秋招面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>06.宇视科技_一面</title>
    <link href="/2023/11/02/%E9%9D%A2%E7%BB%8F/06.%E5%AE%87%E8%A7%86%E7%A7%91%E6%8A%80_%E4%B8%80%E9%9D%A2/"/>
    <url>/2023/11/02/%E9%9D%A2%E7%BB%8F/06.%E5%AE%87%E8%A7%86%E7%A7%91%E6%8A%80_%E4%B8%80%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="一面-11-1（16min）"><a href="#一面-11-1（16min）" class="headerlink" title="一面 11.1（16min）"></a>一面 11.1（16min）</h1><ul><li>自我介绍</li><li>对测试的理解</li><li>你做测试的优势</li><li>TCP、UDP的使用场景</li><li>Linux常用命令、防火墙了解么、统计一个服务器的网口流量用什么命令</li><li>测试用例包括哪些内容</li><li>项目介绍</li><li>自动化测试的优缺点，什么情况下自动化测试是必要的？<ul><li>必要性：回归测试和版本迭代时，老的功能可以通过自动化去检验一下</li></ul></li></ul><p>反问：</p><p>公司自动化测试的比例：公司里手工测试和自动化测试是分开的，会有专门的组做自动化测试</p>]]></content>
    
    
    <categories>
      
      <category>秋招面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02.同程旅行_一面_面经</title>
    <link href="/2023/11/01/%E9%9D%A2%E7%BB%8F/02.%E5%90%8C%E7%A8%8B%E6%97%85%E8%A1%8C_%E4%B8%80%E9%9D%A2_%E9%9D%A2%E7%BB%8F/"/>
    <url>/2023/11/01/%E9%9D%A2%E7%BB%8F/02.%E5%90%8C%E7%A8%8B%E6%97%85%E8%A1%8C_%E4%B8%80%E9%9D%A2_%E9%9D%A2%E7%BB%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="一面-10-24-48min"><a href="#一面-10-24-48min" class="headerlink" title="一面 10.24 (48min)"></a>一面 10.24 (48min)</h1><ul><li><p>对于软件测试的了解</p></li><li><p>质量保障(QA)和软件测试有什么区别没有？</p><ul><li><p><strong>一、软件测试是一个过程，而软件质量保证是一个方法论。</strong></p><p>软件测试是通过执行软件的各种测试活动来检测和发现软件缺陷，例如单元测试、集成测试、系统测试等等。软件质量保障是一种方法论，它涉及管理、规划、监督和控制软件开发过程的各个方面，以确保软件产品的质量。</p></li><li><p><strong>二、软件测试着眼于软件产品的缺陷，而软件质量保证则关注软件产品的质量。</strong></p><p>软件测试是针对软件中的缺陷和错误进行的活动，例如逻辑错误、设计问题、性能问题等。软件质量保证是确保软件产品符合质量标准和用户需求的过程，包括软件设计、开发、测试、部署和维护。</p></li><li><p><strong>三、软件测试是一项技术任务，而软件质量保证是一项管理任务。</strong></p><p>软件测试需要技术人员使用各种测试工具和技术来发现和修复软件缺陷。</p><p>而软件质量保证需要管理人员制定和执行质量计划、制定和实施质量标准、指导和培训开发人员等。</p></li></ul></li><li><p>软件开发的一个整体流程</p></li><li><p>测试用例包含哪几项</p></li><li><p>购物车，测试用例</p></li><li><p>fiddler抓包原理</p></li><li><p>fiddler是否可以抓包安卓的https请求？（不可以的）</p></li><li><p>python：一个列表中嵌套字典，字典中包含名字和分数，现在需要按照分数对该列表进行排序，该怎么实现</p></li><li><p>装饰器是什么</p></li><li><p>map(), filter()和reduce()</p></li><li><p>PO模式的实现</p></li><li><p>Selenium的元素定位方法</p></li><li><p>查询所有科目成绩大于60分的学生姓名</p><ul><li><strong>select name from test_a group by name having min(scores)&gt;60;</strong></li></ul></li><li><p>http协议报文、请求方式、响应状态码</p></li><li><p>http头有哪些常见字段</p></li><li><p>接口测试测试用例从哪些方面考虑，例如登录接口的测试用例如何编写</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>秋招面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树</title>
    <link href="/2023/09/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2023/09/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>结点：树中的元素，包含一个数据元素及若干指向子树的分支<br />结点的度：结点拥有的子树数量<br /><br><img src="/blog_img/image.png"><br><a name="A7udv"></a></p><h2 id="1、什么是二叉树？"><a href="#1、什么是二叉树？" class="headerlink" title="1、什么是二叉树？"></a>1、什么是二叉树？</h2><p><strong>定义：二叉树是每个结点最多有两个子树的树结构</strong><br /><strong>应用：</strong>1、window和linux等文件管理系统都是树型结构<br />    2、二叉树的中序遍历形式被用来存放C 语言中的表达式<br />    3、二叉排序树被用于数据的排序和快速查找。<br />    4、霍夫曼编码</p><ul><li>结点：树中的元素，包含一个数据元素及若干指向子树的分支</li><li>结点的度：结点拥有的子树数量</li><li>叶子结点就是度为0的结点</li><li><strong>二叉树的高度：</strong>指从根节点到叶子节点的最长路径上的节点数</li><li><strong>二叉树的某节点深度：</strong>指从根节点到该节点的最长路径上的节点数<br><a name="Iw6Qt"></a></li></ul><h3 id="1-1-满二叉树"><a href="#1-1-满二叉树" class="headerlink" title="1.1 满二叉树"></a>1.1 满二叉树</h3><p>如果一棵二叉树只有度为0的结点和度为2的结点，并且度为0的结点在同一层上，则这棵二叉树为满二叉树。<strong>也可以说深度为k，有2^k-1个节点的二叉树。</strong><br><a name="LnZrX"></a></p><h3 id="1-2-完全二叉树"><a href="#1-2-完全二叉树" class="headerlink" title="1.2 完全二叉树"></a>1.2 完全二叉树</h3><p>在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。<strong>特点</strong>：所有子节点都出现在第k层或k-1层。<br><a name="BKOmj"></a></p><h3 id="1-3-二叉搜索树"><a href="#1-3-二叉搜索树" class="headerlink" title="1.3 二叉搜索树"></a>1.3 二叉搜索树</h3><p>二叉搜索树是一个有序树</p><ul><li>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li><li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li><li>它的左、右子树也分别为二叉排序树<br><a name="xaBDA"></a></li></ul><h3 id="1-4-平衡二叉搜索树"><a href="#1-4-平衡二叉搜索树" class="headerlink" title="1.4 平衡二叉搜索树"></a>1.4 平衡二叉搜索树</h3><p>又称AVL树。具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p><ul><li><strong>C++中map、set、multimap，multiset的底层实现都是平衡二叉搜索树</strong>，所以map、set的增删操作时间时间复杂度是logn<br><a name="QGY4k"></a></li></ul><h3 id="1-5-代码定义树节点"><a href="#1-5-代码定义树节点" class="headerlink" title="1.5 代码定义树节点"></a>1.5 代码定义树节点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.left = left<br>        self.right = right<br></code></pre></td></tr></table></figure><p><a name="jR37Y"></a></p><h2 id="2、二叉树遍历"><a href="#2、二叉树遍历" class="headerlink" title="2、二叉树遍历"></a>2、二叉树遍历</h2><p>二叉树主要有两种遍历方式：</p><ol><li><strong>深度优先遍历</strong>：先往深走，遇到叶子节点再往回走。</li><li><strong>广度优先遍历</strong>：一层一层的去遍历。</li></ol><ul><li>深度优先遍历<ul><li>前序遍历（递归法，迭代法）</li><li>中序遍历（递归法，迭代法）</li><li>后序遍历（递归法，迭代法）</li></ul></li><li>广度优先遍历<ul><li>层次遍历（迭代法）<br><a name="LA7Uv"></a></li></ul></li></ul><h3 id="2-1-递归遍历"><a href="#2-1-递归遍历" class="headerlink" title="2.1 递归遍历"></a>2.1 递归遍历</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.left = left<br>        self.right = right<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br><br>    <span class="hljs-comment"># 前序遍历</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">preorderTraversal</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:    <span class="hljs-comment"># 根节点为空就返回空列表，不用再遍历下去了。</span><br>            <span class="hljs-keyword">return</span> []<br>        left = self.preorderTraversal(root.left)<br>        right = self.preorderTraversal(root.right)<br>        <span class="hljs-keyword">return</span> [root.val] + left + right<br><br>    <span class="hljs-comment"># 中序遍历</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inorderTraversal</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []<br>        left = self.inorderTraversal(root.left)<br>        right = self.inorderTraversal(root.right)<br>        <span class="hljs-keyword">return</span> left + [root.val] + right<br><br>    <span class="hljs-comment"># 后序遍历</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">postorderTraversal</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []<br>        left = self.postorderTraversal(root.left)<br>        right = self.postorderTraversal(root.right)<br>        <span class="hljs-keyword">return</span> left + right + [root.val]<br><br></code></pre></td></tr></table></figure><p><a name="se6AH"></a></p><h3 id="2-2-非递归遍历"><a href="#2-2-非递归遍历" class="headerlink" title="2.2 非递归遍历"></a>2.2 非递归遍历</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    统一格式的非递归写法</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 前序遍历：中左右，那么代码顺序是右左中</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">preorderTraversal</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []<br>        stack = [root]<br>        result = []<br>        <span class="hljs-keyword">while</span> stack:<br>            node = stack.pop()<br>            <span class="hljs-keyword">if</span> node != <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">if</span> node.right:  <span class="hljs-comment"># 右</span><br>                    stack.append(node.right)<br>                <span class="hljs-keyword">if</span> node.left:   <span class="hljs-comment"># 左</span><br>                    stack.append(node.left)<br>                stack.append(node)  <span class="hljs-comment"># 中</span><br>                stack.append(<span class="hljs-literal">None</span>)<br>            <span class="hljs-keyword">else</span>:<br>                node = stack.pop()<br>                result.append(node.val)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-comment"># 中序遍历：左中右，那么代码顶序是右中左</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inorderTraversal</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []<br>        stack = [root]<br>        result = []<br>        <span class="hljs-keyword">while</span> stack:<br>            node = stack.pop()<br>            <span class="hljs-keyword">if</span> node != <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">if</span> node.right:  <span class="hljs-comment"># 右</span><br>                    stack.append(node.right)<br>                stack.append(node)  <span class="hljs-comment"># 中</span><br>                stack.append(<span class="hljs-literal">None</span>)<br>                <span class="hljs-keyword">if</span> node.left:   <span class="hljs-comment"># 左</span><br>                    stack.append(node.left)<br><br>            <span class="hljs-keyword">else</span>:<br>                node = stack.pop()<br>                result.append(node.val)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-comment">#  后序遍历：左右中，那么代码顶序是中右左</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inorderTraversal</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []<br>        stack = [root]<br>        result = []<br>        <span class="hljs-keyword">while</span> stack:<br>            node = stack.pop()<br>            <span class="hljs-keyword">if</span> node != <span class="hljs-literal">None</span>:<br>                stack.append(node)  <span class="hljs-comment"># 中</span><br>                stack.append(<span class="hljs-literal">None</span>)<br>                <span class="hljs-keyword">if</span> node.right:  <span class="hljs-comment"># 右</span><br>                    stack.append(node.right)<br>                <span class="hljs-keyword">if</span> node.left:   <span class="hljs-comment"># 左</span><br>                    stack.append(node.left)<br>            <span class="hljs-keyword">else</span>:<br>                node = stack.pop()<br>                result.append(node.val)<br>        <span class="hljs-keyword">return</span> result          <br></code></pre></td></tr></table></figure><p><a name="pHizx"></a></p><h3 id="2-3-102-层序遍历"><a href="#2-3-102-层序遍历" class="headerlink" title="2.3  102 层序遍历"></a>2.3  102 层序遍历</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> collections<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.left = left<br>        self.right = right<br><br><span class="hljs-comment"># 利用队列法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">levelOrder</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:    <span class="hljs-comment"># 判断根节点是否为空</span><br>            <span class="hljs-keyword">return</span> []<br>        queue = collections.deque([root])   <span class="hljs-comment"># 引入队列</span><br>        result = []<br>        <span class="hljs-keyword">while</span> queue:<br>            level = []<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(queue)):<br>                node = queue.popleft()  <span class="hljs-comment"># 从队列左端删除</span><br>                level.append(node.val)<br>                <span class="hljs-keyword">if</span> node.left:<br>                    queue.append(node.left)<br>                <span class="hljs-keyword">if</span> node.right:<br>                    queue.append(node.right)<br>            result.append(level)<br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p><a name="iqNY4"></a></p><h3 id="2-4-算法题"><a href="#2-4-算法题" class="headerlink" title="2.4 算法题"></a>2.4 算法题</h3><p><a name="c3vfT"></a></p><h4 id="107-二叉树的层序遍历II"><a href="#107-二叉树的层序遍历II" class="headerlink" title="107.二叉树的层序遍历II"></a>107.二叉树的层序遍历II</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将层序遍历的结果倒序输出</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">levelOrderBottom</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []     <br>        queue = collections.deque([root])<br>        result = []<br><br>        <span class="hljs-keyword">while</span> queue:<br>            level = [] <span class="hljs-comment"># 记录每一层</span><br>            n = <span class="hljs-built_in">len</span>(queue)<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                node = queue.popleft()<br>                level.append(node.val)<br>                <span class="hljs-keyword">if</span> node.left:<br>                    queue.append(node.left)<br>                <span class="hljs-keyword">if</span> node.right:<br>                    queue.append(node.right)<br>            result.append(level)<br>        <span class="hljs-keyword">return</span> result[::-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p><a name="iogrB"></a></p><h4 id="199-二叉树的右视图"><a href="#199-二叉树的右视图" class="headerlink" title="199.二叉树的右视图"></a><a href="https://leetcode.cn/problems/binary-tree-right-side-view/">199.二叉树的右视图</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rightSideView</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []<br>        queue = collections.deque([root])<br>        result = []<br>        <span class="hljs-keyword">while</span> queue:<br>            level = []<br>            n = <span class="hljs-built_in">len</span>(queue)<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                node = queue.popleft()<br>                level.append(node.val)<br>                <span class="hljs-keyword">if</span> node.left:<br>                    queue.append(node.left)<br>                <span class="hljs-keyword">if</span> node.right:<br>                    queue.append(node.right)<br>            result.append(level[-<span class="hljs-number">1</span>])<span class="hljs-comment"># 将每一层的最后一位数添加到列表中</span><br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p><a name="PwPJO"></a></p><h4 id="637-二叉树的层平均值"><a href="#637-二叉树的层平均值" class="headerlink" title="637.二叉树的层平均值"></a><a href="https://leetcode.cn/problems/average-of-levels-in-binary-tree/">637.二叉树的层平均值</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">averageOfLevels</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">float</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []<br>        <br>        queue = collections.deque([root])<br>        result = []<br>        <span class="hljs-keyword">while</span> queue:<br>            level = <span class="hljs-number">0</span><br>            n = <span class="hljs-built_in">len</span>(queue)<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                node = queue.popleft()<br>                level += node.val<br><br>                <span class="hljs-keyword">if</span> node.left:<br>                    queue.append(node.left)<br>                <span class="hljs-keyword">if</span> node.right:<br>                    queue.append(node.right)          <br>            result.append(level/n)<br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p><a name="vjy3r"></a></p><h4 id="429-N-叉树的层序遍历"><a href="#429-N-叉树的层序遍历" class="headerlink" title="429.N 叉树的层序遍历"></a><a href="https://leetcode.cn/problems/n-ary-tree-level-order-traversal/">429.N 叉树的层序遍历</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-literal">None</span>, children=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.children = children<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">levelOrder</span>(<span class="hljs-params">self, root: <span class="hljs-string">&#x27;Node&#x27;</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []<br>        queue = collections.deque([root])<br>        result = []<br><br>        <span class="hljs-keyword">while</span> queue:<br>            level = []<br>            n = <span class="hljs-built_in">len</span>(queue)<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                node = queue.popleft()<br>                level.append(node.val)<br>                <span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> node.children:<br>                    queue.append(child)<br><br>            result.append(level)<br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p><a name="vPYE6"></a></p><h4 id="515-在每个树行中找最大值"><a href="#515-在每个树行中找最大值" class="headerlink" title="515.在每个树行中找最大值"></a><a href="https://leetcode.cn/problems/find-largest-value-in-each-tree-row/">515.在每个树行中找最大值</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">largestValues</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []<br>        queue = collections.deque([root])<br>        ans = []<br>        <span class="hljs-keyword">while</span> queue:<br>            level = []<br>            n = <span class="hljs-built_in">len</span>(queue)<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                node = queue.popleft()<br>                level.append(node.val)<br>                <span class="hljs-keyword">if</span> node.left:<br>                    queue.append(node.left)<br>                <span class="hljs-keyword">if</span> node.right:<br>                    queue.append(node.right)<br>            ans.append(<span class="hljs-built_in">max</span>(level))<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/"><strong>104.二叉树的最大深度</strong></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxDepth</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        queue = collections.deque([root])<br>        ans = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> queue:<br>            ans += <span class="hljs-number">1</span><br>            n = <span class="hljs-built_in">len</span>(queue)<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                node = queue.popleft()<br>                <span class="hljs-keyword">if</span> node.left:<br>                    queue.append(node.left)<br>                    <br>                <span class="hljs-keyword">if</span> node.right:<br>                    queue.append(node.right) <br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxDepth</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        left = self.maxDepth(node.left)<br>        right = self.maxDepth(node.right)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(left,right) + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>需要收集孩子节点的信息返回给上一层时，再用后续遍历</p>]]></content>
    
    
    <categories>
      
      <category>力扣刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
