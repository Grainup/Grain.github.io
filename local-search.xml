<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>01.性能测试的理论</title>
    <link href="/2023/12/14/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/01-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA/"/>
    <url>/2023/12/14/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/01-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="1、性能测试的概念"><a href="#1、性能测试的概念" class="headerlink" title="1、性能测试的概念"></a>1、性能测试的概念</h1><div class="note note-success">            <p>为什么要做性能测试？</p>          </div>]]></content>
    
    
    <categories>
      
      <category>性能测试学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>性能测试学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01.django项目的一些最佳实践</title>
    <link href="/2023/12/13/0-Django%E5%AE%9E%E8%B7%B5-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01-%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <url>/2023/12/13/0-Django%E5%AE%9E%E8%B7%B5-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01-%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="1、项目总览"><a href="#1、项目总览" class="headerlink" title="1、项目总览"></a>1、项目总览</h1><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/a240f8c1b496f4432c20d23adcf9fd56.png" alt="1ae84daf-3ba3-46d2-a8af-99c19b871d2f"></p><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/99c72c2e5678ffd69a9e984a0b6a0b92.png" alt="1"></p><h1 id="2、项目的一些最佳实践"><a href="#2、项目的一些最佳实践" class="headerlink" title="2、项目的一些最佳实践"></a>2、项目的一些最佳实践</h1><ul><li>使用pipenv管理项目环境</li><li>自定义用户模型</li><li>优先使用通用类视图（Class-based generic views）</li><li>在系统变量中保存敏感信息</li><li>为不同环境分别配置settings.py文件</li><li>编写测试用例</li></ul><h2 id="2-1-Pipenv管理项目环境"><a href="#2-1-Pipenv管理项目环境" class="headerlink" title="2-1. Pipenv管理项目环境"></a>2-1. Pipenv管理项目环境</h2>]]></content>
    
    
    <categories>
      
      <category>Django项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10-项目开发-8-文件上传_学习day10</title>
    <link href="/2023/12/11/Django/10-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-8-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2023/12/11/Django/10-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-8-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1. 基本操作"></a>1. 基本操作</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    &#123;% csrf_token %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;avatar&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_list</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&quot;upload_list.html&quot;</span>)<br>    <span class="hljs-comment"># 获取文件对象</span><br>    file_obj = request.FILES.get(<span class="hljs-string">&#x27;avatar&#x27;</span>)<br><br>    <span class="hljs-comment"># 将上传的文件本地保存</span><br>    f = <span class="hljs-built_in">open</span>(file_obj.name,mode=<span class="hljs-string">&#x27;wb&#x27;</span>)<br>    <span class="hljs-comment"># 上传的文件按一块一块的读取</span><br>    <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> file_obj.chunks():<br>        f.write(chunk)<br>    f.close()<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;上传成功！&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="2-案例：批量上传数据"><a href="#2-案例：批量上传数据" class="headerlink" title="2. 案例：批量上传数据"></a>2. 案例：批量上传数据</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/depart/multi/&quot;</span>&gt;</span><br>    &#123;% csrf_token %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exc&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">depart_multi</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;批量上传excel文件&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 1. 获取对象</span><br>    file_obj = request.FILES.get(<span class="hljs-string">&quot;exc&quot;</span>)<br>    <span class="hljs-comment"># 2. 将对象传递给 openpyxl，由 openpyxl读取文件的内容</span><br>    wb = load_workbook(file_obj)<br>    sheet = wb.worksheets[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># 3. 循环获取每一行的数据，排除第一行</span><br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> sheet.iter_rows(min_row=<span class="hljs-number">2</span>):<br>        text = row[<span class="hljs-number">0</span>].value<br>        <span class="hljs-comment"># print(text)</span><br>        <span class="hljs-comment"># 加入到数据库</span><br>        exists = models.Department.objects.<span class="hljs-built_in">filter</span>(title=text).exists()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> exists:<br>            models.Department.objects.create(title=text)<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/depart/list/&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="3-混合数据上传（Form）"><a href="#3-混合数据上传（Form）" class="headerlink" title="3. 混合数据上传（Form）"></a>3. 混合数据上传（Form）</h2><ul><li>提交页面时，用户输入数据+文件（输入不能为空、报错）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UpForm</span>(forms.Form):<br>    name = forms.CharField(label=<span class="hljs-string">&quot;姓名&quot;</span>)<br>    age = forms.IntegerField(label=<span class="hljs-string">&quot;年龄&quot;</span>)<br>    img = forms.FileField(label=<span class="hljs-string">&quot;头像&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-primary&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 40rem;margin-top: 20px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-title&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <span class="hljs-attr">novalidate</span>&gt;</span><br>            &#123;% csrf_token %&#125;<br><br>            &#123;% for field in form %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">lable</span>&gt;</span>&#123;&#123; field.label &#125;&#125;: <span class="hljs-tag">&lt;/<span class="hljs-name">lable</span>&gt;</span><br>                &#123;&#123; field &#125;&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; field.errors.0 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            &#123;% endfor %&#125;<br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>保存<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-1-创建一个数据库用来保存提交的数据"><a href="#3-1-创建一个数据库用来保存提交的数据" class="headerlink" title="3.1 创建一个数据库用来保存提交的数据"></a>3.1 创建一个数据库用来保存提交的数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Boss</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;演示上传文件&quot;&quot;&quot;</span><br>    name = models.CharField(verbose_name=<span class="hljs-string">&quot;姓名&quot;</span>, max_length=<span class="hljs-number">32</span>)<br>    age = models.IntegerField(verbose_name=<span class="hljs-string">&quot;年龄&quot;</span>, default=<span class="hljs-number">0</span>)<br>    img = models.CharField(verbose_name=<span class="hljs-string">&quot;头像&quot;</span>,max_length=<span class="hljs-number">128</span>)<br></code></pre></td></tr></table></figure><h3 id="3-2-读取上传的文件内容，写入到文件夹中并获取文件路径，将路径保存到数据库"><a href="#3-2-读取上传的文件内容，写入到文件夹中并获取文件路径，将路径保存到数据库" class="headerlink" title="3.2 读取上传的文件内容，写入到文件夹中并获取文件路径，将路径保存到数据库"></a>3.2 读取上传的文件内容，写入到文件夹中并获取文件路径，将路径保存到数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_list</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;===================Form操作=====================&quot;&quot;&quot;</span><br>    title = <span class="hljs-string">&quot;Form上传&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        form = UpForm()<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;upload_list.html&quot;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>: form, <span class="hljs-string">&quot;title&quot;</span>: title&#125;)<br>    form = UpForm(data=request.POST, files=request.FILES)<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        <span class="hljs-comment"># 1.读取上传的文件内容，写入到文件夹中并获取文件路径</span><br>        file_obj = form.cleaned_data.get(<span class="hljs-string">&quot;img&quot;</span>)<br>        db_file_path = os.path.join(<span class="hljs-string">&quot;static&quot;</span>, <span class="hljs-string">&quot;images&quot;</span>, file_obj.name)  <span class="hljs-comment"># 在数据库中存储路径</span><br>        file_path = os.path.join(<span class="hljs-string">&quot;app01&quot;</span>, db_file_path)<br>        f = <span class="hljs-built_in">open</span>(file_path,<span class="hljs-string">&quot;wb&quot;</span>)<br>        <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> file_obj.chunks():<br>            f.write(chunk)<br>        f.close()<br>        <span class="hljs-comment"># 2. 将文件路径保存到数据库</span><br>        models.Boss.objects.create(<br>            name=form.cleaned_data[<span class="hljs-string">&quot;name&quot;</span>],<br>            age=form.cleaned_data[<span class="hljs-string">&quot;age&quot;</span>],<br>            img=db_file_path,<br>        )<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;...&quot;</span>)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;upload_list.html&quot;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>: form, <span class="hljs-string">&quot;title&quot;</span>: title&#125;)<br></code></pre></td></tr></table></figure><h2 id="4-media文件夹-存放用户上传文件"><a href="#4-media文件夹-存放用户上传文件" class="headerlink" title="4. media文件夹-存放用户上传文件"></a>4. media文件夹-存放用户上传文件</h2><blockquote><p>在urls.py 文件中进行配置</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> re_path<br><span class="hljs-keyword">from</span> django.views.static <span class="hljs-keyword">import</span> serve<br><span class="hljs-keyword">from</span> day02 <span class="hljs-keyword">import</span> settings<br><br>urlpatterns = [<br>    re_path(<span class="hljs-string">r&#x27;media/(?P&lt;path&gt;.*)$&#x27;</span>,serve,&#123;<span class="hljs-string">&#x27;document_root&#x27;</span>:settings.MEDIA_ROOT&#125;,name=<span class="hljs-string">&#x27;media&#x27;</span>),<br>]<br></code></pre></td></tr></table></figure><blockquote><p>settings.py中设置</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="hljs-string">&quot;media&quot;</span>)<br>MEDIA_URL = <span class="hljs-string">&quot;/media/&quot;</span><br></code></pre></td></tr></table></figure><h2 id="5-混合数据上传（ModelForm）"><a href="#5-混合数据上传（ModelForm）" class="headerlink" title="5. 混合数据上传（ModelForm）"></a>5. 混合数据上传（ModelForm）</h2><ul><li><p>models.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">City</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;演示上传文件（ModelForm版本）&quot;&quot;&quot;</span><br>    name = models.CharField(verbose_name=<span class="hljs-string">&quot;名称&quot;</span>, max_length=<span class="hljs-number">32</span>)<br>    count = models.IntegerField(verbose_name=<span class="hljs-string">&quot;人口&quot;</span>, default=<span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># FileField会自动保存文件路径到数据库，upload_to会将文件保存到相应路径</span><br>    img = models.FileField(verbose_name=<span class="hljs-string">&quot;Logo&quot;</span>, max_length=<span class="hljs-number">128</span>, upload_to=<span class="hljs-string">&#x27;city/&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>定义ModelForm</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UpModelForm</span>(<span class="hljs-title class_ inherited__">BootStrapModelForm</span>):<br>    boot_exclude = [<span class="hljs-string">&#x27;img&#x27;</span>]<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.City<br>        fields = <span class="hljs-string">&quot;__all__&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>视图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_model_list</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;上传数据（ModelForm版本）&quot;&quot;&quot;</span><br>    title = <span class="hljs-string">&quot;ModelForm上传&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        form = UpModelForm()<br>        <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;upload_model_list.html&#x27;</span>,&#123;<span class="hljs-string">&quot;form&quot;</span>:form, <span class="hljs-string">&quot;title&quot;</span>: title&#125;)<br>    form = UpModelForm(data=request.POST, files=request.FILES)<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        form.save()<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;上传成功&quot;</span>)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;upload_model_list.html&#x27;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>: form, <span class="hljs-string">&quot;title&quot;</span>: title&#125;)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>09-项目开发-7_学习day09</title>
    <link href="/2023/12/07/Django/09-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-7/"/>
    <url>/2023/12/07/Django/09-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-7/</url>
    
    <content type="html"><![CDATA[<p> &#x1F680; &#x3D;&#x3D;继续上节Ajax案例进行&#x3D;&#x3D;</p><ul><li><p>在任务提交页面下方显示提交的任务列表</p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/eabf5a3436d3a61c4fed9f8c9e1a1d5d.png" alt="image-20231207092223275" style="zoom:80%;" /></li><li><p>提交成功后，弹出“添加成功”的弹窗，点击弹窗中的确定，会刷新页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//该功能实现可以使用js语法</span><br><span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;<br>    <span class="hljs-keyword">if</span>(res.<span class="hljs-property">status</span>)&#123;<br>        <span class="hljs-comment">// alert弹窗</span><br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;添加成功！&quot;</span>);<br>        <span class="hljs-comment">// 使用js实现页面刷新</span><br>        location.<span class="hljs-title function_">reload</span>();<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        $.<span class="hljs-title function_">each</span>(res.<span class="hljs-property">error</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">name,data</span>)&#123;<br>            &#123;#<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name,data)#&#125;<br>                $(<span class="hljs-string">&quot;#id_&quot;</span> + name).<span class="hljs-title function_">next</span>().<span class="hljs-title function_">text</span>(data[<span class="hljs-number">0</span>]);<br>            &#125;)<br></code></pre></td></tr></table></figure></li></ul><p>​<img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/2330f756672797733e799e5a55ca3914.png" alt="image-20231207092608056" style="zoom:80%;" /></p><h2 id="1、订单管理"><a href="#1、订单管理" class="headerlink" title="1、订单管理"></a>1、订单管理</h2><h3 id="1-1-表结构"><a href="#1-1-表结构" class="headerlink" title="1.1 表结构"></a>1.1 表结构</h3><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/ecc3bcbfbc7a443271a7fa81e2a88dc0.png" alt="image-20231207094307430" style="zoom:80%;" /><ul><li><p>表结构设计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;工单表&quot;&quot;&quot;</span><br>    oid = models.CharField(verbose_name=<span class="hljs-string">&quot;订单号&quot;</span>, max_length=<span class="hljs-number">64</span>)<br>    title = models.CharField(verbose_name=<span class="hljs-string">&quot;名称&quot;</span>, max_length=<span class="hljs-number">32</span>)<br>    price = models.DecimalField(verbose_name=<span class="hljs-string">&#x27;价格&#x27;</span>, max_digits=<span class="hljs-number">10</span>, decimal_places=<span class="hljs-number">2</span>, default=<span class="hljs-number">0</span>)<br>    status_choices = (<br>        (<span class="hljs-number">1</span>,<span class="hljs-string">&quot;待支付&quot;</span>),<br>        (<span class="hljs-number">2</span>,<span class="hljs-string">&quot;已支付&quot;</span>),<br>    )<br>    status = models.SmallIntegerField(verbose_name=<span class="hljs-string">&quot;状态&quot;</span>, choices=status_choices, default=<span class="hljs-number">1</span>)<br>    user_admin = models.ForeignKey(verbose_name=<span class="hljs-string">&quot;负责人&quot;</span>, to=<span class="hljs-string">&quot;Admin&quot;</span>, on_delete=models.CASCADE)<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-2-Ajax显示对话框"><a href="#1-2-Ajax显示对话框" class="headerlink" title="1.2 Ajax显示对话框"></a>1.2 Ajax显示对话框</h3><ul><li><p>从<a href="https://www.bookstack.cn/books/bootstrap-v4.0-zh">Bootstrap</a>手册中导入<code> 弹出模态框</code>的模板</p></li><li><p>可以使用Ajax激活，当点击新建按钮时，弹出对话框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% block js %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">bindBtnAddEvent</span>();</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">bindBtnAddEvent</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#btnAdd&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 点击新建按钮，显示对话框,myModal是对话框id</span></span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;#myModal&#x27;</span>).<span class="hljs-title function_">modal</span>(<span class="hljs-string">&#x27;show&#x27;</span>)</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-3-新建订单"><a href="#1-3-新建订单" class="headerlink" title="1.3 新建订单"></a>1.3 新建订单</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@csrf_exempt</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">order_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;新建订单&quot;&quot;&quot;</span><br>    form = OrderModelForm(data=request.POST)<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        <span class="hljs-comment"># 订单号：由于在表单中，oid是没有自己写入的，需要动态生成</span><br>        form.instance.oid = datetime.now().strftime(<span class="hljs-string">&quot;%Y%m%d%H%M%S&quot;</span>) + <span class="hljs-built_in">str</span>(random.randint(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>))<br>        <span class="hljs-comment"># 获取当前登录的管理员id</span><br>        form.instance.user_admin_id = request.session[<span class="hljs-string">&quot;info&quot;</span>][<span class="hljs-string">&quot;id&quot;</span>]<br>        <span class="hljs-comment"># 保存到数据库</span><br>        form.save()<br><br>        <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&quot;data&quot;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]&#125;)<br>        <span class="hljs-comment"># 2. 如果出错，则后端返回错误信息</span><br>    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&quot;error&quot;</span>: form.errors&#125;)<br></code></pre></td></tr></table></figure><ul><li><p>HTML部分的关于弹出框的一些设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;<br>        <span class="hljs-keyword">if</span>(res.<span class="hljs-property">status</span>)&#123;<br>            <span class="hljs-comment">// alert弹窗</span><br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;添加成功！&quot;</span>);<br>            <span class="hljs-comment">// 使用js实现页面刷新</span><br>            <span class="hljs-comment">//location.reload();</span><br>            <span class="hljs-comment">// 如果保持弹出输入框不关闭，且清空输入框内容</span><br>            &#123;#$(<span class="hljs-string">&quot;#addForm&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">reset</span>();#&#125;<br>            <span class="hljs-comment">// 关闭弹出框</span><br>            $(<span class="hljs-string">&#x27;#myModal&#x27;</span>).<span class="hljs-title function_">modal</span>(<span class="hljs-string">&#x27;hide&#x27;</span>)<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            $.<span class="hljs-title function_">each</span>(res.<span class="hljs-property">error</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">name,data</span>)&#123;<br>                &#123;#<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name,data)#&#125;<br>                $(<span class="hljs-string">&quot;#id_&quot;</span> + name).<span class="hljs-title function_">next</span>().<span class="hljs-title function_">text</span>(data[<span class="hljs-number">0</span>]);<br>            &#125;)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-4-删除订单"><a href="#1-4-删除订单" class="headerlink" title="1.4 删除订单"></a>1.4 删除订单</h3><ul><li>点击删除，弹出警告框，确认是否删除</li></ul><p>​<img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/70eddb2a068d9a94b1b4393579204c79.png" alt="image-20231208163722575"></p><ul><li><p>点击确定，可以删除对应的订单号</p><ul><li><p>实现方式：在js中添加全局变量，并且在删除按钮上添加uid变量，这样点击不同订单的删除，就可以获取对应的id值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">uid</span>=<span class="hljs-string">&quot;&#123;&#123; obj.id &#125;&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-sm btn-delete&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;删除&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/a56d4458f54c32a123ee53aa4ad1ed18.png" alt="image-20231208164703525"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bindBtnConfirmDeleteEvent</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;#btnConfirmDelete&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;点击了&quot;</span>)<br>        <span class="hljs-comment">//点击确认删除按钮，将全局变量中设置的那个要删除ID发送到后台</span><br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;/order/delete/&quot;</span>,<br>            <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;GET&quot;</span>,<br>            <span class="hljs-attr">data</span>: &#123;<br>                <span class="hljs-attr">uid</span>:<span class="hljs-variable constant_">DELETE_ID</span>,<br>            &#125;,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>)&#123;<br>                <span class="hljs-keyword">if</span>(res.<span class="hljs-property">status</span>)&#123;<br>                    <span class="hljs-comment">// alert弹窗</span><br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;删除成功！&quot;</span>);<br>                    <span class="hljs-comment">// 使用js实现页面刷新</span><br>                    location.<span class="hljs-title function_">reload</span>();<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">//删除失败</span><br>                    <span class="hljs-title function_">alert</span>(res.<span class="hljs-property">error</span>)<br>                &#125;<br>            &#125;<br>        &#125;)<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>获取id后，在数据库中找到对应的数据并删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">order_delete</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;删除订单&quot;&quot;&quot;</span><br>    uid = request.GET.get(<span class="hljs-string">&#x27;uid&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(uid)<br>    exists = models.Order.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=uid).exists()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> exists:<br>        <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&quot;error&quot;</span>:<span class="hljs-string">&quot;删除失败，数据不存在&quot;</span>&#125;)<br>    models.Order.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=uid).delete()<br>    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-literal">True</span>&#125;)<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="1-5-编辑订单"><a href="#1-5-编辑订单" class="headerlink" title="1.5 编辑订单"></a>1.5 编辑订单</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># row_dict返回的是字典,因为在filter后面加上values是返回字典类型</span><br>  row_dict = models.Order.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=uid).values(<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;price&quot;</span>,<span class="hljs-string">&quot;status&quot;</span>).first()<br></code></pre></td></tr></table></figure><ul><li><p>根据id获取订单详情</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">order_detail</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;根据id获取订单详细&quot;&quot;&quot;</span><br>    uid = request.GET.get(<span class="hljs-string">&#x27;uid&#x27;</span>)<br>    <span class="hljs-comment"># row_dict返回的是字典</span><br>    row_dict = models.Order.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=uid).values(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;status&quot;</span>).first()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> row_dict:<br>        <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;数据不存在&quot;</span>&#125;)<br>    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&quot;data&quot;</span>: row_dict&#125;)<br></code></pre></td></tr></table></figure></li></ul><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/0bf76072f1a3e2a403b6adcd35657ce7.png" alt="image-20231211104334037" style="zoom:80%;" />]]></content>
    
    
    <categories>
      
      <category>Django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>08-项目开发-6_学习day08-Ajax请求</title>
    <link href="/2023/12/05/Django/08-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-6-Ajax%E8%AF%B7%E6%B1%82/"/>
    <url>/2023/12/05/Django/08-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-6-Ajax%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="Ajax请求"><a href="#Ajax请求" class="headerlink" title="Ajax请求"></a>Ajax请求</h1><p>目前浏览器向网站发送请求时：为URL和表单的形式提交。</p><ul><li>GET</li><li>POST</li></ul><p>特点是：提交后页面刷新。</p><p>除此之外，可以基于Ajax向后台发送请求（异步请求）</p><ul><li><p>依赖jQuery</p></li><li><p>编写ajax代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;发送的地址&quot;</span>,<br>    <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;get&quot;</span>,<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">n1</span>:<span class="hljs-number">123</span>,<br>        <span class="hljs-attr">n2</span>:<span class="hljs-number">456</span><br>    &#125;,<br>    <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h2 id="1、使用Ajax提交post请求"><a href="#1、使用Ajax提交post请求" class="headerlink" title="1、使用Ajax提交post请求"></a>1、使用Ajax提交post请求</h2><p>需要导入<code>csrf_exempt</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.views.decorators.csrf <span class="hljs-keyword">import</span> csrf_exempt<br><br><span class="hljs-comment"># 在URL函数上方加上装饰器</span><br><span class="hljs-meta">@csrf_exempt</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xxx</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h2 id="2、Ajax请求返回值一般是json格式"><a href="#2、Ajax请求返回值一般是json格式" class="headerlink" title="2、Ajax请求返回值一般是json格式"></a>2、Ajax请求返回值一般是json格式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.views.decorators.csrf <span class="hljs-keyword">import</span> csrf_exempt<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse<br><span class="hljs-keyword">from</span> json<br><br><span class="hljs-comment"># 在URL函数上方加上装饰器</span><br><span class="hljs-meta">@csrf_exempt</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xxx</span>(<span class="hljs-params">request</span>):<br>    data_dic = &#123;<span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-literal">True</span>, <span class="hljs-string">&quot;data&quot;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]&#125;<br>    <span class="hljs-keyword">return</span> HttpResponse(json.dumps(data_dic))<span class="hljs-comment"># json.dumps(data_dic)转成json</span><br></code></pre></td></tr></table></figure><h2 id="3、案例"><a href="#3、案例" class="headerlink" title="3、案例"></a>3、案例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ajax案例</span><br><span class="hljs-keyword">from</span> django.views.decorators.csrf <span class="hljs-keyword">import</span> csrf_exempt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task_ajax_list</span>(<span class="hljs-params">request</span>):<br>    form = TaskModelForm()<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;task_ajax_list.html&quot;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>: form&#125;)<br><br><br><span class="hljs-comment"># 用Ajax，post请求时。在URL函数上方加上装饰器</span><br><span class="hljs-meta">@csrf_exempt</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task_ajax_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 1.用户发送过来的数据做校验（ModelForm进行校验）</span><br>    form = TaskModelForm(data=request.POST)<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        form.save()<br>        data_dict = &#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&quot;data&quot;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]&#125;<br>        <span class="hljs-keyword">return</span> HttpResponse(json.dumps(data_dict))<br>    <span class="hljs-comment"># 2. 如果出错，则后端返回错误信息</span><br>    data_dict = &#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&quot;error&quot;</span>: form.errors&#125;<br>    <span class="hljs-keyword">return</span> HttpResponse(json.dumps(data_dict, ensure_ascii=<span class="hljs-literal">False</span>))<br></code></pre></td></tr></table></figure><ul><li><p>通过ajax提交form表单时，.serialize()方式会失效</p><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/dcf408257b06db6471d3b46a3abd8f32.png" alt="image-20231206201433969"></p><ul><li><p>解决方法：创建Form对象，并将<code>processData</code>与<code>contentType</code>两个参数设置为false</p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/b743616ceb3f69d7e2b40fd32f993db8.png" alt="image-20231206201646979" style="zoom:80%;" /></li><li><p>参考博客：<a href="https://blog.csdn.net/qq_34422681/article/details/127712777">https://blog.csdn.net/qq_34422681/article/details/127712777</a></p></li><li><p><a href="https://blog.csdn.net/qq_42774234/article/details/134443472">https://blog.csdn.net/qq_42774234/article/details/134443472</a></p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>00.ACM模式输入模板</title>
    <link href="/2023/12/04/%E7%AE%97%E6%B3%95/00-ACM%E6%A8%A1%E5%BC%8F%E8%BE%93%E5%85%A5/"/>
    <url>/2023/12/04/%E7%AE%97%E6%B3%95/00-ACM%E6%A8%A1%E5%BC%8F%E8%BE%93%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="1、一行输入多个整数"><a href="#1、一行输入多个整数" class="headerlink" title="1、一行输入多个整数"></a>1、一行输入多个整数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split(<span class="hljs-string">&quot; &quot;</span>)))<br></code></pre></td></tr></table></figure><h2 id="2、第一行为需要输入的行数m，接下来每一行包括多个整数"><a href="#2、第一行为需要输入的行数m，接下来每一行包括多个整数" class="headerlink" title="2、第一行为需要输入的行数m，接下来每一行包括多个整数"></a>2、第一行为需要输入的行数m，接下来每一行包括多个整数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    a = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split(<span class="hljs-string">&quot; &quot;</span>)))<br></code></pre></td></tr></table></figure><h2 id="3、输入为字符串-每个字符串以空格隔开"><a href="#3、输入为字符串-每个字符串以空格隔开" class="headerlink" title="3、输入为字符串,每个字符串以空格隔开"></a>3、输入为字符串,每个字符串以空格隔开</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">try</span>:<br>        n = <span class="hljs-built_in">input</span>().split()<br>        a = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> n:<br>            a.append(i)<br>        <span class="hljs-built_in">print</span>(a)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="4、链表"><a href="#4、链表" class="headerlink" title="4、链表"></a>4、链表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">nums_to_linklist</span>(<span class="hljs-params">nums</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> nums:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    root = ListNode(nums[<span class="hljs-number">0</span>])<br>    node = root<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums[<span class="hljs-number">1</span>:]:<br>        node.<span class="hljs-built_in">next</span> = ListNode(i)<br>        node = node.<span class="hljs-built_in">next</span><br>    <span class="hljs-keyword">return</span> root<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    nums = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>    root = nums_to_linklist(nums)<br>    <span class="hljs-keyword">while</span> root:<br>        <span class="hljs-built_in">print</span>(root.val, end=<span class="hljs-string">&quot; &quot;</span>)<br>        root = root.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><h2 id="5、二叉树"><a href="#5、二叉树" class="headerlink" title="5、二叉树"></a>5、二叉树</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> collections<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiTree</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.left = left<br>        self.right = right<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">nums_to_tree</span>(<span class="hljs-params">nums</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> nums:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    queue = collections.deque()<br>    root = BiTree(nums[<span class="hljs-number">0</span>])<br>    queue.append(root)<br>    i = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(nums):<br>        node = queue.popleft()<br>        <span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(nums) <span class="hljs-keyword">and</span> nums[i] != -<span class="hljs-number">1</span>:<br>            node.left = BiTree(nums[i])<br>            queue.append(node.left)<br>        i += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(nums) <span class="hljs-keyword">and</span> nums[i] != -<span class="hljs-number">1</span>:<br>            node.right = BiTree(nums[i])<br>            queue.append(node.right)<br>        i += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> root<br><br><br><span class="hljs-comment"># 中序遍历</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">in_order</span>(<span class="hljs-params">root</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    in_order(root.left)<br>    <span class="hljs-built_in">print</span>(root.val, end=<span class="hljs-string">&quot; &quot;</span>)<br>    in_order(root.right)<br><br><br><span class="hljs-comment"># 输入 1 null 1 null 1 2</span><br><span class="hljs-comment">#    1</span><br><span class="hljs-comment">#  /  \</span><br><span class="hljs-comment"># null  1</span><br><span class="hljs-comment">#      /  \</span><br><span class="hljs-comment">#   null  1</span><br><span class="hljs-comment">#        /</span><br><span class="hljs-comment">#       2</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    nums = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;null&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;null&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>]<br>    nums = [<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">if</span> i != <span class="hljs-string">&quot;null&quot;</span> <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums]<br>    root = nums_to_tree(nums)<br>    in_order(root)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>力扣刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01.链表</title>
    <link href="/2023/12/04/%E5%89%91%E6%8C%87offer/01-%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/12/04/%E5%89%91%E6%8C%87offer/01-%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="6-从尾到头打印链表（LCR123）"><a href="#6-从尾到头打印链表（LCR123）" class="headerlink" title="6. 从尾到头打印链表（LCR123）"></a>6. 从尾到头打印链表（LCR123）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法一 : 时间复杂度O(n)、空间复杂度O(n)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseBookList</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        ans = []<br>        cur = head<br>        <span class="hljs-keyword">while</span> cur:<br>            ans.append(cur.val)<br>            cur = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> ans[::-<span class="hljs-number">1</span>]<br>    <br><span class="hljs-comment"># 方法二：递归方法</span><br><span class="hljs-string">&quot;&quot;&quot;利用递归，先递推至链表末端；回溯时，依次将节点值加入列表，即可实现链表值的倒序输出。</span><br><span class="hljs-string"></span><br><span class="hljs-string">终止条件： 当 head == None 时，代表越过了链表尾节点，则返回空列表；</span><br><span class="hljs-string">递推工作： 访问下一节点 head.next ；</span><br><span class="hljs-string">回溯阶段： 返回 当前 list + 当前节点值 [head.val] ；</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseBookList</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">return</span> self.reverseBookList(head.<span class="hljs-built_in">next</span>) + [head.val] <span class="hljs-keyword">if</span> head <span class="hljs-keyword">else</span> []<br></code></pre></td></tr></table></figure><h2 id="18-1-在-O-1-时间内删除链表节点"><a href="#18-1-在-O-1-时间内删除链表节点" class="headerlink" title="18.1 在 O(1) 时间内删除链表节点"></a>18.1 在 O(1) 时间内删除链表节点</h2><h2 id="18-2-删除链表中重复的结点"><a href="#18-2-删除链表中重复的结点" class="headerlink" title="18.2 删除链表中重复的结点"></a>18.2 删除链表中重复的结点</h2><h2 id="22-链表中倒数第-K-个结点"><a href="#22-链表中倒数第-K-个结点" class="headerlink" title="22. 链表中倒数第 K 个结点"></a>22. 链表中倒数第 K 个结点</h2><h2 id="23-链表中环的入口结点"><a href="#23-链表中环的入口结点" class="headerlink" title="23. 链表中环的入口结点"></a>23. 链表中环的入口结点</h2><h2 id="24-反转链表（LCR24）"><a href="#24-反转链表（LCR24）" class="headerlink" title="24. 反转链表（LCR24）"></a>24. 反转链表（LCR24）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法1：时间复杂度O(N)，空间复杂度O(1)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseList</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:<br>        p = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">while</span> head:<br>            temp = head.<span class="hljs-built_in">next</span><br>            head.<span class="hljs-built_in">next</span> = p<br>            p = head<br>            head = temp<br>        <span class="hljs-keyword">return</span> p<br><span class="hljs-comment"># 方法二：递归 时间复杂度O(N), 空间复杂度O(N)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseList</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">pre,cur</span>):<br>            <span class="hljs-keyword">if</span> cur <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> pre<br>            temp = cur.<span class="hljs-built_in">next</span><br>            cur.<span class="hljs-built_in">next</span> = pre<br>            <span class="hljs-keyword">return</span> reverse(cur,temp)<br>        <span class="hljs-keyword">return</span> reverse(<span class="hljs-literal">None</span>, head)<br></code></pre></td></tr></table></figure><h2 id="25-合并两个排序的链表"><a href="#25-合并两个排序的链表" class="headerlink" title="25. 合并两个排序的链表"></a>25. 合并两个排序的链表</h2><h2 id="35-复杂链表的复制"><a href="#35-复杂链表的复制" class="headerlink" title="35. 复杂链表的复制"></a>35. 复杂链表的复制</h2><h2 id="52-两个链表的第一个公共结点"><a href="#52-两个链表的第一个公共结点" class="headerlink" title="52. 两个链表的第一个公共结点"></a>52. 两个链表的第一个公共结点</h2>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03-第三节-一些基础的数据结构</title>
    <link href="/2023/12/04/%E9%A9%AC%E5%A3%AB%E5%85%B5%E7%AE%97%E6%B3%95%E4%BD%93%E7%B3%BB%E7%8F%AD/03-%E7%AC%AC%E4%B8%89%E8%8A%82-%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2023/12/04/%E9%A9%AC%E5%A3%AB%E5%85%B5%E7%AE%97%E6%B3%95%E4%BD%93%E7%B3%BB%E7%8F%AD/03-%E7%AC%AC%E4%B8%89%E8%8A%82-%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="1、链表"><a href="#1、链表" class="headerlink" title="1、链表"></a>1、链表</h2><ul><li>题型<ul><li>单链表或双链表的翻转</li><li>删除某些给定的值</li></ul></li></ul><h2 id="2、栈和队列"><a href="#2、栈和队列" class="headerlink" title="2、栈和队列"></a>2、栈和队列</h2><ul><li><p>题型</p><ul><li>双向链表或数组来实现栈和队列</li></ul></li><li><p>常见面试题</p><ul><li><p>实现一个特殊的栈，在基本功能的基础上，再实现返回栈中自小元素的功能</p><ul><li>pop、push、getMin操作的时间复杂度都是O(1)</li><li>设计的栈类型可以使用现成的栈结构</li></ul></li><li><p>如何用栈实现队列（两个栈：push栈和pop栈）</p><ul><li>push栈要一次性倒入到pop栈中</li><li>pop栈中如果有元素，则push栈中无法加入元素</li></ul></li><li><p>如何用队列实现栈结构（两个队列来回倒）</p></li></ul></li></ul><h2 id="3、递归"><a href="#3、递归" class="headerlink" title="3、递归"></a>3、递归</h2><p>任何递归行为一定可以改为迭代行为。</p><ul><li>递归何时结束</li><li>把调用的过程画出结构图是必须的，有利于分析递归</li></ul><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/77f69a82bffb9a3a57d7b08c3a24c34c.png" alt="image-20231204153341042"></p><ul><li><strong>Master公式可以估算递归的时间复杂度</strong> ，条件：递归的子问题复杂度一致。上面公式中log(b,a) 表示log以b为底</li></ul><h2 id="4、哈希表"><a href="#4、哈希表" class="headerlink" title="4、哈希表"></a>4、哈希表</h2><p>哈希表增、删、查，时间复杂度为常数类型</p>]]></content>
    
    
    <categories>
      
      <category>马士兵算法体系班</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>07-项目开发-5_学习day07-用户认证、图片验证</title>
    <link href="/2023/12/03/Django/07-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-5-%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E3%80%81%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81/"/>
    <url>/2023/12/03/Django/07-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-5-%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E3%80%81%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h1 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h1><h2 id="1、用户登录简单实现"><a href="#1、用户登录简单实现" class="headerlink" title="1、用户登录简单实现"></a>1、用户登录简单实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;用户登录&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        form = LoginForm()<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;login.html&#x27;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>: form&#125;)<br>    form = LoginForm(data=request.POST)<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        <span class="hljs-comment"># 1. form.cleaned_data是提交的用户名密码</span><br>        <span class="hljs-comment"># print(form.cleaned_data)</span><br>        <span class="hljs-comment"># 2. 去数据库校验</span><br>        admin_obj = models.Admin.objects.<span class="hljs-built_in">filter</span>(**form.cleaned_data).first()<br><br>        <span class="hljs-keyword">if</span> admin_obj <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-comment"># 主动显示错误信息</span><br>            form.add_error(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;用户名或密码错误&quot;</span>)<br>            <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>: form&#125;)<br>        <span class="hljs-comment"># 用户名密码正确后,写入session</span><br>        request.session[<span class="hljs-string">&quot;info&quot;</span>] = &#123;<span class="hljs-string">&quot;id&quot;</span>: admin_obj.<span class="hljs-built_in">id</span>, <span class="hljs-string">&quot;username&quot;</span>: admin_obj.username&#125;<br><br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/admin/list/&quot;</span>)<br>    <span class="hljs-comment"># 如果有错误信息</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>: form&#125;)<br></code></pre></td></tr></table></figure><h2 id="2、用户登录验证"><a href="#2、用户登录验证" class="headerlink" title="2、用户登录验证"></a>2、用户登录验证</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin_list</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;管理员列表&quot;&quot;&quot;</span><br><br>    <span class="hljs-comment"># 检查用户是否已登录，若已登录则继续，未登录则跳转回登录页面</span><br>    <span class="hljs-comment"># 用户发来请求，获取cookie随机字符串，拿随机字符串对比session中有没有</span><br>    info = request.session.get(<span class="hljs-string">&quot;info&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> info:<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/login/&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>以上判断可以加入中间件来使用</li></ul><h3 id="2-1-中间件"><a href="#2-1-中间件" class="headerlink" title="2.1 中间件"></a>2.1 中间件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;中间件编写&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> django.utils.deprecation <span class="hljs-keyword">import</span> MiddlewareMixin<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">M1</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self,request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;进入中间件&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_response</span>(<span class="hljs-params">self,request,response</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;退出中间件&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li><p>还需要在settings.py中注册中间件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">MIDDLEWARE = [<br>    <span class="hljs-string">&quot;django.middleware.security.SecurityMiddleware&quot;</span>,<br>    <span class="hljs-string">&quot;django.contrib.sessions.middleware.SessionMiddleware&quot;</span>,<br>    <span class="hljs-string">&quot;django.middleware.common.CommonMiddleware&quot;</span>,<br>    <span class="hljs-string">&quot;django.middleware.csrf.CsrfViewMiddleware&quot;</span>,<br>    <span class="hljs-string">&quot;django.contrib.auth.middleware.AuthenticationMiddleware&quot;</span>,<br>    <span class="hljs-string">&quot;django.contrib.messages.middleware.MessageMiddleware&quot;</span>,<br>    <span class="hljs-string">&quot;django.middleware.clickjacking.XFrameOptionsMiddleware&quot;</span>,<br>    <span class="hljs-string">&quot;app01.middleware.auth.M1&quot;</span>,<span class="hljs-comment"># 加入创建的中间件</span><br>]<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;中间件编写&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> django.utils.deprecation <span class="hljs-keyword">import</span> MiddlewareMixin<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, redirect<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">M1</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-comment"># 0. 排出那些而不需要登录就能访问的页面</span><br>        <span class="hljs-keyword">if</span> request.path_info == <span class="hljs-string">&quot;/login/&quot;</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 1. 读取当前访问的用户的session信息，如果能读到，说明已登录过，就可以继续后续操作</span><br>        info_dict = request.session.get(<span class="hljs-string">&quot;info&quot;</span>)<br>        <span class="hljs-keyword">if</span> info_dict:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 2. 如果没有登录，则重新返回登录页面</span><br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/login/&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="3、用户注销"><a href="#3、用户注销" class="headerlink" title="3、用户注销"></a>3、用户注销</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">logout</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;注销&quot;&quot;&quot;</span><br>    request.session.clear()<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/login/&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li><p>用户登录后需要显示登录用户的名字</p><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/d9955a11d1008ff482671ec6bb671c11.png" alt="image-20231205151805919"></p></li></ul><h2 id="4、图片验证码"><a href="#4、图片验证码" class="headerlink" title="4、图片验证码"></a>4、图片验证码</h2><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/4ec6d9468ef2a9fec7bf11293d4a2498.png" alt="image-20231205155226655" style="zoom: 67%;" /><h3 id="4-1-生成验证码图片"><a href="#4-1-生成验证码图片" class="headerlink" title="4.1 生成验证码图片"></a>4.1 生成验证码图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip instill pillow<span class="hljs-comment"># 使用第三方插件</span><br></code></pre></td></tr></table></figure><ul><li>参考：<a href="https://www.cnblogs.com/wupeiqi/articles/5812291.html">https://www.cnblogs.com/wupeiqi/articles/5812291.html</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;生成随机验证码&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> ImageFilter, Image, ImageDraw, ImageFont<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_code</span>(<span class="hljs-params">width=<span class="hljs-number">120</span>, height=<span class="hljs-number">30</span>, char_length=<span class="hljs-number">5</span>, font_file=<span class="hljs-string">&#x27;Monaco.ttf&#x27;</span>, font_size=<span class="hljs-number">28</span></span>):<br>    code = []<br>    img = Image.new(mode=<span class="hljs-string">&#x27;RGB&#x27;</span>, size=(width, height), color=(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))<br>    draw = ImageDraw.Draw(img, mode=<span class="hljs-string">&#x27;RGB&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rndChar</span>():<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        生成随机字母</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">chr</span>(random.randint(<span class="hljs-number">65</span>, <span class="hljs-number">90</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rndColor</span>():<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        生成随机颜色</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> (random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>), random.randint(<span class="hljs-number">10</span>, <span class="hljs-number">255</span>), random.randint(<span class="hljs-number">64</span>, <span class="hljs-number">255</span>))<br><br>    <span class="hljs-comment"># 写文字</span><br>    font = ImageFont.truetype(font_file, font_size)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(char_length):<br>        char = rndChar()<br>        code.append(char)<br>        h = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>)<br>        draw.text([i * width / char_length, h], char, font=font, fill=rndColor())<br><br>    <span class="hljs-comment"># 写干扰点</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>        draw.point([random.randint(<span class="hljs-number">0</span>, width), random.randint(<span class="hljs-number">0</span>, height)], fill=rndColor())<br><br>    <span class="hljs-comment"># 写干扰圆圈</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>        draw.point([random.randint(<span class="hljs-number">0</span>, width), random.randint(<span class="hljs-number">0</span>, height)], fill=rndColor())<br>        x = random.randint(<span class="hljs-number">0</span>, width)<br>        y = random.randint(<span class="hljs-number">0</span>, height)<br>        draw.arc((x, y, x + <span class="hljs-number">4</span>, y + <span class="hljs-number">4</span>), <span class="hljs-number">0</span>, <span class="hljs-number">90</span>, fill=rndColor())<br><br>    <span class="hljs-comment"># 画干扰线</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        x1 = random.randint(<span class="hljs-number">0</span>, width)<br>        y1 = random.randint(<span class="hljs-number">0</span>, height)<br>        x2 = random.randint(<span class="hljs-number">0</span>, width)<br>        y2 = random.randint(<span class="hljs-number">0</span>, height)<br><br>        draw.line((x1, y1, x2, y2), fill=rndColor())<br><br>    img = img.<span class="hljs-built_in">filter</span>(ImageFilter.EDGE_ENHANCE_MORE)<br>    <span class="hljs-keyword">return</span> img, <span class="hljs-string">&#x27;&#x27;</span>.join(code)<br><br></code></pre></td></tr></table></figure><h3 id="4-2-在Django中使用生成随机验证码图片"><a href="#4-2-在Django中使用生成随机验证码图片" class="headerlink" title="4.2 在Django中使用生成随机验证码图片"></a>4.2 在Django中使用生成随机验证码图片</h3><ul><li><p>创建url，创建函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO  <span class="hljs-comment">#将生成的图片对象保存到内存中</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">image_code</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;生成图片验证码&quot;&quot;&quot;</span><br>    img, code = check_code()<br>    stream = BytesIO()<br>    img.save(stream, <span class="hljs-string">&#x27;png&#x27;</span>)<br>    <span class="hljs-keyword">return</span> HttpResponse(stream.getvalue())<br></code></pre></td></tr></table></figure></li><li><p>在登录页面的html中，将图片验证码出的src地址改为上一步创建的url</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/image/code/&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;yzmimg&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>中间件函数中，排除那些而不需要登录就能访问的页面</p></li></ul><p>​<img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/423aabf0ce31c74c4c5769405a044d1a.png" alt="image-20231205162507583"></p><h3 id="4-3-验证输入的验证码是否匹配"><a href="#4-3-验证输入的验证码是否匹配" class="headerlink" title="4.3 验证输入的验证码是否匹配"></a>4.3 验证输入的验证码是否匹配</h3><ul><li><p>使用Form来创建前端验证码的输入框</p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/fa6b6af2d03393beb292266f70ce6a21.png" alt="image-20231205165841082" style="zoom:80%;" /></li><li><p>在登录的函数中做验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 验证码校验</span><br>user_input_code = form.cleaned_data.pop(<span class="hljs-string">&#x27;code&#x27;</span>) <span class="hljs-comment"># 前端获取输入的验证码</span><br>real_code = request.session.get(<span class="hljs-string">&#x27;image_code&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)    <span class="hljs-comment"># 真正生成的验证码</span><br><span class="hljs-keyword">if</span> real_code.lower() != user_input_code.lower():<span class="hljs-comment"># 进行比较判断</span><br>    form.add_error(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;验证码错误&quot;</span>)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>: form&#125;)<br></code></pre></td></tr></table></figure></li><li><p>效果</p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/99e224787a9efe1eb2c4b7b688eae19c.png" alt="image-20231205170032801" style="zoom:80%;" /></li></ul>]]></content>
    
    
    <categories>
      
      <category>Django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-位运算</title>
    <link href="/2023/12/01/%E7%AE%97%E6%B3%95/02-%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <url>/2023/12/01/%E7%AE%97%E6%B3%95/02-%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h2 id="python中的位运算"><a href="#python中的位运算" class="headerlink" title="python中的位运算"></a>python中的位运算</h2><ul><li>左移 &lt;&lt;：位运算左移一位 &lt;&lt;1 相当于乘以二</li><li>右移 &gt;&gt;：位运算左移一位 &gt;&gt;1 相当于除以二</li><li>按位或|：同时为0才为0，其余为1</li><li>按位与&amp;：同时为1才为1，其余为0</li><li>异或 ^ ：相同为0，不同为1</li></ul><h3 id="一、-模板代码"><a href="#一、-模板代码" class="headerlink" title="一、 模板代码"></a>一、 模板代码</h3><h4 id="1-仅剩二进制最低位1，其余置0：x-x"><a href="#1-仅剩二进制最低位1，其余置0：x-x" class="headerlink" title="1. 仅剩二进制最低位1，其余置0：x&amp;-x"></a>1. 仅剩二进制最低位1，其余置0：x&amp;-x</h4><ul><li>考虑数 x &#x3D; 100010</li><li>x取反 ~x &#x3D; 011101</li><li>~x+1即-x &#x3D; 011110</li><li>发现x&amp;-x正好只剩下最低位的1</li></ul><h4 id="2-去掉最低位的1，保留其余位：x-x-1"><a href="#2-去掉最低位的1，保留其余位：x-x-1" class="headerlink" title="2. 去掉最低位的1，保留其余位：x &amp;&#x3D; (x-1)"></a>2. 去掉最低位的1，保留其余位：x &amp;&#x3D; (x-1)</h4><ul><li>考虑数 x &#x3D; 100010</li><li>则x-1 : x &#x3D; 100001</li><li>x &amp;(x-1) &#x3D; 100000</li></ul><h4 id="3-把最低位的0置1其余保留-填上最低位的0-：x-x-1"><a href="#3-把最低位的0置1其余保留-填上最低位的0-：x-x-1" class="headerlink" title="3. 把最低位的0置1其余保留(填上最低位的0)：x |&#x3D; x+1"></a>3. 把最低位的0置1其余保留(填上最低位的0)：x |&#x3D; x+1</h4><ul><li>考虑x &#x3D; 100101</li><li>x+1 &#x3D; 100110</li><li>x|(x+1) &#x3D; 100111</li></ul><h4 id="4-判断一个数x是不是2的次幂-x的因子只含2或1-x-0-and-x-x-1-0"><a href="#4-判断一个数x是不是2的次幂-x的因子只含2或1-x-0-and-x-x-1-0" class="headerlink" title="4. 判断一个数x是不是2的次幂(x的因子只含2或1) x&gt;0 and x&amp;(x-1) &#x3D;&#x3D; 0"></a>4. 判断一个数x是不是2的次幂(x的因子只含2或1) x&gt;0 and x&amp;(x-1) &#x3D;&#x3D; 0</h4><ul><li>去掉lowbit就是0，那么说明这个数只含一个1。</li></ul><h4 id="5-判断一个数x是否含有相邻的1，x-1-x-0"><a href="#5-判断一个数x是否含有相邻的1，x-1-x-0" class="headerlink" title="5. 判断一个数x是否含有相邻的1，x&gt;&gt;1&amp;x&gt;0"></a>5. 判断一个数x是否含有相邻的1，x&gt;&gt;1&amp;x&gt;0</h4><ul><li>把x右移一位，和自己与操作，如果还有1则说明有相邻的1。</li></ul><h4 id="6-判断一个数x是否含有相邻的0（不考虑前导0），x-x-1-return-x-x-1-0"><a href="#6-判断一个数x是否含有相邻的0（不考虑前导0），x-x-1-return-x-x-1-0" class="headerlink" title="6. 判断一个数x是否含有相邻的0（不考虑前导0），x|&#x3D;x&gt;&gt;1;return x&amp;(x+1)&gt;0"></a>6. 判断一个数x是否含有相邻的0（不考虑前导0），x|&#x3D;x&gt;&gt;1;return x&amp;(x+1)&gt;0</h4><ul><li>把x右移一位，和自己与操作，如果还有1则说明有相邻的1。</li></ul><h4 id="7-判断一个数x的二进制里是不是全是1（不考虑前导0），x-x-1-0"><a href="#7-判断一个数x的二进制里是不是全是1（不考虑前导0），x-x-1-0" class="headerlink" title="7. 判断一个数x的二进制里是不是全是1（不考虑前导0），x&amp;(x+1)&#x3D;&#x3D;0"></a>7. 判断一个数x的二进制里是不是全是1（不考虑前导0），x&amp;(x+1)&#x3D;&#x3D;0</h4><ul><li>x+&#x3D;1;return x&amp;(x-1)&#x3D;&#x3D;0即可。</li><li>全1的数加上1一定是个2的次幂。</li></ul><h2 id="二、题目"><a href="#二、题目" class="headerlink" title="二、题目"></a>二、题目</h2><h3 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136. 只出现一次的数字"></a><a href="https://leetcode.cn/problems/single-number/">136. 只出现一次的数字</a></h3><p>思路：</p><ul><li>使用异或运算，设一个变量a &#x3D; 0，遍历异或数组的每个元素</li><li>除了某个元素只出现一次以外，其余每个元素均出现两次。偶数次异或皆为0，最后只剩出现一次的数，就是答案</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">singleNumber</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ans = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums:<br>            ans ^= i<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h3 id="137-只出现一次的数字-II"><a href="#137-只出现一次的数字-II" class="headerlink" title="137. 只出现一次的数字 II"></a><a href="https://leetcode.cn/problems/single-number-ii/">137. 只出现一次的数字 II</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">singleNumber</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        t = [<span class="hljs-number">0</span>]*<span class="hljs-number">32</span><br>        <span class="hljs-comment"># t[0]表示 0位置的1出现了几次</span><br>        <span class="hljs-comment"># t[1]表示 1位置的1出现了几次</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums:<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>                <span class="hljs-keyword">if</span> (i &gt;&gt; j) &amp; <span class="hljs-number">1</span>:<span class="hljs-comment"># 如果i的第j位为1，则&amp;1 结果为1，累加t的该位置1的个数</span><br>                    t[j] += <span class="hljs-number">1</span><br>        ans = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>            <span class="hljs-keyword">if</span> t[i]%<span class="hljs-number">3</span>:<span class="hljs-comment"># 如果t[i] % m != 0，则表示在该位置上为1的的数量不是m的整数倍，还包含k次出现的数</span><br>                ans |= (<span class="hljs-number">1</span>&lt;&lt;i)<br>        <span class="hljs-comment"># python 中当输出是负数时，会把32位有符号整型认为成无符号整型，就会报错，要对结果做如下修改：</span><br>        <span class="hljs-keyword">if</span> ans&gt; <span class="hljs-number">2</span>**<span class="hljs-number">31</span>-<span class="hljs-number">1</span>:<br>            ans -= <span class="hljs-number">2</span>**<span class="hljs-number">32</span> <br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h3 id="260-只出现一次的数字-III"><a href="#260-只出现一次的数字-III" class="headerlink" title="260. 只出现一次的数字 III"></a><a href="https://leetcode.cn/problems/single-number-iii/">260. 只出现一次的数字 III</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">singleNumber</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        xor_result = <span class="hljs-number">0</span><span class="hljs-comment"># 设置一个变量来遍历异或</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums:<br>            xor_result ^= i<br>        <span class="hljs-comment"># 3.因为两个奇数次数a和b是两种数，所以遍历完以后xor_result = a ^ b,且xor_result != 0</span><br>        <span class="hljs-comment">#   因为a和b是不同的数 所以异或结果一定存在某一位上为1，则a和b在该位置一定是分别为1和0.</span><br>        <span class="hljs-comment"># 4.然后找到xor_result最右边的1</span><br>        right_one = xor_result &amp; (-xor_result)<br><br>     <span class="hljs-comment"># 现在用两个变量再去遍历异或，这就分为了两组，一组是该位置为1，另一组是为0，遍历完就能提取出这两个数。</span><br>        num1, num2 = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums:<br>            <span class="hljs-keyword">if</span> (i &amp; right_one):<br>                num1 ^= i<br>            <span class="hljs-keyword">else</span>:<br>                num2 ^= i<br>        <span class="hljs-keyword">return</span> [num1,num2]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>力扣刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>06-项目开发-4_学习day06</title>
    <link href="/2023/11/30/Django/06-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-4/"/>
    <url>/2023/11/30/Django/06-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-4/</url>
    
    <content type="html"><![CDATA[<h1 id="0-上一节的补充"><a href="#0-上一节的补充" class="headerlink" title="0- 上一节的补充"></a>0- 上一节的补充</h1><h2 id="1、时间插件"><a href="#1、时间插件" class="headerlink" title="1、时间插件"></a>1、时间插件</h2><p>引入CSS、js样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% block css %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/bootstrap-datepicker/css/bootstrap-datepicker.min.css&#x27; %&#125;&quot;</span>&gt;</span><br>&#123;% endblock %&#125;<br><br><br>&#123;% block js %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/bootstrap-datepicker/js/bootstrap-datepicker.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/bootstrap-datepicker/locales/bootstrap-datepicker.zh-CN.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          $(<span class="hljs-string">&#x27;#id_creat_time&#x27;</span>).<span class="hljs-title function_">datepicker</span>(&#123;</span><br><span class="language-javascript">              <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>,</span><br><span class="language-javascript">              <span class="hljs-attr">language</span>: <span class="hljs-string">&#x27;zh-CN&#x27;</span>,</span><br><span class="language-javascript">              <span class="hljs-attr">autoclose</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">          &#125;);</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/1e25acc80986b3d7de1ecf2258e014c6.png" alt="image-20231130103423168"></p><h2 id="2、ModelForm与bootstrap"><a href="#2、ModelForm与bootstrap" class="headerlink" title="2、ModelForm与bootstrap"></a>2、ModelForm与bootstrap</h2><ul><li><p>重新定义的init方法，批量设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserModelForm</span>(forms.ModelForm):<br>    <span class="hljs-comment"># 添加验证规则</span><br>    name = forms.CharField(min_length=<span class="hljs-number">2</span>, label=<span class="hljs-string">&quot;姓名&quot;</span>)<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.UserInfo<br>        fields = [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;account&quot;</span>, <span class="hljs-string">&quot;creat_time&quot;</span>,<br>                  <span class="hljs-string">&quot;gender&quot;</span>, <span class="hljs-string">&quot;depart&quot;</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br><br>        <span class="hljs-comment"># 循环找到所有的字段，给每个字段添加&quot;class&quot;:&quot;form-control&quot;样式</span><br>        <span class="hljs-keyword">for</span> name, field <span class="hljs-keyword">in</span> self.fields.items():<br>            field.widget.attrs = &#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;form-control&quot;</span>, <span class="hljs-string">&quot;placeholder&quot;</span>: field.label&#125;<br></code></pre></td></tr></table></figure></li></ul><blockquote><p> 优化版本–自定义一个bootstrap 类，以后用到的时候，直接继承他</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BootStrapModelForm</span>(forms.ModelForm):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br><br>        <span class="hljs-comment"># 循环找到所有的字段，给每个字段添加&quot;class&quot;:&quot;form-control&quot;样式</span><br>        <span class="hljs-keyword">for</span> name, field <span class="hljs-keyword">in</span> self.fields.items():<br>            <span class="hljs-comment"># 字段中有属性，保留原来的属性，没有属性，才增加</span><br>            <span class="hljs-keyword">if</span> field.widget.attrs:<br>                field.widget.attrs[<span class="hljs-string">&quot;class&quot;</span>] = <span class="hljs-string">&quot;form-control&quot;</span><br>                field.widget.attrs[<span class="hljs-string">&quot;placeholder&quot;</span>] = field.label<br>            <span class="hljs-keyword">else</span>:<br>            field.widget.attrs = &#123;<br>                    <span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;form-control&quot;</span>, <br>                    <span class="hljs-string">&quot;placeholder&quot;</span>: field.label&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserModelForm</span>(<span class="hljs-title class_ inherited__">BootStrapModelForm</span>):<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.UserInfo<br>        fields = [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>]<br></code></pre></td></tr></table></figure><h1 id="1-管理员操作"><a href="#1-管理员操作" class="headerlink" title="1-管理员操作"></a>1-管理员操作</h1><h2 id="1、管理员表创建"><a href="#1、管理员表创建" class="headerlink" title="1、管理员表创建"></a>1、管理员表创建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Admin</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;管理员表&quot;&quot;&quot;</span><br>    username = models.CharField(verbose_name=<span class="hljs-string">&#x27;用户名&#x27;</span>, max_length=<span class="hljs-number">32</span>)<br>    password = models.CharField(verbose_name=<span class="hljs-string">&#x27;密码&#x27;</span>, max_length=<span class="hljs-number">64</span>)<br></code></pre></td></tr></table></figure><h2 id="2、新建管理员"><a href="#2、新建管理员" class="headerlink" title="2、新建管理员"></a>2、新建管理员</h2><ul><li><p>新建了一个公共页面：change.html  用于所有新建任务的页面，只需要更改对应的标题就可以，不同的forms根据数据库字段设置</p><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/62afe2b3e05be634bede64888a053fdd.png" alt="image-20231130172021809"></p></li><li><p>添加确认密码字段</p></li><li><p>使用插件，让密码不是明文显示</p></li><li><p>定义钩子函数，验证确认密码与密码是否一致</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入报错模块</span><br><span class="hljs-keyword">from</span> django.core.exceptions <span class="hljs-keyword">import</span> ValidationError<br><span class="hljs-keyword">from</span> app01.utils.encrypt <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminModelForm</span>(<span class="hljs-title class_ inherited__">BootStrapModelForm</span>):<br>    <span class="hljs-comment"># 增加确认密码字段</span><br>    confirm_password = forms.CharField(<br>        label=<span class="hljs-string">&quot;确认密码&quot;</span>,<br>        widget=forms.PasswordInput(render_value=<span class="hljs-literal">True</span>)   <span class="hljs-comment"># render_value=True：当两次密码不一致时，提交过后任然保持数据在输入框，不会清空</span><br>    )<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.Admin<br>        <span class="hljs-comment"># fields = &quot;__all__&quot;  # 表示数据库中所有字段</span><br>        fields = [<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;confirm_password&quot;</span>]<br>        widgets = &#123;<br>            <span class="hljs-string">&quot;password&quot;</span>: forms.PasswordInput(render_value=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 插件，让密码不是明文显示</span><br>        &#125;<br><br>    <span class="hljs-comment"># 加密数据</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clean_password</span>(<span class="hljs-params">self</span>):<br>        pwd = self.cleaned_data.get(<span class="hljs-string">&quot;password&quot;</span>)<br>        <span class="hljs-keyword">return</span> md5(pwd)<br><br>    <span class="hljs-comment"># 定义一个钩子函数，验证确认密码与密码是否一致</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clean_confirm_password</span>(<span class="hljs-params">self</span>):<br>        pwd = self.cleaned_data.get(<span class="hljs-string">&quot;password&quot;</span>)<br>        confirm = md5(self.cleaned_data.get(<span class="hljs-string">&quot;confirm_password&quot;</span>))<br>        <span class="hljs-keyword">if</span> confirm != pwd:<br>            <span class="hljs-keyword">raise</span> ValidationError(<span class="hljs-string">&quot;密码不一致&quot;</span>)<br>        <span class="hljs-comment"># 此处返回什么字段，以后保存到数据库就是什么字段的值</span><br>        <span class="hljs-keyword">return</span> confirm<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 如果两次输入密码不一致，在点击提交后，两个密码输入框的数据会清空。</span><br><span class="hljs-comment"># 如果不想清空，则在插件部分加上render_value=True</span><br>widgets = &#123;<span class="hljs-string">&quot;password&quot;</span>: forms.PasswordInput(render_value=<span class="hljs-literal">True</span>)&#125;<br></code></pre></td></tr></table></figure><ul><li><p>md5加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/utils/encrypt.py</span><br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params">data_string</span>):<br><br>    obj = hashlib.md5(settings.SECRET_KEY.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    obj.update(data_string.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-keyword">return</span> obj.hexdigest()<br></code></pre></td></tr></table></figure></li></ul><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/1d222bf3992d6ab0a6ec29ad1e8e13b0.png" alt="image-20231130164802339" style="zoom:80%;" /><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/88d04facd812be63753551c7aeb3a13e.png" alt="image-20231130164729643"></p><h2 id="3、编辑管理员"><a href="#3、编辑管理员" class="headerlink" title="3、编辑管理员"></a>3、编辑管理员</h2><ul><li><p>增加form对编辑页面进行设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminEditModelForm</span>(<span class="hljs-title class_ inherited__">BootStrapModelForm</span>):<br>    <span class="hljs-comment"># 增加确认密码字段</span><br>    confirm_password = forms.CharField(<br>        label=<span class="hljs-string">&quot;确认密码&quot;</span>,<br>        widget=forms.PasswordInput(render_value=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># render_value=True：当两次密码不一致时，提交过后任然保持数据在输入框，不会清空</span><br>    )<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.Admin<br>        fields = [<span class="hljs-string">&quot;password&quot;</span>]<br>        widgets = &#123;<br>            <span class="hljs-string">&quot;password&quot;</span>: forms.PasswordInput(render_value=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 插件，让密码不是明文显示</span><br>        &#125;<br>        <span class="hljs-comment"># 加密数据</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clean_password</span>(<span class="hljs-params">self</span>):<br>        pwd = self.cleaned_data.get(<span class="hljs-string">&quot;password&quot;</span>)<br>        <span class="hljs-keyword">return</span> md5(pwd)<br><br>    <span class="hljs-comment"># 定义一个钩子函数，验证确认密码与密码是否一致</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clean_confirm_password</span>(<span class="hljs-params">self</span>):<br>        pwd = self.cleaned_data.get(<span class="hljs-string">&quot;password&quot;</span>)<br>        confirm = md5(self.cleaned_data.get(<span class="hljs-string">&quot;confirm_password&quot;</span>))<br>        <span class="hljs-keyword">if</span> confirm != pwd:<br>            <span class="hljs-keyword">raise</span> ValidationError(<span class="hljs-string">&quot;密码不一致&quot;</span>)<br>        <span class="hljs-comment"># 此处返回什么字段，以后保存到数据库就是什么字段的值</span><br>        <span class="hljs-keyword">return</span> confirm<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin_edit</span>(<span class="hljs-params">request, nid</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;编辑管理员&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 获取id对象</span><br>    row_obj = models.Admin.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).first()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> row_obj:<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/admin/list/&quot;</span>)  <span class="hljs-comment"># 如果对象不存在，可以返回列表页面，也可以返回自己定义的错误提示页面</span><br><br>    title = <span class="hljs-string">&quot;编辑管理员&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        form = AdminEditModelForm(instance=row_obj)<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;change.html&quot;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>: form, <span class="hljs-string">&quot;title&quot;</span>: title&#125;)<br><br>    form = AdminEditModelForm(data=request.POST, instance=row_obj)<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        form.save()<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/admin/list/&quot;</span>)<br>    <span class="hljs-comment"># 如果有错误信息</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;change.html&quot;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>: form, <span class="hljs-string">&quot;title&quot;</span>: title&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/9eaeebe82affa51a07d251b35872b285.png" alt="image-20231130172207651"></p><ul><li><p>加一个新功能：验证编辑后的密码是否与之前的密码一致，如果一致，则提示密码与之前一致修改失败。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在 class AdminEditModelForm(BootStrapModelForm) 中</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clean_password</span>(<span class="hljs-params">self</span>):<br>        pwd = self.cleaned_data.get(<span class="hljs-string">&quot;password&quot;</span>)<br>        md5_pwd = md5(pwd)<br><br>        <span class="hljs-comment"># 去数据库校验当前密码和新输入的密码是否一致</span><br>        exists = models.Admin.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=self.instance.pk,password=md5_pwd).exists()<br>        <span class="hljs-keyword">if</span> exists:<br>            <span class="hljs-keyword">raise</span> ValidationError(<span class="hljs-string">&quot;密码与之前一致,修改失败!&quot;</span>)<br>        <span class="hljs-keyword">return</span> md5_pwd<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05-项目开发-3_学习day05</title>
    <link href="/2023/11/29/Django/05-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-3/"/>
    <url>/2023/11/29/Django/05-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-3/</url>
    
    <content type="html"><![CDATA[<h1 id="day05-靓号管理"><a href="#day05-靓号管理" class="headerlink" title="day05 - 靓号管理"></a>day05 - 靓号管理</h1><h2 id="1、表结构"><a href="#1、表结构" class="headerlink" title="1、表结构"></a>1、表结构</h2><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/86fb3514ce1cc077ccf752ce0ce36766.png" alt="image-20231125113221381"></p><p>根据表结构的需求，在models.py中创建类（由类生成数据库中的表）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrettyNum</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot; 靓号表 &quot;&quot;&quot;</span><br>    mobile = models.CharField(verbose_name=<span class="hljs-string">&quot;手机号&quot;</span>, max_length=<span class="hljs-number">32</span>, unique=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 想要允许为空，则在参数中加入null=True,blank=True</span><br>    price = models.IntegerField(verbose_name=<span class="hljs-string">&quot;价格&quot;</span>, default=<span class="hljs-number">0</span>)<br><br>    level_choices = (<br>        (<span class="hljs-number">1</span>, <span class="hljs-string">&quot;1级&quot;</span>),<br>        (<span class="hljs-number">2</span>, <span class="hljs-string">&quot;2级&quot;</span>),<br>        (<span class="hljs-number">3</span>, <span class="hljs-string">&quot;3级&quot;</span>),<br>        (<span class="hljs-number">4</span>, <span class="hljs-string">&quot;4级&quot;</span>),<br>    )<br>    level = models.SmallIntegerField(verbose_name=<span class="hljs-string">&quot;级别&quot;</span>, choices=level_choices, default=<span class="hljs-number">1</span>)<br>    status_choices = (<br>        (<span class="hljs-number">1</span>, <span class="hljs-string">&quot;已占用&quot;</span>),<br>        (<span class="hljs-number">2</span>, <span class="hljs-string">&quot;未使用&quot;</span>),<br>    )<br>    status = models.SmallIntegerField(verbose_name=<span class="hljs-string">&quot;状态&quot;</span>, choices=status_choices, default=<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><blockquote><p>两条执行数据库命令：工具-&gt;运行manage.py—&gt; 1).  makemigrations   2).  migrate</p></blockquote><h2 id="2、靓号列表"><a href="#2、靓号列表" class="headerlink" title="2、靓号列表"></a>2、靓号列表</h2><ul><li><p>url</p></li><li><p>函数</p><ul><li><p>获取所有靓号</p></li><li><p>结合html+render将靓号罗列出来</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">id号码价格级别<span class="hljs-comment">(中文)</span>状态<span class="hljs-comment">(中文)</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">phone_list</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 去数据库中获取所有的靓号列表</span><br>    <span class="hljs-comment"># 查询的数据结果可以使用order by排序，“-level”，添加减号表示倒序排，</span><br>    <span class="hljs-comment"># phones_list = models.PrettyNum.objects.all().order_by(&quot;-price&quot;)</span><br>    phones_list = models.PrettyNum.objects.<span class="hljs-built_in">all</span>()<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;phone_list.html&quot;</span>, &#123;<span class="hljs-string">&quot;phones_list&quot;</span>: phones_list&#125;)<br></code></pre></td></tr></table></figure><h2 id="3、新建靓号"><a href="#3、新建靓号" class="headerlink" title="3、新建靓号"></a>3、新建靓号</h2><ul><li><p>列表点击新建跳转：&#x2F;phone&#x2F;add&#x2F;</p></li><li><p>URL</p></li><li><p>ModelForm类</p></li><li><p>函数</p><ul><li>实例化类的对象</li><li>通过render将对象传入到HTML中</li><li>模板循环展示所有的字段</li></ul></li><li><p>点击提交</p><ul><li>数据校验</li><li>保存到数据库</li><li>跳转回靓号列表</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.core.validators <span class="hljs-keyword">import</span> RegexValidator<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PhoneModelForm</span>(forms.ModelForm):<br>    <span class="hljs-comment"># 添加验证规则，通过正则表达式来限制输入</span><br>    mobile = forms.CharField(<br>        label=<span class="hljs-string">&quot;号码&quot;</span>,<br>        validators=[RegexValidator(<span class="hljs-string">r&#x27;^1[3-9]\d&#123;9&#125;$&#x27;</span>, <span class="hljs-string">&#x27;号码必须以1开头, 第二位必须取[3-9], 号码长度11位数字&#x27;</span>)]<br>    )<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.PrettyNum<br>        <span class="hljs-comment"># fields = [&quot;mobile&quot;, &quot;price&quot;, &quot;level&quot;, &quot;status&quot;]</span><br>        fields = <span class="hljs-string">&quot;__all__&quot;</span>  <span class="hljs-comment"># 表示数据库中所有字段</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br><br>        <span class="hljs-comment"># 循环找到所有的插件，添加&quot;class&quot;:&quot;form-control&quot;样式</span><br>        <span class="hljs-keyword">for</span> name, field <span class="hljs-keyword">in</span> self.fields.items():<br>            field.widget.attrs = &#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;form-control&quot;</span>, <span class="hljs-string">&quot;placeholder&quot;</span>: field.label&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">phone_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;添加靓号（modelForm版本）&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        form = PhoneModelForm()<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;phone_add.html&quot;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>: form&#125;)<br>    <span class="hljs-comment"># 用户提交数据，需要校验</span><br>    form = PhoneModelForm(data=request.POST)<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        <span class="hljs-comment"># 如果数据合法，则保存到数据库</span><br>        form.save()<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/phone/list/&quot;</span>)<br>    <span class="hljs-comment"># 如果有错误信息</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;phone_add.html&quot;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>: form&#125;)<br><br></code></pre></td></tr></table></figure><h2 id="4、编辑靓号"><a href="#4、编辑靓号" class="headerlink" title="4、编辑靓号"></a>4、编辑靓号</h2><ul><li>URL</li><li>函数<ul><li>根据ID获取当前编辑的对象</li><li>ModelForm配合，默认显示数据</li><li>提交修改</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">phone_edit</span>(<span class="hljs-params">request, nid</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;编辑靓号&quot;&quot;&quot;</span><br>    row_obj = models.PrettyNum.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).first()<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-comment"># 输入框中的默认值设置</span><br>        <span class="hljs-comment"># 根据ID去数据看看获取要编辑的那一行数据</span><br>        <span class="hljs-comment"># instance会默认将获取到的数据显示出来</span><br>        form = PhoneModelForm(instance=row_obj)<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;phone_edit.html&quot;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>: form&#125;)<br><br>    <span class="hljs-comment"># 用户提交数据，需要校验</span><br>    form = PhoneModelForm(data=request.POST, instance=row_obj)<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        <span class="hljs-comment"># 默认保存的是用户输入的所有数据，如果想要再增加额外的值</span><br>        <span class="hljs-comment"># form.instance.字段名 = 值</span><br><br>        <span class="hljs-comment"># 如果数据合法，则保存到数据库</span><br>        form.save()<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/phone/list/&quot;</span>)<br>    <span class="hljs-comment"># 如果有错误信息</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;phone_edit.html&quot;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>: form&#125;)<br></code></pre></td></tr></table></figure><h2 id="5、删除靓号"><a href="#5、删除靓号" class="headerlink" title="5、删除靓号"></a>5、删除靓号</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">phone_del</span>(<span class="hljs-params">request, nid</span>):<br>    models.PrettyNum.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).delete()<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/phone/list/&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="6、搜索手机号"><a href="#6、搜索手机号" class="headerlink" title="6、搜索手机号"></a>6、搜索手机号</h2><ul><li>针对数字的查找条件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">models.PrettyNum.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">12</span>)<span class="hljs-comment"># 等于12</span><br>models.PrettyNum.objects.<span class="hljs-built_in">filter</span>(id__gt=<span class="hljs-number">12</span>)<span class="hljs-comment"># 大于12</span><br>models.PrettyNum.objects.<span class="hljs-built_in">filter</span>(id__gte=<span class="hljs-number">12</span>)<span class="hljs-comment"># 大于等于12</span><br>models.PrettyNum.objects.<span class="hljs-built_in">filter</span>(id__lt=<span class="hljs-number">12</span>)<span class="hljs-comment"># 小于12</span><br>models.PrettyNum.objects.<span class="hljs-built_in">filter</span>(id__lte=<span class="hljs-number">12</span>)<span class="hljs-comment"># 小于等于12</span><br></code></pre></td></tr></table></figure><ul><li>针对字符串的查找条件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">models.PrettyNum.objects.<span class="hljs-built_in">filter</span>(mobile__startswith=<span class="hljs-string">&quot;1999&quot;</span>)<span class="hljs-comment"># 以“1999”开头的字符串</span><br>models.PrettyNum.objects.<span class="hljs-built_in">filter</span>(mobile__endswith=<span class="hljs-string">&quot;1999&quot;</span>)<span class="hljs-comment"># 以“1999”结尾的字符串</span><br>models.PrettyNum.objects.<span class="hljs-built_in">filter</span>(mobile__contains=<span class="hljs-string">&quot;1999&quot;</span>)<span class="hljs-comment"># 包含“1999”的字符串</span><br></code></pre></td></tr></table></figure><ul><li><p>功能实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">phone_list</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 搜索手机号</span><br>    data_list = &#123;&#125;<br>    value = request.GET.get(<span class="hljs-string">&#x27;q&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>)<span class="hljs-comment"># 搜索框中传输参数变量q</span><br>    <span class="hljs-keyword">if</span> value:<br>        data_list[<span class="hljs-string">&#x27;mobile__contains&#x27;</span>] = value<br><br>    <span class="hljs-comment"># 去数据库中获取所有的靓号列表</span><br>    <span class="hljs-comment"># 查询的数据结果可以使用order by排序，“-level”，添加减号表示倒序排，</span><br>    <span class="hljs-comment"># phones_list = models.PrettyNum.objects.all().order_by(&quot;-price&quot;)</span><br>    <span class="hljs-comment"># phones_list = models.PrettyNum.objects.all()</span><br>    <span class="hljs-string">&quot;&quot;&quot;根据条件搜索想要的数据&quot;&quot;&quot;</span><br>    phones_list = models.PrettyNum.objects.<span class="hljs-built_in">filter</span>(**data_list)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;phone_list.html&quot;</span>, &#123;<span class="hljs-string">&quot;phones_list&quot;</span>: phones_list,<span class="hljs-string">&quot;search&quot;</span>:value&#125;)<span class="hljs-comment"># 将搜索框中的数据显示在前端页面中</span><br></code></pre></td></tr></table></figure></li></ul><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/a92cec1ab2ee17e211709dff6c65fa9c.png" alt="image-20231129160824753"></p><h2 id="7、分页展示靓号"><a href="#7、分页展示靓号" class="headerlink" title="7、分页展示靓号"></a>7、分页展示靓号</h2><ul><li>建立一个分页组件，名为 pagination.py，以后要使用到分页的，都可以引用它</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">自定义的分页组件</span><br><span class="hljs-string"></span><br><span class="hljs-string">使用方法：</span><br><span class="hljs-string">在views.py导入该类 from app01.utils.pagination import Pagination</span><br><span class="hljs-string">使用以下代码即可：</span><br><span class="hljs-string">        queryset = models.PrettyNum.objects.all()  # 分页展示的显示逻辑</span><br><span class="hljs-string">        page_object = Pagination(request, queryset,page_size=2)</span><br><span class="hljs-string">        context = &#123;</span><br><span class="hljs-string">                &quot;phones_list&quot;: page_object.page_queryset,   # 分完页的数据</span><br><span class="hljs-string">                &quot;page_string&quot;: page_object.html()   # 页码</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> django.utils.safestring <span class="hljs-keyword">import</span> mark_safe<br><span class="hljs-keyword">from</span> django.http.request <span class="hljs-keyword">import</span> QueryDict<br><span class="hljs-keyword">import</span> copy<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pagination</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, request, queryset, page_size=<span class="hljs-number">8</span>, page_param=<span class="hljs-string">&quot;page&quot;</span>, plus=<span class="hljs-number">3</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :param request:</span><br><span class="hljs-string">        :param queryset: 分页逻辑</span><br><span class="hljs-string">        :param page_size: 每页显示多少行数据</span><br><span class="hljs-string">        :param page_param: 当前页面对象</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        query_dict = copy.deepcopy(request.GET)<br>        query_dict._mtable = query_dict  <span class="hljs-comment"># 拼接URL参数</span><br>        self.query_dict = query_dict<br><br>        self.page_apram = page_param<br><br><br>        page = request.GET.get(page_param, <span class="hljs-string">&quot;1&quot;</span>)<br>        <span class="hljs-keyword">if</span> page.isdecimal():<br>            page = <span class="hljs-built_in">int</span>(page)<br>        <span class="hljs-keyword">else</span>:<br>            page = <span class="hljs-number">1</span><br>        self.page = page<br>        self.page_size = page_size<br><br>        <span class="hljs-comment"># 分页的起始和结束值</span><br>        self.start = (page - <span class="hljs-number">1</span>) * page_size<br>        self.end = page * page_size<br><br>        <span class="hljs-comment"># 分页逻辑</span><br>        self.page_queryset = queryset[self.start:self.end]<br><br>        <span class="hljs-comment"># 计算分页数</span><br>        total_count = queryset.count()  <span class="hljs-comment"># 获取数据的总条数</span><br><br>        <span class="hljs-comment"># divmod: Return the tuple (x//y, x%y)</span><br>        total_page_count, div = <span class="hljs-built_in">divmod</span>(total_count, page_size)  <span class="hljs-comment"># 计算总页码数</span><br>        <span class="hljs-keyword">if</span> div:  <span class="hljs-comment"># 如果有余数，则总页数+1</span><br>            total_page_count += <span class="hljs-number">1</span><br>        self.total_page_count = total_page_count<br><br>        <span class="hljs-comment"># 计算出显示当前页的前5页，后5页</span><br>        self.plus = plus<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">html</span>(<span class="hljs-params">self</span>):<br><br>        <span class="hljs-keyword">if</span> self.total_page_count &lt;= <span class="hljs-number">2</span> * self.plus + <span class="hljs-number">1</span>:<br>            <span class="hljs-comment"># 如果数据库中数据比较少，都没有达到11页</span><br>            start_page = <span class="hljs-number">1</span><br>            end_page = self.total_page_count<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 如果数据库中数据页数 &gt;11页</span><br><br>            <span class="hljs-comment"># 当前页&lt;5时，控制最左端</span><br>            <span class="hljs-keyword">if</span> self.page &lt;= self.plus:<br>                start_page = <span class="hljs-number">1</span><br>                end_page = <span class="hljs-number">2</span> * self.plus + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 当前页 &gt; 5，控制最右端</span><br>                <span class="hljs-comment"># 当前页+5 &gt; 总页面</span><br>                <span class="hljs-keyword">if</span> (self.page + self.plus) &gt; self.total_page_count:<br>                    start_page = self.total_page_count - <span class="hljs-number">2</span> * self.plus<br>                    end_page = self.total_page_count<br>                <span class="hljs-keyword">else</span>:<br>                    start_page = self.page - self.plus<br>                    end_page = self.page + self.plus<br><br>        <span class="hljs-comment"># 页码</span><br>        page_str_list = []<br><br>        self.query_dict.setlist(self.page_apram, [<span class="hljs-number">1</span>])<br>        page_str_list.append(<br>            <span class="hljs-string">&#x27;&lt;li class=&quot;page-item&quot;&gt;&lt;a class=&quot;page-link&quot; href=&quot;?&#123;&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(self.query_dict.urlencode()))<br><br>        <span class="hljs-comment"># 上一页</span><br>        <span class="hljs-keyword">if</span> self.page &gt; <span class="hljs-number">1</span>:<br>            self.query_dict.setlist(self.page_apram, [self.page - <span class="hljs-number">1</span>])<br>            prev = <span class="hljs-string">&#x27;&lt;li class=&quot;page-item&quot;&gt;&lt;a class=&quot;page-link&quot; href=&quot;?&#123;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(self.query_dict.urlencode())<br>        <span class="hljs-keyword">else</span>:<br>            self.query_dict.setlist(self.page_apram, [<span class="hljs-number">1</span>])<br>            prev = <span class="hljs-string">&#x27;&lt;li class=&quot;page-item&quot;&gt;&lt;a class=&quot;page-link&quot; href=&quot;?&#123;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(self.query_dict.urlencode())<br>        page_str_list.append(prev)<br><br>        <span class="hljs-comment"># 页码</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start_page, end_page + <span class="hljs-number">1</span>):<br>            self.query_dict.setlist(self.page_apram, [i])<br>            <span class="hljs-keyword">if</span> i == self.page:  <span class="hljs-comment"># 如果是当前页就高光</span><br>                ele = <span class="hljs-string">&#x27;&lt;li class=&quot;page-item active&quot;&gt;&lt;a class=&quot;page-link&quot; href=&quot;?&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(self.query_dict.urlencode(), i)<br>            <span class="hljs-keyword">else</span>:<br>                ele = <span class="hljs-string">&#x27;&lt;li class=&quot;page-item&quot;&gt;&lt;a class=&quot;page-link&quot; href=&quot;?&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(self.query_dict.urlencode(), i)<br>            page_str_list.append(ele)<br><br>        <span class="hljs-comment"># 下一页</span><br>        <span class="hljs-keyword">if</span> self.page &lt; self.total_page_count:<br>            self.query_dict.setlist(self.page_apram, [self.page + <span class="hljs-number">1</span>])<br>            prev = <span class="hljs-string">&#x27;&lt;li class=&quot;page-item&quot;&gt;&lt;a class=&quot;page-link&quot; href=&quot;?&#123;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(self.query_dict.urlencode())<br>        <span class="hljs-keyword">else</span>:<br>            self.query_dict.setlist(self.page_apram, [self.total_page_count])<br>            prev = <span class="hljs-string">&#x27;&lt;li class=&quot;page-item&quot;&gt;&lt;a class=&quot;page-link&quot; href=&quot;?&#123;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(self.query_dict.urlencode())<br>        page_str_list.append(prev)<br><br>        <span class="hljs-comment"># 尾页</span><br>        self.query_dict.setlist(self.page_apram, [self.total_page_count])<br>        page_str_list.append(<br>            <span class="hljs-string">&#x27;&lt;li class=&quot;page-item&quot;&gt;&lt;a class=&quot;page-link&quot; href=&quot;?&#123;&#125;&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(self.query_dict.urlencode()))<br><br>        page_string = mark_safe(<span class="hljs-string">&quot;&quot;</span>.join(page_str_list))<br>        <span class="hljs-keyword">return</span> page_string<br><br></code></pre></td></tr></table></figure><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/b144eec8e2bb78724e5205781665e14c.png" alt="image-20231129214851082"></p><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/f7017ef705d8bf579f6aedf2171b7c92.png" alt="image-20231129214932853"></p>]]></content>
    
    
    <categories>
      
      <category>Django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04-项目开发-2_学习day04</title>
    <link href="/2023/11/24/Django/04-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-2/"/>
    <url>/2023/11/24/Django/04-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-2/</url>
    
    <content type="html"><![CDATA[<h2 id="1、模板的继承"><a href="#1、模板的继承" class="headerlink" title="1、模板的继承"></a>1、模板的继承</h2><ul><li><p>创建一个母板：使用<code> &#123;% block content %&#125; &#123;% endblock %&#125;</code>用来表示子板的内容</p></li><li><p>子板继承时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% extends <span class="hljs-string">&#x27;layout.html&#x27;</span> %&#125; <span class="hljs-comment"># layout.html可以自定义其他名字</span><br>&#123;% block content %&#125;<br><span class="hljs-comment"># 子板特有的内容</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure></li></ul><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/5584615b4d7c3529c69279b87416f519.png" alt="image-20231123220425430"></p><h2 id="2、用户管理"><a href="#2、用户管理" class="headerlink" title="2、用户管理"></a>2、用户管理</h2><ul><li>向数据库表中插入一些数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into app01_userinfo (name,password,age,account,creat_time,gender,depart_id)<br>values (&#x27;张三&#x27;,&#x27;123&#x27;,23,100.68,&#x27;2021-11-11&#x27;,1,1),<br>(&#x27;大乔&#x27;,&#x27;333dsf&#x27;,24,200.00,&#x27;2021-12-12&#x27;,2,2),<br>(&#x27;小乔&#x27;,&#x27;23dsf&#x27;,20,321.00,&#x27;2018-05-23&#x27;,2,2),<br>(&#x27;张飞&#x27;,&#x27;55ggg&#x27;,25,251.66,&#x27;2020-08-13&#x27;,1,5),<br>(&#x27;关羽&#x27;,&#x27;666888&#x27;,27,342.55,&#x27;2019-05-15&#x27;,1,5),<br>(&#x27;刘备&#x27;,&#x27;ggg321&#x27;,29,666.68,&#x27;2017-07-12&#x27;,1,1);<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在Django中可以使用 get_字段名_display() 的方式来获取元组中数字对应的中文名称</span><br><span class="hljs-comment"># 例如获取性别：</span><br> gender_choices = (<br>        (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;男&#x27;</span>),<br>        (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;女&#x27;</span>),<br>    )<br> gender = models.SmallIntegerField(verbose_name=<span class="hljs-string">&#x27;性别&#x27;</span>,choices=gender_choices)<br><span class="hljs-comment"># obj.get_gender_display(), 根据在models.py文件中设置的上述两条语句，如果数据库表中gender字段的值为1，则打印输出‘男’ ，字段的值为2，则打印输出‘女’ </span><br></code></pre></td></tr></table></figure><ul><li><p>获取时间戳，并设置格式<code> obj.creat_time.strftime(&quot;%Y-%m-%d&quot;)</code></p></li><li><p>存在关联数据时，Django会根据设置的关联变量自动去关联表，并根据id获取那一行的数据对象：<code> obj.depart.title</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># depart 是用来关联的变量</span><br>depart = models.ForeignKey(to=<span class="hljs-string">&quot;Department&quot;</span>, to_field=<span class="hljs-string">&quot;id&quot;</span>, on_delete=models.CASCADE)<br></code></pre></td></tr></table></figure></li><li><p>在html中使用模板语言，对时间进行格式设置，需要用过滤器 |  <code> &#123;&#123; obj.creat_time | data:"Y-m-d" &#125;&#125;</code></p></li></ul><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/cd3640e44f1d6f14047adde28ff894fd.png" alt="image-20231124102145498" style="zoom:80%;" /><h2 id="3、新建用户"><a href="#3、新建用户" class="headerlink" title="3、新建用户"></a>3、新建用户</h2><ul><li><p>原始方法：一般不采用【麻烦】</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>用户提交数据没有校验<br><span class="hljs-bullet">- </span>错误输入时，应该有错误提示<br><span class="hljs-bullet">- </span>页面上，每一个字段都需要重新写一遍<br><span class="hljs-bullet">- </span>关联的数据，需要手动去获取并循环展示在页面中<br></code></pre></td></tr></table></figure></li><li><p>Django组件</p><ul><li>Form组件（较简便）</li><li>ModeForm组件（最简便）</li></ul></li></ul><h3 id="3-1-原始方法"><a href="#3-1-原始方法" class="headerlink" title="3.1 原始方法"></a>3.1 原始方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;添加用户(原始方法)&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-comment"># 使用一个字典保存数据库中的性别元组</span><br>        context = &#123;<br>            <span class="hljs-string">&#x27;gender_choices&#x27;</span>: models.UserInfo.gender_choices,<br>            <span class="hljs-string">&#x27;depart_list&#x27;</span>:models.Department.objects.<span class="hljs-built_in">all</span>()<br>        &#125;<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;user_add.html&quot;</span>, context)<br>    <span class="hljs-comment"># 获取用户提交的数据</span><br>    name = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>    pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>    age = request.POST.get(<span class="hljs-string">&quot;age&quot;</span>)<br>    ac = request.POST.get(<span class="hljs-string">&quot;ac&quot;</span>)<br>    dt = request.POST.get(<span class="hljs-string">&quot;dt&quot;</span>)<br>    gd = request.POST.get(<span class="hljs-string">&quot;gd&quot;</span>)<br>    dp = request.POST.get(<span class="hljs-string">&quot;dp&quot;</span>)<br><br>    <span class="hljs-comment"># 添加到数据库</span><br>    models.UserInfo.objects.create(name=name,password=pwd,age=age,<br>                                   account=ac,creat_time=dt,<br>                                   gender=gd,depart_id=dp)<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/user/list/&quot;</span>)<br><br><br><span class="hljs-comment"># user_add.html</span><br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>    &lt;label&gt;性别&lt;/label&gt;<br>    &lt;select <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;<br>          &#123;% <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> gender_choices %&#125;<br>               &lt;option value=<span class="hljs-string">&quot;&#123;&#123; item.0 &#125;&#125;&quot;</span>&gt;&#123;&#123; item<span class="hljs-number">.1</span> &#125;&#125;&lt;/option&gt;<span class="hljs-comment"># 模板语言</span><br>          &#123;% endfor %&#125;<br>     &lt;/select&gt;<br>&lt;/div&gt;<br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>     &lt;label&gt;部门&lt;/label&gt;<br>     &lt;select <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;<br>           &#123;% <span class="hljs-keyword">for</span> depart <span class="hljs-keyword">in</span> depart_list %&#125;<br>                 &lt;option value=<span class="hljs-string">&quot;&#123;&#123; depart.id &#125;&#125;&quot;</span>&gt;&#123;&#123; depart.title &#125;&#125;&lt;/option&gt;<br>           &#123;% endfor %&#125;<br>      &lt;/select&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/d4a11b32b4726bb11b8a78a4c006b8b5.png" alt="image-20231124105649979" style="zoom: 80%;" /><h3 id="3-2-初识Form"><a href="#3-2-初识Form" class="headerlink" title="3.2 初识Form"></a>3.2 初识Form</h3><h4 id="1、views-py"><a href="#1、views-py" class="headerlink" title="1、views.py"></a>1、views.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 新建一个类，继承Django的Form</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyForm</span>(<span class="hljs-title class_ inherited__">Form</span>):<br>    user = forms.CharField(widget=forms.Input)<span class="hljs-comment"># django会自己创建输入框，不用在html中写输入框了</span><br>    pwd = forms.CharField(widget=forms.Input)<br>    email = forms.CharField(widget=forms.Input)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>form = MyForm()    <span class="hljs-comment"># 实例Form对象</span><br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;user_add.html&quot;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>:form&#125;)<br></code></pre></td></tr></table></figure><h4 id="2、user-add-html"><a href="#2、user-add-html" class="headerlink" title="2、user_add.html"></a>2、user_add.html</h4><ul><li>通过for循环来加载form</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    &#123;% for field in form %&#125;<br>    &#123;&#123; field &#125;&#125;<br>    &#123;% endfor %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-初识ModelForm（推荐）"><a href="#3-3-初识ModelForm（推荐）" class="headerlink" title="3.3 初识ModelForm（推荐）"></a>3.3 初识ModelForm（推荐）</h3><h4 id="0、models-py"><a href="#0、models-py" class="headerlink" title="0、models.py"></a>0、models.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot; 员工表 &quot;&quot;&quot;</span><br>    name = models.CharField(verbose_name=<span class="hljs-string">&#x27;姓名&#x27;</span>, max_length=<span class="hljs-number">16</span>)<br>    password = models.CharField(verbose_name=<span class="hljs-string">&#x27;密码&#x27;</span>, max_length=<span class="hljs-number">64</span>)<br>    age = models.IntegerField(verbose_name=<span class="hljs-string">&#x27;年龄&#x27;</span>)<br>    account = models.DecimalField(verbose_name=<span class="hljs-string">&#x27;账户余额&#x27;</span>, max_digits=<span class="hljs-number">10</span>, decimal_places=<span class="hljs-number">2</span>, default=<span class="hljs-number">0</span>)<br>    creat_time = models.DateTimeField(verbose_name=<span class="hljs-string">&#x27;入职时间&#x27;</span>)<br><br>    depart = models.ForeignKey(to=<span class="hljs-string">&quot;Department&quot;</span>, to_field=<span class="hljs-string">&quot;id&quot;</span>, on_delete=models.CASCADE)<br>   <br>    gender_choices = (<br>        (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;男&#x27;</span>),<br>        (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;女&#x27;</span>),<br>    )<br>    gender = models.SmallIntegerField(verbose_name=<span class="hljs-string">&#x27;性别&#x27;</span>,choices=gender_choices)<br></code></pre></td></tr></table></figure><h4 id="1、views-py-1"><a href="#1、views-py-1" class="headerlink" title="1、views.py"></a>1、views.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 新建一个类，继承Django的ModelForm</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyForm</span>(<span class="hljs-title class_ inherited__">ModelForm</span>):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = UserInfo<br>        fields = [<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>]<span class="hljs-comment"># 直接写表中的字段名</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>form = MyForm()    <span class="hljs-comment"># 实例Form对象</span><br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;user_add.html&quot;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>:form&#125;)<br></code></pre></td></tr></table></figure><h4 id="2、user-add-html-1"><a href="#2、user-add-html-1" class="headerlink" title="2、user_add.html"></a>2、user_add.html</h4><ul><li>通过for循环来加载form</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    &#123;% for field in form %&#125;<br>    &#123;&#123; field &#125;&#125;<br>    &#123;% endfor %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-4-使用ModelForm新建用户"><a href="#3-4-使用ModelForm新建用户" class="headerlink" title="3.4 使用ModelForm新建用户"></a>3.4 使用ModelForm新建用户</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ------------modelForm示例------------ #</span><br><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> forms<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserModelForm</span>(forms.ModelForm):<br>    <span class="hljs-comment"># 添加验证规则</span><br>    name = forms.CharField(min_length=<span class="hljs-number">3</span>,label=<span class="hljs-string">&quot;姓名&quot;</span>)<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.UserInfo<br>        fields = [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;account&quot;</span>,<span class="hljs-string">&quot;creat_time&quot;</span>,<br>                  <span class="hljs-string">&quot;gender&quot;</span>,<span class="hljs-string">&quot;depart&quot;</span>]<br>    <span class="hljs-comment"># 批量更改样式    </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br><br>        <span class="hljs-comment"># 循环找到所有的插件，添加&quot;class&quot;:&quot;form-control&quot;样式</span><br>        <span class="hljs-keyword">for</span> name, field <span class="hljs-keyword">in</span> self.fields.items():<br>            field.widget.attrs = &#123;<span class="hljs-string">&quot;class&quot;</span>:<span class="hljs-string">&quot;form-control&quot;</span>,<span class="hljs-string">&quot;placeholder&quot;</span>:field.label&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_model_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;添加用户（modelForm版本）&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.method ==<span class="hljs-string">&quot;GET&quot;</span>:<br>        form = UserModelForm()<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;user_model_add.html&quot;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>: form&#125;)<br>    <span class="hljs-comment"># 用户提交数据，需要校验</span><br>    form = UserModelForm(data=request.POST)<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        <span class="hljs-comment"># 如果数据合法，则保存到数据库</span><br>        form.save()<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/user/list/&quot;</span>)<br>    <span class="hljs-comment"># 如果有错误信息</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;user_model_add.html&quot;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>: form&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    &#123;% csrf_token %&#125;<br>&#123;% for field in form %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">lable</span>&gt;</span>&#123;&#123; field.label &#125;&#125;: <span class="hljs-tag">&lt;/<span class="hljs-name">lable</span>&gt;</span><br>        &#123;&#123; field &#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; field.errors.0 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     &#123;% endfor %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>保存<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>错误验证</p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/1467098d0465dbc6ec3e4ab6c18daa83.png" alt="image-20231124170504488" style="zoom:80%;" /></li></ul><h2 id="4、编辑用户"><a href="#4、编辑用户" class="headerlink" title="4、编辑用户"></a>4、编辑用户</h2><ul><li>点击编辑，跳转到编辑页面（将编辑行的ID携带过去）</li><li>编辑页面（含有默认数据，根据ID获取并设置到页面中）</li><li>提交<ul><li>数据错误</li><li>数据校验</li><li>在数据库更新</li></ul></li></ul><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/6ce885333375433e7e602e76a53d82d6.png" alt="image-20231125104104499"></p><h2 id="5、删除用户"><a href="#5、删除用户" class="headerlink" title="5、删除用户"></a>5、删除用户</h2><p>设计逻辑和删除部门一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_delete</span>(<span class="hljs-params">request,nid</span>):<br><br>    models.UserInfo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).delete()<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/user/list/&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-第二节-异或运算相关面试题</title>
    <link href="/2023/11/23/%E9%A9%AC%E5%A3%AB%E5%85%B5%E7%AE%97%E6%B3%95%E4%BD%93%E7%B3%BB%E7%8F%AD/02-%E7%AC%AC%E4%BA%8C%E8%8A%82-%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2023/11/23/%E9%A9%AC%E5%A3%AB%E5%85%B5%E7%AE%97%E6%B3%95%E4%BD%93%E7%B3%BB%E7%8F%AD/02-%E7%AC%AC%E4%BA%8C%E8%8A%82-%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="1、异或运算"><a href="#1、异或运算" class="headerlink" title="1、异或运算"></a>1、异或运算</h2><ul><li><p>概念：相同为0，不同为1</p><blockquote><p>a&#x3D;7 ^ b&#x3D;13  ——》    00111 ^ 01101 &#x3D; 01010（十进制10）</p></blockquote></li><li><p>0 ^ N &#x3D; N</p></li><li><p>N ^ N &#x3D; 0</p></li><li><p>满足交换律：a ^ b &#x3D; b ^ a</p></li><li><p>满足结合律：(a ^ b) ^ c &#x3D; a ^ (b ^ c)</p></li></ul><h3 id="1-题目一：不添加额外变量下，交换两个变量的值"><a href="#1-题目一：不添加额外变量下，交换两个变量的值" class="headerlink" title="1. 题目一：不添加额外变量下，交换两个变量的值"></a>1. 题目一：不添加额外变量下，交换两个变量的值</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">int <span class="hljs-keyword">a</span> = <span class="hljs-number">3</span>，int b = <span class="hljs-number">6</span><br><span class="hljs-comment">-----操作------</span><br><span class="hljs-keyword">a</span> = <span class="hljs-keyword">a</span> ^ b<br>b = <span class="hljs-keyword">a</span> ^ b<br><span class="hljs-keyword">a</span> = <span class="hljs-keyword">a</span> ^ b<span class="hljs-comment"># 这三句代码之后，a和b的值互换</span><br></code></pre></td></tr></table></figure><h3 id="2-题目二：一个数组中有一种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这种数"><a href="#2-题目二：一个数组中有一种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这种数" class="headerlink" title="2. 题目二：一个数组中有一种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这种数"></a>2. 题目二：一个数组中有一种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这种数</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">思路：设一个变量<span class="hljs-keyword">a</span> = <span class="hljs-number">0</span>，然后遍历该数组，每次<span class="hljs-keyword">a</span> = <span class="hljs-keyword">a</span> ^ arr[i]。遍历完以后，<span class="hljs-keyword">a</span>的值就是该数组中出现奇数次的数<br></code></pre></td></tr></table></figure><h3 id="3-题目三：怎么把一个int类型的数，提取出最右侧的1来"><a href="#3-题目三：怎么把一个int类型的数，提取出最右侧的1来" class="headerlink" title="3. 题目三：怎么把一个int类型的数，提取出最右侧的1来"></a>3. 题目三：怎么把一个int类型的数，提取出最右侧的1来</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">例：a</span> <span class="hljs-string">=</span> <span class="hljs-number">0110 </span><span class="hljs-number">0011 </span><span class="hljs-number">0001 </span><span class="hljs-number">0000</span>  <span class="hljs-string">要得到</span> <span class="hljs-string">ans</span> <span class="hljs-string">=</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000 </span><span class="hljs-number">0001 </span><span class="hljs-number">0000</span><br><span class="hljs-string">思路：a</span> <span class="hljs-string">&amp;</span> <span class="hljs-string">(-a)</span> <span class="hljs-string">等价于</span> <span class="hljs-string">a</span> <span class="hljs-string">&amp;</span> <span class="hljs-string">(~a</span> <span class="hljs-string">+</span> <span class="hljs-number">1</span><span class="hljs-string">)</span>  <span class="hljs-string">~表示取反</span><br><span class="hljs-string">知识点：1）二进制中，a的相反数</span> <span class="hljs-string">等于</span> <span class="hljs-string">a取反+1</span><br>  <span class="hljs-number">2</span><span class="hljs-string">）与运算：两者同时为1，结果为1，否则为0</span><br></code></pre></td></tr></table></figure><h3 id="4-一个数组中有两种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这两种数"><a href="#4-一个数组中有两种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这两种数" class="headerlink" title="4. 一个数组中有两种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这两种数"></a>4. 一个数组中有两种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这两种数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_two_numbers</span>(<span class="hljs-params">arr</span>):<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(arr) &lt; <span class="hljs-number">2</span>:    <span class="hljs-comment"># 1.处理边界值</span><br>        <span class="hljs-keyword">return</span><br>    xor_result = <span class="hljs-number">0</span>      <span class="hljs-comment"># 2.设置一个变量来遍历异或</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr:<br>        xor_result ^= i<br>    <span class="hljs-comment"># 3.因为两个奇数次数a和b是两种数，所以遍历完以后xor_result = a ^ b,且xor_result != 0</span><br>    <span class="hljs-comment">#   因为a和b是不同的数 所以异或结果一定存在某一位上为1，则a和b在该位置一定是分别为1和0.</span><br>    <span class="hljs-comment"># 4.然后找到xor_result最右边的1</span><br>    right_most_one = xor_result &amp; (-xor_result)<br><br>    <span class="hljs-comment"># 现在用两个变量再去遍历异或，这就分为了两组，一组是该位置为1，另一组是为0，遍历完就能提取出这两个数。</span><br>    num1 = <span class="hljs-number">0</span><br>    num2 = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr:<br>        <span class="hljs-keyword">if</span> (i &amp; right_most_one) == <span class="hljs-number">0</span>:<br>            num1 ^= i<br>        <span class="hljs-keyword">else</span>:<br>            num2 ^= i<br>    <span class="hljs-built_in">print</span>(num1, num2)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    arr = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>]<br>    find_two_numbers(arr)<br></code></pre></td></tr></table></figure><h3 id="5-一个数组中有一种数出现K次，其他数都出现M次，且M-1-K"><a href="#5-一个数组中有一种数出现K次，其他数都出现M次，且M-1-K" class="headerlink" title="5. 一个数组中有一种数出现K次，其他数都出现M次，且M&gt;1,K&lt;M。请找到出现K次的数，要求额外空间复杂的为O(1)，时间复杂度O(N)"></a>5. 一个数组中有一种数出现K次，其他数都出现M次，且M&gt;1,K&lt;M。请找到出现K次的数，要求额外空间复杂的为O(1)，时间复杂度O(N)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 05题 一个数组中有一种数出现K次，其他数都出现M次，且M&gt;1,K&lt;M。请找到出现K次的数，要求额外空间复杂的为O(1)，时间复杂度O(N)</span><br><br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_k_times</span>(<span class="hljs-params">arr, k, m</span>):<br>    t = [<span class="hljs-number">0</span>]*<span class="hljs-number">32</span><br>    <span class="hljs-comment"># t[0]表示 0位置的1出现了几次</span><br>    <span class="hljs-comment"># t[1]表示 1位置的1出现了几次</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>            <span class="hljs-keyword">if</span> (i &gt;&gt; j) &amp; <span class="hljs-number">1</span>:    <span class="hljs-comment"># 如果i的第j位为1，则&amp;1 结果为1</span><br>                t[j] += <span class="hljs-number">1</span>       <span class="hljs-comment"># 那么在该j位置上计数+1</span><br>    ans = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        <span class="hljs-keyword">if</span> t[i] % m:   <span class="hljs-comment"># 如果t[i] % m != 0，则表示在该位置上为1的的数量不是m的整数倍，还包含k次出现的数</span><br>            ans |= (<span class="hljs-number">1</span> &lt;&lt; i)  <span class="hljs-comment"># i位置有1的就 &#x27;或&#x27;，为0就不变，因此遍历完以后，ans就是出现k次的数</span><br>    <span class="hljs-keyword">return</span> ans<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Hash_test</span>(<span class="hljs-params">arr, k, m</span>):  <span class="hljs-comment"># 另一种方法，哈希表法，来验证上面方法的正确性</span><br>    counts = <span class="hljs-built_in">dict</span>()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr:<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> counts:<br>            counts[i] = counts.get(i) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            counts[i] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> counts.keys():<br>        <span class="hljs-keyword">if</span> counts.get(i) == k:<br>            <span class="hljs-keyword">return</span> i<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br><span class="hljs-comment"># ========= 接下来使用对数器来验证 =========</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_random_array</span>(<span class="hljs-params">max_kinds, max_value, k, m</span>):<br>    k_num = random.randint(-max_value, max_value)  <span class="hljs-comment"># k次数</span><br>    numKinds = random.randint(<span class="hljs-number">2</span>, max_kinds)  <span class="hljs-comment"># 数组中数的种类</span><br>    len_arr = k + m * (numKinds-<span class="hljs-number">1</span>)  <span class="hljs-comment"># 数组长度</span><br>    arr = [<span class="hljs-number">0</span>]*len_arr<br><br>    i_num = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):  <span class="hljs-comment"># 将k次数放入数组</span><br>        arr[i] = k_num<br>        i_num += <span class="hljs-number">1</span><br><br>    numKinds -= <span class="hljs-number">1</span>   <span class="hljs-comment"># 减去k次数的种类</span><br>    a_set = <span class="hljs-built_in">set</span>()<br>    a_set.add(k_num)    <span class="hljs-comment"># 将k次数放入集合</span><br>    <span class="hljs-keyword">while</span> numKinds:<br>        <span class="hljs-comment">#  构造出现m次的数，并且无重复</span><br>        curNum = random.randint(-max_value, max_value)<br>        <span class="hljs-keyword">while</span> curNum <span class="hljs-keyword">in</span> a_set:  <span class="hljs-comment"># 如果curNum在集合中，则重新生成</span><br>            curNum = random.randint(-max_value, max_value)<br>        a_set.add(curNum)   <span class="hljs-comment"># 将出现m次的数放入集合</span><br><br>        numKinds -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>            arr[i_num] = curNum<br>            i_num += <span class="hljs-number">1</span><br>    random.shuffle(arr)<br>    <span class="hljs-keyword">return</span> arr<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    max_kinds = <span class="hljs-number">4</span>  <span class="hljs-comment"># 数组的最大种类</span><br>    max_range = <span class="hljs-number">200</span>  <span class="hljs-comment"># 数组中的元素取值范围为[-max_range, max_range]</span><br>    testTimes = <span class="hljs-number">10000</span>  <span class="hljs-comment"># 测试次数</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试开始&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(testTimes):<br>        <span class="hljs-comment"># 构造 k 和 m</span><br>        a = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)   <span class="hljs-comment"># 随机生成1-9的数</span><br>        b = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<br>        k = <span class="hljs-built_in">min</span>(a, b)<br>        m = <span class="hljs-built_in">max</span>(a, b)<br>        <span class="hljs-keyword">if</span> k == m:<br>            m += <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 构造arr</span><br>        arr = generate_random_array(max_kinds, max_range, k, m)<br>        <span class="hljs-comment"># print(arr)</span><br>        <span class="hljs-comment"># 测试</span><br>        ans1 = Hash_test(arr, k, m)<br>        ans2 = find_k_times(arr, k, m)<br>        ans3 = ans1 &amp; <span class="hljs-number">0xffffffff</span>    <span class="hljs-comment"># 将32位整数ans1转换为无符号整数，以便比较</span><br>        <span class="hljs-keyword">if</span> ans3 != ans2:<br>            <span class="hljs-built_in">print</span>(arr)<br>            <span class="hljs-built_in">print</span>(ans1, ans2, ans3)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;出错了!&quot;</span>)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试结束&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>马士兵算法体系班</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03-项目开发-1_学习day03</title>
    <link href="/2023/11/22/Django/03-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-1/"/>
    <url>/2023/11/22/Django/03-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-1/</url>
    
    <content type="html"><![CDATA[<h2 id="1、设计表结构"><a href="#1、设计表结构" class="headerlink" title="1、设计表结构"></a>1、设计表结构</h2><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/a4fa3347d1dc5fc83b2464b4eaef7a68.png" alt="image-20231125111622492"></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># models.py</span><br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot; 部门表 &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># verbose_name=&#x27;&#x27;：是用来对列字段进行备注，可写可不写</span><br>    title = models.CharField(verbose_name=<span class="hljs-string">&#x27;标题&#x27;</span>, max_length=<span class="hljs-number">32</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot; 员工表 &quot;&quot;&quot;</span><br>    name = models.CharField(verbose_name=<span class="hljs-string">&#x27;姓名&#x27;</span>, max_length=<span class="hljs-number">16</span>)<br>    password = models.CharField(verbose_name=<span class="hljs-string">&#x27;密码&#x27;</span>, max_length=<span class="hljs-number">64</span>)<br>    age = models.IntegerField(verbose_name=<span class="hljs-string">&#x27;年龄&#x27;</span>)<br>    account = models.DecimalField(verbose_name=<span class="hljs-string">&#x27;账户余额&#x27;</span>, max_digits=<span class="hljs-number">10</span>, decimal_places=<span class="hljs-number">2</span>, default=<span class="hljs-number">0</span>)<br>    creat_time = models.DateTimeField(verbose_name=<span class="hljs-string">&#x27;入职时间&#x27;</span>)<br><br>    <span class="hljs-comment"># 创建部门id是有约束的</span><br>    <span class="hljs-comment"># to 表示与哪张表关联</span><br>    <span class="hljs-comment"># to_field 表示与表中哪一列关联</span><br>    <span class="hljs-comment"># --1、如果部门表删除，1）级联删除</span><br>    depart = models.ForeignKey(to=<span class="hljs-string">&quot;Department&quot;</span>, to_field=<span class="hljs-string">&quot;id&quot;</span>, on_delete=models.CASCADE)<br>    <span class="hljs-comment"># --2) 置空</span><br>    <span class="hljs-comment"># depart = models.ForeignKey(to=&quot;Department&quot;, to_field=&quot;id&quot;, null=True,blank=True,on_delete=models.SET_NULL)</span><br>    <br>    <span class="hljs-comment"># 在django中做约束，性别</span><br>    gender_choices = (<br>        (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;男&#x27;</span>),<br>        (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;女&#x27;</span>),<br>    )<br>    gender = models.SmallIntegerField(verbose_name=<span class="hljs-string">&#x27;性别&#x27;</span>,choices=gender_choices)<br></code></pre></td></tr></table></figure><h2 id="2、在MySQL中创建数据库"><a href="#2、在MySQL中创建数据库" class="headerlink" title="2、在MySQL中创建数据库"></a>2、在MySQL中创建数据库</h2><ul><li><p>创建数据库django_learn</p></li><li><p>修改settings.py文件中DATABASES</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">DATABASES = &#123;<br>    <span class="hljs-string">&quot;default&quot;</span>: &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;django_learn&#x27;</span>,<br>        <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>        <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string">&#x27;123123&#x27;</span>,<br>        <span class="hljs-string">&#x27;HOST&#x27;</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>        <span class="hljs-string">&#x27;PORT&#x27;</span>: <span class="hljs-string">&#x27;3306&#x27;</span>,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>django命令生成表（快捷键ctrl+alt+R，然后输入一下命令）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">makemigrations<br>migrate<br></code></pre></td></tr></table></figure></li></ul><h2 id="3、部门管理"><a href="#3、部门管理" class="headerlink" title="3、部门管理"></a>3、部门管理</h2><blockquote><ul><li>先体验最原始的方法来做</li><li>Django中提供Form和ModelForm组件（方便）</li></ul></blockquote><h3 id="3-1、部门列表"><a href="#3-1、部门列表" class="headerlink" title="3.1、部门列表"></a>3.1、部门列表</h3><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/6a1a4c46eb854d4fa326088a2b19a36a.png" alt="image-20231125111637064"></p><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/ea2d89ec3459f333a5795148946808de.png" alt="image-20231125111648648"></p><ul><li><p>部门列表从数据库中取出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">depart_list</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; 部门列表 &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 去数据库中获取所有的部门列表</span><br>    data_list = models.Department.objects.<span class="hljs-built_in">all</span>()<br>    <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&quot;depart_list.html&quot;</span>, &#123;<span class="hljs-string">&quot;data_list&quot;</span>: data_list&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>          &#123;% for obj in data_list %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">th</span> &gt;</span>&#123;&#123; obj.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; obj.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-sm&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-sm&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                  <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>          &#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><p>使用for循环读取数据库的数据，并显示</p></li><li><p>新建部门页面</p><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/5237a0b89fe5306961cad2d2c04e0f83.png" alt="image-20231125111658361"></p><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/46a516efa6bb575f9fb7436eb82ae6dc.png" alt="image-20231125111708472"></p></li><li><p>添加、删除、修改部门</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">depart_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;添加部门&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;depart_add.html&quot;</span>)<br><br>    <span class="hljs-comment"># 获取用户POST提交过来的数据</span><br>    title = request.POST.get(<span class="hljs-string">&quot;title&quot;</span>)<br><br>    <span class="hljs-comment"># 保存到数据库</span><br>    models.Department.objects.create(title=title)<br>    <span class="hljs-comment"># 重定向回部门列表</span><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/depart/list/&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">depart_del</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;删除部门&quot;&quot;&quot;</span><br>    nid = request.GET.get(<span class="hljs-string">&#x27;nid&#x27;</span>)<br>    models.Department.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).delete()<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/depart/list/&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">depart_edit</span>(<span class="hljs-params">request, nid</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;修改部门&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-comment"># 根据nid，获取数据</span><br>        row_obj = models.Department.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).first()<br>        <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&quot;depart_edit.html&quot;</span>,&#123;<span class="hljs-string">&quot;row_obj&quot;</span>:row_obj&#125;)<br>    <span class="hljs-comment"># 获取数据</span><br>    title = request.POST.get(<span class="hljs-string">&quot;title&quot;</span>)<br>    <span class="hljs-comment"># 根据ID找到数据库中的数据并进行更新</span><br>    models.Department.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).update(title=title)<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/depart/list/&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-第一节-认识复杂度、对数器、二分法</title>
    <link href="/2023/11/22/%E9%A9%AC%E5%A3%AB%E5%85%B5%E7%AE%97%E6%B3%95%E4%BD%93%E7%B3%BB%E7%8F%AD/01-%E7%AC%AC%E4%B8%80%E8%8A%82-%E8%AE%A4%E8%AF%86%E5%A4%8D%E6%9D%82%E5%BA%A6%E3%80%81%E5%AF%B9%E6%95%B0%E5%99%A8%E3%80%81%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    <url>/2023/11/22/%E9%A9%AC%E5%A3%AB%E5%85%B5%E7%AE%97%E6%B3%95%E4%BD%93%E7%B3%BB%E7%8F%AD/01-%E7%AC%AC%E4%B8%80%E8%8A%82-%E8%AE%A4%E8%AF%86%E5%A4%8D%E6%9D%82%E5%BA%A6%E3%80%81%E5%AF%B9%E6%95%B0%E5%99%A8%E3%80%81%E4%BA%8C%E5%88%86%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1、认识复杂度"><a href="#1、认识复杂度" class="headerlink" title="1、认识复杂度"></a>1、认识复杂度</h2><p>等差数列求和，最终可以化成<br>$$<br>a<em>N^2+b</em>N+c<br>$$<br>因此，计算时间复杂度时，记作O(N^2)</p><h3 id="常见的常数时间操作O-1"><a href="#常见的常数时间操作O-1" class="headerlink" title="常见的常数时间操作O(1)"></a>常见的常数时间操作O(1)</h3><ul><li>常见的算术运算（+、-、*、&#x2F;、%等）</li><li>常见的位运算（&gt;&gt;、&gt;&gt;&gt;、&lt;&lt;、|、&amp;、^等）</li><li>赋值、比较、自增、自减操作</li><li>数组寻址操作</li></ul><p>计算算法的时间复杂度时，需要将算法步骤拆分到常数时间操作，再去计算。</p><p>当时间复杂度指标相同时，比较两个算法，则使用常数量去分析。可以随机生成数据直接测。</p><h2 id="2、对数器"><a href="#2、对数器" class="headerlink" title="2、对数器"></a>2、对数器</h2><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/a3e1447d698db74e90d7932446ef9bbc.png" alt="image-20231125111749845"></p><p>通过大样本，对比两种方法，如果两种方法都能通过，则算法正确</p><ul><li><p>以测试冒泡算法为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 冒泡排序,时间复杂度O(N^2)</span><br><span class="hljs-comment"># 使用对数器来验证算法</span><br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-comment"># 冒泡排序算法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bubble_sort</span>(<span class="hljs-params">alist</span>):<br>    n = <span class="hljs-built_in">len</span>(alist)<br>    <span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:<br>        newn = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>            <span class="hljs-keyword">if</span> alist[i - <span class="hljs-number">1</span>] &gt; alist[i]:<br>                alist[i - <span class="hljs-number">1</span>], alist[i] = alist[i], alist[i - <span class="hljs-number">1</span>]<br>                newn = i<br>        n = newn<br>    <span class="hljs-keyword">return</span> alist<br><br><span class="hljs-comment"># ----- 对数器 -----</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">num_test</span>(<span class="hljs-params">testTime, maxSize, maxValue</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    testTime：测试次数</span><br><span class="hljs-string">    maxSize：数据的长度</span><br><span class="hljs-string">    maxValue：数据的范围</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    succeed = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(testTime):<br>        arr1 = [random.randint(-maxValue, maxValue) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(maxSize)]<br>        arr2 = arr1.copy()<br>        arr3 = arr1.copy()<br><br>        bubble_sort(arr2)<br>        arr3.sort()<br>        <span class="hljs-keyword">if</span> arr2 != arr3:<br>            succeed = <span class="hljs-literal">False</span><br>            <span class="hljs-built_in">print</span>(arr1)<br>            <span class="hljs-built_in">print</span>(arr2)<br>            <span class="hljs-built_in">print</span>(arr3)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;succeed&quot;</span> <span class="hljs-keyword">if</span> succeed <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;failed&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    num_test(<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure></li></ul><h2 id="3、二分法"><a href="#3、二分法" class="headerlink" title="3、二分法"></a>3、二分法</h2><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/4fb29acc0a498ca57ca1e2eb65ade871.png" alt="image-20231125111801690"></p><ul><li>二分法取中位数时使用<code> mid = L+(R-L)/2</code>能防止溢出</li><li>一个数<code>N/2 = N &gt;&gt; 1</code>，位移运算比算术运算快</li></ul><blockquote><ul><li>while left &lt;&#x3D; right时：right &#x3D; mid-1# 左闭右闭区间</li><li>while left &lt; right时：right &#x3D; mid         # 左闭右开区间</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>马士兵算法体系班</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-orm数据库连接_学习day02</title>
    <link href="/2023/11/21/Django/02-orm%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/"/>
    <url>/2023/11/21/Django/02-orm%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><ul><li>Django开发中，提供ORM框架来操作数据库。ORM相当于一个翻译功能，将简单语句翻译成sql语句</li></ul><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/ffef5782606026b38b4a35be780b24b1.png" alt="image-20231125111452908"></p><h2 id="1、安装第三方模块"><a href="#1、安装第三方模块" class="headerlink" title="1、安装第三方模块"></a>1、安装第三方模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install mysqlclient<br></code></pre></td></tr></table></figure><h2 id="2、ORM"><a href="#2、ORM" class="headerlink" title="2、ORM"></a>2、ORM</h2><p>orm可以帮我们做两件事：</p><ul><li>创建、修改、删除数据库中的表（不用自己写SQL语句）。【无法创建数据库】</li><li>操作表中数据（不写SQL语句）</li></ul><h3 id="2-1、自己创建数据库"><a href="#2-1、自己创建数据库" class="headerlink" title="2.1、自己创建数据库"></a>2.1、自己创建数据库</h3><ul><li>需要自己在Navicat上创建一个数据库</li></ul><h3 id="2-3、Django连接数据库"><a href="#2-3、Django连接数据库" class="headerlink" title="2.3、Django连接数据库"></a>2.3、Django连接数据库</h3><p>在setting.py文件中进行配置和修改</p><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/4a34e80e98e5f47b4a3648ab1bd74083.png" alt="image-20231125111506361"></p><h3 id="2-4、Django操作表"><a href="#2-4、Django操作表" class="headerlink" title="2.4、Django操作表"></a>2.4、Django操作表</h3><ul><li><strong>创建表</strong></li></ul><p>1、在models.py文件中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span>(models.Model):<br>    name = models.CharField(max_length=<span class="hljs-number">32</span>)  <span class="hljs-comment"># CharField字符串型</span><br>    password = models.CharField(max_length=<span class="hljs-number">64</span>)<br>    age = models.IntegerField()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">以上创建的类，orm会将其翻译成：</span><br><span class="hljs-string">create table demo_userinfo(</span><br><span class="hljs-string">    id bigint auto_increment primary key,</span><br><span class="hljs-string">    name varchar(32),</span><br><span class="hljs-string">    password varchar(64),</span><br><span class="hljs-string">    age int</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>2、在终端执行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py makemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure><blockquote><p>注意：app需要提前注册</p></blockquote><ul><li><p>删除表</p><ul><li>如果需要删除表或删除表中的列，则只需在models.py文件中注释表对应的class类，并再次执行上述两条语句就行</li></ul></li><li><p>修改表</p><ul><li>如果删除表中的列后，还想新增一列，则需要给新增的列添加默认值</li></ul></li></ul><h3 id="2-5、操作表中的数据（增删改查）"><a href="#2-5、操作表中的数据（增删改查）" class="headerlink" title="2.5、操作表中的数据（增删改查）"></a>2.5、操作表中的数据（增删改查）</h3><ul><li><p>增加数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> demo.models <span class="hljs-keyword">import</span> UserInfo<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orm</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># ------ 1、增加数据 ------ #</span><br>    UserInfo.objects.create(name=<span class="hljs-string">&quot;小明&quot;</span>,password=<span class="hljs-string">&quot;123&quot;</span>,age=<span class="hljs-number">12</span>)<br>    UserInfo.objects.create(name=<span class="hljs-string">&quot;小红&quot;</span>, password=<span class="hljs-string">&quot;4567&quot;</span>, age=<span class="hljs-number">21</span>)<br>    UserInfo.objects.create(name=<span class="hljs-string">&quot;小黄&quot;</span>, password=<span class="hljs-string">&quot;1323&quot;</span>, age=<span class="hljs-number">32</span>)<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;操作成功&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ------ 2、删除数据 ------ #</span><br>   UserInfo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">3</span>).delete() <span class="hljs-comment"># 删除id=3的行</span><br>   UserInfo.objects.<span class="hljs-built_in">all</span>().delete() <span class="hljs-comment"># 删除表中所有数据</span><br></code></pre></td></tr></table></figure></li><li><p>查找数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ------ 3、查找数据 ------ #</span><br>   <span class="hljs-comment"># 此时data_list是 data_list = [对象，对象，对象]</span><br>   data_list = UserInfo.objects.<span class="hljs-built_in">all</span>()<br>   <span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> data_list:<br>       <span class="hljs-built_in">print</span>(obj.<span class="hljs-built_in">id</span>, obj.name, obj.password, obj.age)<br></code></pre></td></tr></table></figure></li><li><p>修改数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ------ 4、修改数据 ------ #</span><br>UserInfo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">6</span>).update(password=<span class="hljs-number">999</span>) <span class="hljs-comment"># 修改id=6的行</span><br>UserInfo.objects.<span class="hljs-built_in">all</span>().update(password=<span class="hljs-number">333</span>) <span class="hljs-comment"># 修改表中所有数据</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="3、案例：用户管理"><a href="#3、案例：用户管理" class="headerlink" title="3、案例：用户管理"></a>3、案例：用户管理</h2><h3 id="1-展示用户列表"><a href="#1-展示用户列表" class="headerlink" title="1.展示用户列表"></a>1.展示用户列表</h3><ul><li>创建url</li><li>创建函数<ul><li>获取所有数据库的用户信息，用一个列表存储</li><li>使用html渲染</li></ul></li></ul><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/1d920cb48e006bea50e076c373ebc19c.png" alt="image-20231125111520767"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>用户列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        &#123;% for obj in data_list %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; obj.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; obj.password &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; obj.age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        &#123;% endfor %&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/c077fb1f47233d4cf885fb117c6aa2ee.png" alt="image-20231125111533618"></p><h3 id="2-添加用户"><a href="#2-添加用户" class="headerlink" title="2.添加用户"></a>2.添加用户</h3><ul><li>URL</li><li>函数<ul><li>get请求，看到页面，输入内容</li><li>post，提交–&gt;写入到数据库</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">info_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;info_add.html&quot;</span>)<br><br>    <span class="hljs-comment"># 获取用户提交的数据</span><br>    user = request.POST.get(<span class="hljs-string">&quot;user&quot;</span>)<br>    pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>    age = request.POST.get(<span class="hljs-string">&quot;age&quot;</span>)<br><br>    <span class="hljs-comment"># 添加到数据库</span><br>    UserInfo.objects.create(name=user,password=pwd,age=age)<br><br>    <span class="hljs-comment"># 重定向自动跳转到列表查看页面</span><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/info/list/&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-删除用户"><a href="#3-删除用户" class="headerlink" title="3.删除用户"></a>3.删除用户</h3><ul><li>URL</li><li>函数</li></ul><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/aee803df1398e88af1d2a11cbdab9a4a.png" alt="image-20231125111547924"></p><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/6deea7551e75c8455ee7b8c1ba8b8921.png" alt="image-20231125111558552"></p>]]></content>
    
    
    <categories>
      
      <category>Django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01.django_学习day01</title>
    <link href="/2023/11/20/Django/01-django%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/"/>
    <url>/2023/11/20/Django/01-django%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="第一个Django项目"><a href="#第一个Django项目" class="headerlink" title="第一个Django项目"></a>第一个Django项目</h1><p>pycharm创建一个Django项目，项目文件目录如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 1c">day01/ <span class="hljs-meta"># 根目录</span><br>    manage.py <span class="hljs-meta"># Django命令行工具</span><br>    day01/ <span class="hljs-meta"># 项目配置目录</span><br>        __init__.py <span class="hljs-meta"># 空文件，告诉python这个目录是python包</span><br>        settings.py <span class="hljs-meta"># 项目配置文件</span><br>        urls.py <span class="hljs-meta"># 项目所有urls声明汇总</span><br>        asgi.py <span class="hljs-meta"># ASGI服务器的入口文件</span><br>        wsgi.py <span class="hljs-meta"># WSGI服务器的入口文件</span><br></code></pre></td></tr></table></figure><ul><li>pycharm创建项目会默认穿件一个templates文件夹【需要删除】</li><li>在settings.py中【删除】“DIRS”:[<strong>os.path.join(BASE_DIR, ‘templates’)</strong>] ——&gt; “DIRS”:[]</li></ul><h3 id="1、终端运行"><a href="#1、终端运行" class="headerlink" title="1、终端运行"></a>1、终端运行</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">python manage.py runserver<br></code></pre></td></tr></table></figure><p><strong>更换端口：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">python manage.py runserver <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><h3 id="2、创建应用APP"><a href="#2、创建应用APP" class="headerlink" title="2、创建应用APP"></a>2、创建应用APP</h3><p>**1-**在manage.py同级目录下创建新应用：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">python manage.py startapp demo<br></code></pre></td></tr></table></figure><p>这将会创建一个 <code>demo</code> 目录，它的目录结构大致如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">demo/<br>    __init__<span class="hljs-selector-class">.py</span><br>    admin<span class="hljs-selector-class">.py</span>【固定不用动】Django默认提供了admin后台管理<br>    apps<span class="hljs-selector-class">.py</span>【固定不用动】app启动类<br>    migrations/【固定不用动】数据库变更记录<br>        __init__<span class="hljs-selector-class">.py</span><br>    models<span class="hljs-selector-class">.py</span>【重要】 对数据库操作<br>    tests<span class="hljs-selector-class">.py</span>【固定不用动】单元测试的<br>    views<span class="hljs-selector-class">.py</span>【重要】 视图函数<br></code></pre></td></tr></table></figure><p>**2-**在项目配置文件<code>day01\settings.py</code>的INSTALLED_APPS中加入demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED_APPS = [<br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class="hljs-string">&#x27;demo&#x27;</span>, <span class="hljs-comment"># 注册app</span><br>]<br></code></pre></td></tr></table></figure><p>**3-**然后编辑<code>day01/urls.py</code>, 把demo应用的urls也加入到项目的urls中去，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, include(<span class="hljs-string">&#x27;demo.urls&#x27;</span>)) <span class="hljs-comment"># 加入app对应urls</span><br>]<br></code></pre></td></tr></table></figure><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/0ed0a90f317ce3414fb267cb95ebb03e.png" alt="image-20231125111220152"></p><h3 id="3、编写视图函数和URL配置"><a href="#3、编写视图函数和URL配置" class="headerlink" title="3、编写视图函数和URL配置"></a>3、编写视图函数和URL配置</h3><p>**1-**编辑<code>demo/views.py</code>, 新增一个名为index的视图函数。每个视图函数的第一个默认参数都必需是<code>request</code>, 它是一个全局变量。Django把每个用户请求封装成了<code>request</code>对象，它包含里当前请求的所有信息，比如请求路径<code>request.path</code>, 当前用户<code>request.user</code>以及用户通过POST提交的数据<code>request.POST</code>。</p><p>index视图函数通过调用<code>HttpReponse</code>方法打印输出当前的请求路径<code>request.path</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># demo/views.py</span><br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;Hello, world. You&#x27;re at the polls index.&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/111183de1ef9b8c15feb3275e611de53.png" alt="image-20231125111251024"></p><p>**2-**使用<code> python manage.py runserver</code>重启服务器，打开<a href="http://127.0.0.1:8000/index/%E4%BC%9A%E6%98%BE%E7%A4%BA%22Hello">http://127.0.0.1:8000/index/会显示&quot;Hello</a>, world. You’re at the polls index.”</p><h3 id="4、templates模板"><a href="#4、templates模板" class="headerlink" title="4、templates模板"></a>4、templates模板</h3><p>返回html页面需要使用render</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 默认去当前目录下的templates文件夹中寻找对应html文件（根据app注册顺序找 ）</span><br>  <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&quot;XXX.html&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="5、静态文件"><a href="#5、静态文件" class="headerlink" title="5、静态文件"></a>5、静态文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs -">-static<br>-css【存放CSS样式】<br>-img 【存放图片】<br>-js【存放js样式】<br></code></pre></td></tr></table></figure><h4 id="加载静态文件"><a href="#加载静态文件" class="headerlink" title="加载静态文件"></a>加载静态文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># req.html</span><br>&#123;% load static %&#125;<span class="hljs-comment"># 加载</span><br></code></pre></td></tr></table></figure><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/3ba96803347cf5df2e05b1b23d0c8ff0.png" alt="image-20231125111307220"></p><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="1、列表"><a href="#1、列表" class="headerlink" title="1、列表"></a>1、列表</h3><p>在render中添加一个字典，引入变量。读取列表，需要通过. 去索引</p><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/a5fa89a8061793175d580aedcbddf690.png" alt="image-20231125111321633"></p><h3 id="2、for语法，进行循环读取"><a href="#2、for语法，进行循环读取" class="headerlink" title="2、for语法，进行循环读取"></a>2、for语法，进行循环读取</h3><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/c2714f132a6986d01611bcf17a3c73f0.png" alt="image-20231125111334406"></p><h3 id="3、读取字典"><a href="#3、读取字典" class="headerlink" title="3、读取字典"></a><strong>3、读取字典</strong></h3><ul><li>可以根据字典的键去获取值：、</li><li>或者for循环键</li></ul><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/47391dfe42c3f19bfc79c97ed346ccf1.png" alt="image-20231125111347768" style="zoom:80%;" /><h3 id="4、判断语句if"><a href="#4、判断语句if" class="headerlink" title="4、判断语句if"></a>4、判断语句if</h3><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/cca97c2b2b79461d8a488bb2dc103612.png" alt="image-20231125111406361"></p><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/5b036a98668e22d2ba889f988db71030.png" alt="image-20231125111418788"></p><h2 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h2><p><strong>响应方式：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;返回请求&quot;</span>)<span class="hljs-comment"># 将字符串内容返回给请求者</span><br><span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;xxx.html&#x27;</span>,&#123;<span class="hljs-string">&quot;n1&quot;</span>:name&#125;)<span class="hljs-comment">#读取html的内容+渲染(替换)--&gt;字符串，返回给用户浏览器</span><br><br><span class="hljs-comment"># 重定向</span><br><span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml">避免Django表单提交出现错误，需要在form中加入语句 &quot;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">csrf_token</span></span> %&#125;</span><span class="language-xml">&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/e90dc87864c3c11857ce3e89cf710106.png" alt="image-20231125111433051"></p>]]></content>
    
    
    <categories>
      
      <category>Django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01.金蝶_一面_面经</title>
    <link href="/2023/11/02/%E9%9D%A2%E7%BB%8F/01.%E9%87%91%E8%9D%B6_%E4%B8%80%E9%9D%A2_%E9%9D%A2%E7%BB%8F/"/>
    <url>/2023/11/02/%E9%9D%A2%E7%BB%8F/01.%E9%87%91%E8%9D%B6_%E4%B8%80%E9%9D%A2_%E9%9D%A2%E7%BB%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="一面-10-17"><a href="#一面-10-17" class="headerlink" title="一面 10.17"></a>一面 10.17</h1><ul><li>对金蝶的了解多少？做哪些业务？</li><li>你和这个岗位的匹配度如何？你有哪些优势和缺点？</li><li>你觉得如果我们招聘你的话，你会给我们公司带来什么？</li><li>在校期间最有成就的事情</li><li>未来五年的规划</li></ul>]]></content>
    
    
    <categories>
      
      <category>秋招面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03.星星充电_一面_面经</title>
    <link href="/2023/11/02/%E9%9D%A2%E7%BB%8F/03.%E6%98%9F%E6%98%9F%E5%85%85%E7%94%B5_%E4%B8%80%E9%9D%A2_%E9%9D%A2%E7%BB%8F/"/>
    <url>/2023/11/02/%E9%9D%A2%E7%BB%8F/03.%E6%98%9F%E6%98%9F%E5%85%85%E7%94%B5_%E4%B8%80%E9%9D%A2_%E9%9D%A2%E7%BB%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="一面-10-30-（32min）"><a href="#一面-10-30-（32min）" class="headerlink" title="一面 10.30 （32min）"></a>一面 10.30 （32min）</h1><ul><li>自我介绍</li><li>介绍一下项目</li><li>怎么理解selenium web driver</li><li>那假如我要实现一个场景，用我的一个脚本，然后实现对不同的一些页面的一个兼容性验证。要用到不同版本的浏览器，比方说Chrome、火狐，还有 re ，或者是其他的浏览器，这种你觉得应该怎样去实现?（答：使用selenium grid分布式执行操作）</li><li>解释一下装饰器，它与函数的区别</li><li>解释一下什么是JSON，JSON返回的元素是有序的还是无序的</li><li>假如我现在要做两个JSON 文件的对比，一个老接口的 API输出的结果，一个新接口的输出，我想要对比这两个结果字段有没有差异，我该怎么做?</li><li>TCP、UDP介绍，区别，使用场景</li><li>get请求和post请求的区别</li><li>Linux：查看占用8080端口的进程，并结束该进程</li><li>锁的特点和机制</li><li>什么是协程？有什么特点？</li><li>对公司的了解</li><li>对常州有什么印象</li><li>你个人最大的优势？</li><li>从测试的角度看，如何保证课题的运行结果是满足要求的</li><li>课题有遇到什么难点吗</li></ul><p>反问：</p><ul><li>软测在公司负责的内容大概是什么</li><li>自动化占比？（答：自动化混合在业务中，都会有涉及，没有专门的自动化）</li></ul>]]></content>
    
    
    <categories>
      
      <category>秋招面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04.力维_一面+二面</title>
    <link href="/2023/11/02/%E9%9D%A2%E7%BB%8F/04.%E5%8A%9B%E7%BB%B4_%E4%B8%80%E9%9D%A2+%E4%BA%8C%E9%9D%A2/"/>
    <url>/2023/11/02/%E9%9D%A2%E7%BB%8F/04.%E5%8A%9B%E7%BB%B4_%E4%B8%80%E9%9D%A2+%E4%BA%8C%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="一面-10-31-（21min）"><a href="#一面-10-31-（21min）" class="headerlink" title="一面 10.31 （21min）"></a>一面 10.31 （21min）</h1><ul><li>自我介绍</li><li>说一下整个产品生命周期，软件测试在哪些节点做哪些事</li><li>测试的目的</li><li>白盒测试和黑盒测试的区别</li><li>登录界面，设计测试用例</li><li>测试用例包括哪些内容</li><li>postman如何做接口测试</li><li>接口鉴权token在postman中如何处理</li><li>抓包工具怎么使用（fiddler）</li><li>selenium使用哪些元素定位方法</li><li>下拉菜单的元素如何获取</li><li>Linux的常用命令，文件授权命令，vim保存命令</li><li>TCP、UDP的区别</li><li>OSI模型和TCP&#x2F;IP模型的区别</li><li>MySQL中索引的定义，优缺点</li><li>MySQL删除表中数据的命令（delete from 表名 where 条件、truncate table 表名）</li><li>什么是左连接、右连接</li><li>python：字符串拆分（split）、字符串转化成大小写（upper、lower），正则表达式了解吗（不了解）</li><li>字典是什么</li></ul><h1 id="二面-11-1-（23min）"><a href="#二面-11-1-（23min）" class="headerlink" title="二面 11.1 （23min）"></a>二面 11.1 （23min）</h1><ul><li>自我介绍</li><li>研究生目前做的是什么样的工作（人工智能交叉方向）</li><li>你的研究方向好像和测试方向是两个不同的方向，你为什么选择去做测试</li><li>手头有offer吗</li><li>研究生课题是几个人负责？主要分工咋样</li><li>测试流程</li><li>测试项目介绍</li><li>数据库有用过吗</li><li>对公司的了解</li><li>做项目过程中遇到的障碍，如何攻克的</li><li>在校期间是否担任过一些职位或参加过社团活动</li><li>平时业余时间喜欢做什么工作</li><li>对于毕业后的第一份工作，你最看重什么</li><li>代码量如何</li><li>明年三四月能否实习</li></ul><p>反问：</p><p>公司中自动化测试的比例？</p>]]></content>
    
    
    <categories>
      
      <category>秋招面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05.TCL格创_一面</title>
    <link href="/2023/11/02/%E9%9D%A2%E7%BB%8F/05.TCL%E6%A0%BC%E5%88%9B_%E4%B8%80%E9%9D%A2/"/>
    <url>/2023/11/02/%E9%9D%A2%E7%BB%8F/05.TCL%E6%A0%BC%E5%88%9B_%E4%B8%80%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="一面-11-1-（25min）"><a href="#一面-11-1-（25min）" class="headerlink" title="一面 11.1 （25min）"></a>一面 11.1 （25min）</h1><ul><li><p>自我介绍</p></li><li><p>项目介绍</p></li><li><p>购物车测试用例设计</p></li><li><p>有做过性能测试吗</p></li><li><p>数据库去重的命令（distinct、group by）</p></li><li><p>模糊匹配的语句包括（%，_）</p><ul><li>%代表任意多个字符</li><li>_代表任意一个字符</li></ul></li><li><p>浏览器键入网站后经历了哪些步骤</p></li><li><p>OSI七层模型有哪些组成</p></li><li><p><strong>链表、栈、哈希表他们的特性以及应用场景</strong></p></li><li><p><strong>索引类型、使用的存储结构（B+树）</strong></p></li><li><p>测试的基本流程</p></li><li><p>在回归测试中，如何进行测试保证问题已经解决并且不会引发其他代码问题或业务功能问题？</p></li><li><p>有做过购物车下单并发测试吗</p></li><li><p>postman压测有做过吗</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>秋招面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>06.宇视科技_一面</title>
    <link href="/2023/11/02/%E9%9D%A2%E7%BB%8F/06.%E5%AE%87%E8%A7%86%E7%A7%91%E6%8A%80_%E4%B8%80%E9%9D%A2/"/>
    <url>/2023/11/02/%E9%9D%A2%E7%BB%8F/06.%E5%AE%87%E8%A7%86%E7%A7%91%E6%8A%80_%E4%B8%80%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="一面-11-1（16min）"><a href="#一面-11-1（16min）" class="headerlink" title="一面 11.1（16min）"></a>一面 11.1（16min）</h1><ul><li>自我介绍</li><li>对测试的理解</li><li>你做测试的优势</li><li>TCP、UDP的使用场景</li><li>Linux常用命令、防火墙了解么、统计一个服务器的网口流量用什么命令</li><li>测试用例包括哪些内容</li><li>项目介绍</li><li>自动化测试的优缺点，什么情况下自动化测试是必要的？<ul><li>必要性：回归测试和版本迭代时，老的功能可以通过自动化去检验一下</li></ul></li></ul><p>反问：</p><p>公司自动化测试的比例：公司里手工测试和自动化测试是分开的，会有专门的组做自动化测试</p>]]></content>
    
    
    <categories>
      
      <category>秋招面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02.同程旅行_一面_面经</title>
    <link href="/2023/11/01/%E9%9D%A2%E7%BB%8F/02.%E5%90%8C%E7%A8%8B%E6%97%85%E8%A1%8C_%E4%B8%80%E9%9D%A2_%E9%9D%A2%E7%BB%8F/"/>
    <url>/2023/11/01/%E9%9D%A2%E7%BB%8F/02.%E5%90%8C%E7%A8%8B%E6%97%85%E8%A1%8C_%E4%B8%80%E9%9D%A2_%E9%9D%A2%E7%BB%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="一面-10-24-48min"><a href="#一面-10-24-48min" class="headerlink" title="一面 10.24 (48min)"></a>一面 10.24 (48min)</h1><ul><li><p>对于软件测试的了解</p></li><li><p>质量保障(QA)和软件测试有什么区别没有？</p><ul><li><p><strong>一、软件测试是一个过程，而软件质量保证是一个方法论。</strong></p><p>软件测试是通过执行软件的各种测试活动来检测和发现软件缺陷，例如单元测试、集成测试、系统测试等等。软件质量保障是一种方法论，它涉及管理、规划、监督和控制软件开发过程的各个方面，以确保软件产品的质量。</p></li><li><p><strong>二、软件测试着眼于软件产品的缺陷，而软件质量保证则关注软件产品的质量。</strong></p><p>软件测试是针对软件中的缺陷和错误进行的活动，例如逻辑错误、设计问题、性能问题等。软件质量保证是确保软件产品符合质量标准和用户需求的过程，包括软件设计、开发、测试、部署和维护。</p></li><li><p><strong>三、软件测试是一项技术任务，而软件质量保证是一项管理任务。</strong></p><p>软件测试需要技术人员使用各种测试工具和技术来发现和修复软件缺陷。</p><p>而软件质量保证需要管理人员制定和执行质量计划、制定和实施质量标准、指导和培训开发人员等。</p></li></ul></li><li><p>软件开发的一个整体流程</p></li><li><p>测试用例包含哪几项</p></li><li><p>购物车，测试用例</p></li><li><p>fiddler抓包原理</p></li><li><p>fiddler是否可以抓包安卓的https请求？（不可以的）</p></li><li><p>python：一个列表中嵌套字典，字典中包含名字和分数，现在需要按照分数对该列表进行排序，该怎么实现</p></li><li><p>装饰器是什么</p></li><li><p>map(), filter()和reduce()</p></li><li><p>PO模式的实现</p></li><li><p>Selenium的元素定位方法</p></li><li><p>查询所有科目成绩大于60分的学生姓名</p><ul><li><strong>select name from test_a group by name having min(scores)&gt;60;</strong></li></ul></li><li><p>http协议报文、请求方式、响应状态码</p></li><li><p>http头有哪些常见字段</p></li><li><p>接口测试测试用例从哪些方面考虑，例如登录接口的测试用例如何编写</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>秋招面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-二叉树</title>
    <link href="/2023/09/17/%E7%AE%97%E6%B3%95/01-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2023/09/17/%E7%AE%97%E6%B3%95/01-%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>结点：树中的元素，包含一个数据元素及若干指向子树的分支<br />结点的度：结点拥有的子树数量<br /></p><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/d7b34fd25025a8458071b3bc9c156093.png" alt="image"><a name="A7udv"></a></p><h2 id="1、什么是二叉树？"><a href="#1、什么是二叉树？" class="headerlink" title="1、什么是二叉树？"></a>1、什么是二叉树？</h2><p><strong>定义：二叉树是每个结点最多有两个子树的树结构</strong><br /><strong>应用：</strong>1、window和linux等文件管理系统都是树型结构<br />    2、二叉树的中序遍历形式被用来存放C 语言中的表达式<br />    3、二叉排序树被用于数据的排序和快速查找。<br />    4、霍夫曼编码</p><ul><li>结点：树中的元素，包含一个数据元素及若干指向子树的分支</li><li>结点的度：结点拥有的子树数量</li><li>叶子结点就是度为0的结点</li><li><strong>二叉树的高度：</strong>指从根节点到叶子节点的最长路径上的节点数</li><li><strong>二叉树的某节点深度：</strong>指从根节点到该节点的最长路径上的节点数<br><a name="Iw6Qt"></a></li></ul><h3 id="1-1-满二叉树"><a href="#1-1-满二叉树" class="headerlink" title="1.1 满二叉树"></a>1.1 满二叉树</h3><p>如果一棵二叉树只有度为0的结点和度为2的结点，并且度为0的结点在同一层上，则这棵二叉树为满二叉树。<strong>也可以说深度为k，有2^k-1个节点的二叉树。</strong><br><a name="LnZrX"></a></p><h3 id="1-2-完全二叉树"><a href="#1-2-完全二叉树" class="headerlink" title="1.2 完全二叉树"></a>1.2 完全二叉树</h3><p>在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。<strong>特点</strong>：所有子节点都出现在第k层或k-1层。<br><a name="BKOmj"></a></p><h3 id="1-3-二叉搜索树"><a href="#1-3-二叉搜索树" class="headerlink" title="1.3 二叉搜索树"></a>1.3 二叉搜索树</h3><p>二叉搜索树是一个有序树</p><ul><li>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li><li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li><li>它的左、右子树也分别为二叉排序树<br><a name="xaBDA"></a></li></ul><h3 id="1-4-平衡二叉搜索树"><a href="#1-4-平衡二叉搜索树" class="headerlink" title="1.4 平衡二叉搜索树"></a>1.4 平衡二叉搜索树</h3><p>又称AVL树。具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p><ul><li><strong>C++中map、set、multimap，multiset的底层实现都是平衡二叉搜索树</strong>，所以map、set的增删操作时间时间复杂度是logn<br><a name="QGY4k"></a></li></ul><h3 id="1-5-代码定义树节点"><a href="#1-5-代码定义树节点" class="headerlink" title="1.5 代码定义树节点"></a>1.5 代码定义树节点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.left = left<br>        self.right = right<br></code></pre></td></tr></table></figure><p><a name="jR37Y"></a></p><h2 id="2、二叉树遍历"><a href="#2、二叉树遍历" class="headerlink" title="2、二叉树遍历"></a>2、二叉树遍历</h2><p>二叉树主要有两种遍历方式：</p><ol><li><strong>深度优先遍历</strong>：先往深走，遇到叶子节点再往回走。</li><li><strong>广度优先遍历</strong>：一层一层的去遍历。</li></ol><ul><li>深度优先遍历<ul><li>前序遍历（递归法，迭代法）</li><li>中序遍历（递归法，迭代法）</li><li>后序遍历（递归法，迭代法）</li></ul></li><li>广度优先遍历<ul><li>层次遍历（迭代法）<br> <a name="LA7Uv"></a></li></ul></li></ul><h3 id="2-1-递归遍历"><a href="#2-1-递归遍历" class="headerlink" title="2.1 递归遍历"></a>2.1 递归遍历</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.left = left<br>        self.right = right<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br><br>    <span class="hljs-comment"># 前序遍历</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">preorderTraversal</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:    <span class="hljs-comment"># 根节点为空就返回空列表，不用再遍历下去了。</span><br>            <span class="hljs-keyword">return</span> []<br>        left = self.preorderTraversal(root.left)<br>        right = self.preorderTraversal(root.right)<br>        <span class="hljs-keyword">return</span> [root.val] + left + right<br><br>    <span class="hljs-comment"># 中序遍历</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inorderTraversal</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []<br>        left = self.inorderTraversal(root.left)<br>        right = self.inorderTraversal(root.right)<br>        <span class="hljs-keyword">return</span> left + [root.val] + right<br><br>    <span class="hljs-comment"># 后序遍历</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">postorderTraversal</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []<br>        left = self.postorderTraversal(root.left)<br>        right = self.postorderTraversal(root.right)<br>        <span class="hljs-keyword">return</span> left + right + [root.val]<br><br></code></pre></td></tr></table></figure><p><a name="se6AH"></a></p><h3 id="2-2-非递归遍历"><a href="#2-2-非递归遍历" class="headerlink" title="2.2 非递归遍历"></a>2.2 非递归遍历</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    统一格式的非递归写法</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 前序遍历：中左右，那么代码顺序是右左中</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">preorderTraversal</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []<br>        stack = [root]<br>        result = []<br>        <span class="hljs-keyword">while</span> stack:<br>            node = stack.pop()<br>            <span class="hljs-keyword">if</span> node != <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">if</span> node.right:  <span class="hljs-comment"># 右</span><br>                    stack.append(node.right)<br>                <span class="hljs-keyword">if</span> node.left:   <span class="hljs-comment"># 左</span><br>                    stack.append(node.left)<br>                stack.append(node)  <span class="hljs-comment"># 中</span><br>                stack.append(<span class="hljs-literal">None</span>)<br>            <span class="hljs-keyword">else</span>:<br>                node = stack.pop()<br>                result.append(node.val)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-comment"># 中序遍历：左中右，那么代码顶序是右中左</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inorderTraversal</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []<br>        stack = [root]<br>        result = []<br>        <span class="hljs-keyword">while</span> stack:<br>            node = stack.pop()<br>            <span class="hljs-keyword">if</span> node != <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">if</span> node.right:  <span class="hljs-comment"># 右</span><br>                    stack.append(node.right)<br>                stack.append(node)  <span class="hljs-comment"># 中</span><br>                stack.append(<span class="hljs-literal">None</span>)<br>                <span class="hljs-keyword">if</span> node.left:   <span class="hljs-comment"># 左</span><br>                    stack.append(node.left)<br><br>            <span class="hljs-keyword">else</span>:<br>                node = stack.pop()<br>                result.append(node.val)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-comment">#  后序遍历：左右中，那么代码顶序是中右左</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inorderTraversal</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []<br>        stack = [root]<br>        result = []<br>        <span class="hljs-keyword">while</span> stack:<br>            node = stack.pop()<br>            <span class="hljs-keyword">if</span> node != <span class="hljs-literal">None</span>:<br>                stack.append(node)  <span class="hljs-comment"># 中</span><br>                stack.append(<span class="hljs-literal">None</span>)<br>                <span class="hljs-keyword">if</span> node.right:  <span class="hljs-comment"># 右</span><br>                    stack.append(node.right)<br>                <span class="hljs-keyword">if</span> node.left:   <span class="hljs-comment"># 左</span><br>                    stack.append(node.left)<br>            <span class="hljs-keyword">else</span>:<br>                node = stack.pop()<br>                result.append(node.val)<br>        <span class="hljs-keyword">return</span> result          <br></code></pre></td></tr></table></figure><p><a name="pHizx"></a></p><h3 id="2-3-102-层序遍历"><a href="#2-3-102-层序遍历" class="headerlink" title="2.3  102 层序遍历"></a>2.3  102 层序遍历</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> collections<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.left = left<br>        self.right = right<br><br><span class="hljs-comment"># 利用队列法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">levelOrder</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:    <span class="hljs-comment"># 判断根节点是否为空</span><br>            <span class="hljs-keyword">return</span> []<br>        queue = collections.deque([root])   <span class="hljs-comment"># 引入队列</span><br>        result = []<br>        <span class="hljs-keyword">while</span> queue:<br>            level = []<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(queue)):<br>                node = queue.popleft()  <span class="hljs-comment"># 从队列左端删除</span><br>                level.append(node.val)<br>                <span class="hljs-keyword">if</span> node.left:<br>                    queue.append(node.left)<br>                <span class="hljs-keyword">if</span> node.right:<br>                    queue.append(node.right)<br>            result.append(level)<br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p><a name="iqNY4"></a></p><h3 id="2-4-算法题"><a href="#2-4-算法题" class="headerlink" title="2.4 算法题"></a>2.4 算法题</h3><p><a name="c3vfT"></a></p><h4 id="107-二叉树的层序遍历II"><a href="#107-二叉树的层序遍历II" class="headerlink" title="107.二叉树的层序遍历II"></a>107.二叉树的层序遍历II</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将层序遍历的结果倒序输出</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">levelOrderBottom</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []     <br>        queue = collections.deque([root])<br>        result = []<br><br>        <span class="hljs-keyword">while</span> queue:<br>            level = [] <span class="hljs-comment"># 记录每一层</span><br>            n = <span class="hljs-built_in">len</span>(queue)<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                node = queue.popleft()<br>                level.append(node.val)<br>                <span class="hljs-keyword">if</span> node.left:<br>                    queue.append(node.left)<br>                <span class="hljs-keyword">if</span> node.right:<br>                    queue.append(node.right)<br>            result.append(level)<br>        <span class="hljs-keyword">return</span> result[::-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p><a name="iogrB"></a></p><h4 id="199-二叉树的右视图"><a href="#199-二叉树的右视图" class="headerlink" title="199.二叉树的右视图"></a><a href="https://leetcode.cn/problems/binary-tree-right-side-view/">199.二叉树的右视图</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rightSideView</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []<br>        queue = collections.deque([root])<br>        result = []<br>        <span class="hljs-keyword">while</span> queue:<br>            level = []<br>            n = <span class="hljs-built_in">len</span>(queue)<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                node = queue.popleft()<br>                level.append(node.val)<br>                <span class="hljs-keyword">if</span> node.left:<br>                    queue.append(node.left)<br>                <span class="hljs-keyword">if</span> node.right:<br>                    queue.append(node.right)<br>            result.append(level[-<span class="hljs-number">1</span>])<span class="hljs-comment"># 将每一层的最后一位数添加到列表中</span><br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p><a name="PwPJO"></a></p><h4 id="637-二叉树的层平均值"><a href="#637-二叉树的层平均值" class="headerlink" title="637.二叉树的层平均值"></a><a href="https://leetcode.cn/problems/average-of-levels-in-binary-tree/">637.二叉树的层平均值</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">averageOfLevels</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">float</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []<br>        <br>        queue = collections.deque([root])<br>        result = []<br>        <span class="hljs-keyword">while</span> queue:<br>            level = <span class="hljs-number">0</span><br>            n = <span class="hljs-built_in">len</span>(queue)<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                node = queue.popleft()<br>                level += node.val<br><br>                <span class="hljs-keyword">if</span> node.left:<br>                    queue.append(node.left)<br>                <span class="hljs-keyword">if</span> node.right:<br>                    queue.append(node.right)          <br>            result.append(level/n)<br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p><a name="vjy3r"></a></p><h4 id="429-N-叉树的层序遍历"><a href="#429-N-叉树的层序遍历" class="headerlink" title="429.N 叉树的层序遍历"></a><a href="https://leetcode.cn/problems/n-ary-tree-level-order-traversal/">429.N 叉树的层序遍历</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-literal">None</span>, children=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.children = children<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">levelOrder</span>(<span class="hljs-params">self, root: <span class="hljs-string">&#x27;Node&#x27;</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []<br>        queue = collections.deque([root])<br>        result = []<br><br>        <span class="hljs-keyword">while</span> queue:<br>            level = []<br>            n = <span class="hljs-built_in">len</span>(queue)<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                node = queue.popleft()<br>                level.append(node.val)<br>                <span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> node.children:<br>                    queue.append(child)<br><br>            result.append(level)<br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p><a name="vPYE6"></a></p><h4 id="515-在每个树行中找最大值"><a href="#515-在每个树行中找最大值" class="headerlink" title="515.在每个树行中找最大值"></a><a href="https://leetcode.cn/problems/find-largest-value-in-each-tree-row/">515.在每个树行中找最大值</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">largestValues</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []<br>        queue = collections.deque([root])<br>        ans = []<br>        <span class="hljs-keyword">while</span> queue:<br>            level = []<br>            n = <span class="hljs-built_in">len</span>(queue)<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                node = queue.popleft()<br>                level.append(node.val)<br>                <span class="hljs-keyword">if</span> node.left:<br>                    queue.append(node.left)<br>                <span class="hljs-keyword">if</span> node.right:<br>                    queue.append(node.right)<br>            ans.append(<span class="hljs-built_in">max</span>(level))<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/"><strong>104.二叉树的最大深度</strong></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxDepth</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        queue = collections.deque([root])<br>        ans = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> queue:<br>            ans += <span class="hljs-number">1</span><br>            n = <span class="hljs-built_in">len</span>(queue)<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                node = queue.popleft()<br>                <span class="hljs-keyword">if</span> node.left:<br>                    queue.append(node.left)<br>                    <br>                <span class="hljs-keyword">if</span> node.right:<br>                    queue.append(node.right) <br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxDepth</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        left = self.maxDepth(node.left)<br>        right = self.maxDepth(node.right)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(left,right) + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>需要收集孩子节点的信息返回给上一层时，再用后续遍历</p>]]></content>
    
    
    <categories>
      
      <category>力扣刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
