<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>01.django_学习day01</title>
    <url>/2023/11/20/Python/Django/01-django%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="第一个Django项目"><a href="#第一个Django项目" class="headerlink" title="第一个Django项目"></a>第一个Django项目</h1><p>pycharm创建一个Django项目，项目文件目录如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">day01/ # 根目录</span><br><span class="line">    manage.py 		# Django命令行工具</span><br><span class="line">    day01/ 			# 项目配置目录</span><br><span class="line">        __init__.py # 空文件，告诉python这个目录是python包</span><br><span class="line">        settings.py # 项目配置文件</span><br><span class="line">        urls.py 	# 项目所有urls声明汇总</span><br><span class="line">        asgi.py 	# ASGI服务器的入口文件</span><br><span class="line">        wsgi.py 	# WSGI服务器的入口文件</span><br></pre></td></tr></table></figure>

<ul>
<li>pycharm创建项目会默认穿件一个templates文件夹【需要删除】</li>
<li>在settings.py中【删除】“DIRS”:[<strong>os.path.join(BASE_DIR, ‘templates’)</strong>] ——&gt; “DIRS”:[]</li>
</ul>
<h3 id="1、终端运行"><a href="#1、终端运行" class="headerlink" title="1、终端运行"></a>1、终端运行</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>

<p><strong>更换端口：</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">python manage.py runserver <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<h3 id="2、创建应用APP"><a href="#2、创建应用APP" class="headerlink" title="2、创建应用APP"></a>2、创建应用APP</h3><p>**1-**在manage.py同级目录下创建新应用：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">python manage.py startapp demo</span><br></pre></td></tr></table></figure>

<p>这将会创建一个 <code>demo</code> 目录，它的目录结构大致如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">demo/</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py		【固定不用动】Django默认提供了admin后台管理</span><br><span class="line">    apps.py			【固定不用动】app启动类</span><br><span class="line">    migrations/		【固定不用动】数据库变更记录</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py		【重要】 对数据库操作</span><br><span class="line">    tests.py		【固定不用动】单元测试的</span><br><span class="line">    views.py		【重要】 视图函数</span><br></pre></td></tr></table></figure>

<p>**2-**在项目配置文件<code>day01\settings.py</code>的INSTALLED_APPS中加入demo</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;demo&#x27;</span>, <span class="comment"># 注册app</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>**3-**然后编辑<code>day01/urls.py</code>, 把demo应用的urls也加入到项目的urls中去，如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;demo.urls&#x27;</span>)) <span class="comment"># 加入app对应urls</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/0ed0a90f317ce3414fb267cb95ebb03e.png" alt="image-20231125111220152"></p>
<h3 id="3、编写视图函数和URL配置"><a href="#3、编写视图函数和URL配置" class="headerlink" title="3、编写视图函数和URL配置"></a>3、编写视图函数和URL配置</h3><p>**1-**编辑<code>demo/views.py</code>, 新增一个名为index的视图函数。每个视图函数的第一个默认参数都必需是<code>request</code>, 它是一个全局变量。Django把每个用户请求封装成了<code>request</code>对象，它包含里当前请求的所有信息，比如请求路径<code>request.path</code>, 当前用户<code>request.user</code>以及用户通过POST提交的数据<code>request.POST</code>。</p>
<p>index视图函数通过调用<code>HttpReponse</code>方法打印输出当前的请求路径<code>request.path</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># demo/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello, world. You&#x27;re at the polls index.&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/111183de1ef9b8c15feb3275e611de53.png" alt="image-20231125111251024"></p>
<p>**2-**使用<code> python manage.py runserver</code>重启服务器，打开<a href="http://127.0.0.1:8000/index/%E4%BC%9A%E6%98%BE%E7%A4%BA%22Hello">http://127.0.0.1:8000/index/会显示&quot;Hello</a>, world. You’re at the polls index.”</p>
<h3 id="4、templates模板"><a href="#4、templates模板" class="headerlink" title="4、templates模板"></a>4、templates模板</h3><p>返回html页面需要使用render</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认去当前目录下的templates文件夹中寻找对应html文件（根据app注册顺序找 ）</span></span><br><span class="line">  <span class="keyword">return</span> render(request,<span class="string">&quot;XXX.html&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="5、静态文件"><a href="#5、静态文件" class="headerlink" title="5、静态文件"></a>5、静态文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-static</span><br><span class="line">	-css	【存放CSS样式】</span><br><span class="line">	-img 	【存放图片】</span><br><span class="line">	-js		【存放js样式】</span><br></pre></td></tr></table></figure>

<h4 id="加载静态文件"><a href="#加载静态文件" class="headerlink" title="加载静态文件"></a>加载静态文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># req.html</span></span><br><span class="line">&#123;% load static %&#125;	<span class="comment"># 加载</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/3ba96803347cf5df2e05b1b23d0c8ff0.png" alt="image-20231125111307220"></p>
<h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="1、列表"><a href="#1、列表" class="headerlink" title="1、列表"></a>1、列表</h3><p>在render中添加一个字典，引入变量。读取列表，需要通过. 去索引</p>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/a5fa89a8061793175d580aedcbddf690.png" alt="image-20231125111321633"></p>
<h3 id="2、for语法，进行循环读取"><a href="#2、for语法，进行循环读取" class="headerlink" title="2、for语法，进行循环读取"></a>2、for语法，进行循环读取</h3><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/c2714f132a6986d01611bcf17a3c73f0.png" alt="image-20231125111334406"></p>
<h3 id="3、读取字典"><a href="#3、读取字典" class="headerlink" title="3、读取字典"></a><strong>3、读取字典</strong></h3><ul>
<li>可以根据字典的键去获取值：、</li>
<li>或者for循环键</li>
</ul>
<img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/47391dfe42c3f19bfc79c97ed346ccf1.png" alt="image-20231125111347768" style="zoom:80%;" />

<h3 id="4、判断语句if"><a href="#4、判断语句if" class="headerlink" title="4、判断语句if"></a>4、判断语句if</h3><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/cca97c2b2b79461d8a488bb2dc103612.png" alt="image-20231125111406361"></p>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/5b036a98668e22d2ba889f988db71030.png" alt="image-20231125111418788"></p>
<h2 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h2><p><strong>响应方式：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">&quot;返回请求&quot;</span>)	<span class="comment"># 将字符串内容返回给请求者</span></span><br><span class="line"><span class="keyword">return</span> render(request,<span class="string">&#x27;xxx.html&#x27;</span>,&#123;<span class="string">&quot;n1&quot;</span>:name&#125;)	<span class="comment">#读取html的内容+渲染(替换)--&gt;字符串，返回给用户浏览器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重定向</span></span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">避免Django表单提交出现错误，需要在form中加入语句 &quot;&#123;% csrf_token %&#125;&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/e90dc87864c3c11857ce3e89cf710106.png" alt="image-20231125111433051"></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django学习</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>02-orm数据库连接_学习day02</title>
    <url>/2023/11/21/Python/Django/02-orm%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><ul>
<li>Django开发中，提供ORM框架来操作数据库。ORM相当于一个翻译功能，将简单语句翻译成sql语句</li>
</ul>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/ffef5782606026b38b4a35be780b24b1.png" alt="image-20231125111452908"></p>
<h2 id="1、安装第三方模块"><a href="#1、安装第三方模块" class="headerlink" title="1、安装第三方模块"></a>1、安装第三方模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install mysqlclient</span><br></pre></td></tr></table></figure>

<h2 id="2、ORM"><a href="#2、ORM" class="headerlink" title="2、ORM"></a>2、ORM</h2><p>orm可以帮我们做两件事：</p>
<ul>
<li>创建、修改、删除数据库中的表（不用自己写SQL语句）。【无法创建数据库】</li>
<li>操作表中数据（不写SQL语句）</li>
</ul>
<h3 id="2-1、自己创建数据库"><a href="#2-1、自己创建数据库" class="headerlink" title="2.1、自己创建数据库"></a>2.1、自己创建数据库</h3><ul>
<li>需要自己在Navicat上创建一个数据库</li>
</ul>
<h3 id="2-3、Django连接数据库"><a href="#2-3、Django连接数据库" class="headerlink" title="2.3、Django连接数据库"></a>2.3、Django连接数据库</h3><p>在setting.py文件中进行配置和修改</p>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/4a34e80e98e5f47b4a3648ab1bd74083.png" alt="image-20231125111506361"></p>
<h3 id="2-4、Django操作表"><a href="#2-4、Django操作表" class="headerlink" title="2.4、Django操作表"></a>2.4、Django操作表</h3><ul>
<li><strong>创建表</strong></li>
</ul>
<p>1、在models.py文件中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)  <span class="comment"># CharField字符串型</span></span><br><span class="line">    password = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">以上创建的类，orm会将其翻译成：</span></span><br><span class="line"><span class="string">create table demo_userinfo(</span></span><br><span class="line"><span class="string">    id bigint auto_increment primary key,</span></span><br><span class="line"><span class="string">    name varchar(32),</span></span><br><span class="line"><span class="string">    password varchar(64),</span></span><br><span class="line"><span class="string">    age int</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>2、在终端执行命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：app需要提前注册</p>
</blockquote>
<ul>
<li><p>删除表</p>
<ul>
<li>如果需要删除表或删除表中的列，则只需在models.py文件中注释表对应的class类，并再次执行上述两条语句就行</li>
</ul>
</li>
<li><p>修改表</p>
<ul>
<li>如果删除表中的列后，还想新增一列，则需要给新增的列添加默认值</li>
</ul>
</li>
</ul>
<h3 id="2-5、操作表中的数据（增删改查）"><a href="#2-5、操作表中的数据（增删改查）" class="headerlink" title="2.5、操作表中的数据（增删改查）"></a>2.5、操作表中的数据（增删改查）</h3><ul>
<li><p>增加数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> demo.models <span class="keyword">import</span> UserInfo</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">orm</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># ------ 1、增加数据 ------ #</span></span><br><span class="line">    UserInfo.objects.create(name=<span class="string">&quot;小明&quot;</span>,password=<span class="string">&quot;123&quot;</span>,age=<span class="number">12</span>)</span><br><span class="line">    UserInfo.objects.create(name=<span class="string">&quot;小红&quot;</span>, password=<span class="string">&quot;4567&quot;</span>, age=<span class="number">21</span>)</span><br><span class="line">    UserInfo.objects.create(name=<span class="string">&quot;小黄&quot;</span>, password=<span class="string">&quot;1323&quot;</span>, age=<span class="number">32</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;操作成功&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ------ 2、删除数据 ------ #</span></span><br><span class="line">   UserInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">3</span>).delete() <span class="comment"># 删除id=3的行</span></span><br><span class="line">   UserInfo.objects.<span class="built_in">all</span>().delete() <span class="comment"># 删除表中所有数据</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查找数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ------ 3、查找数据 ------ #</span></span><br><span class="line">   <span class="comment"># 此时data_list是 data_list = [对象，对象，对象]</span></span><br><span class="line">   data_list = UserInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">   <span class="keyword">for</span> obj <span class="keyword">in</span> data_list:</span><br><span class="line">       <span class="built_in">print</span>(obj.<span class="built_in">id</span>, obj.name, obj.password, obj.age)</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ------ 4、修改数据 ------ #</span></span><br><span class="line">UserInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">6</span>).update(password=<span class="number">999</span>) <span class="comment"># 修改id=6的行</span></span><br><span class="line">UserInfo.objects.<span class="built_in">all</span>().update(password=<span class="number">333</span>) <span class="comment"># 修改表中所有数据</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3、案例：用户管理"><a href="#3、案例：用户管理" class="headerlink" title="3、案例：用户管理"></a>3、案例：用户管理</h2><h3 id="1-展示用户列表"><a href="#1-展示用户列表" class="headerlink" title="1.展示用户列表"></a>1.展示用户列表</h3><ul>
<li>创建url</li>
<li>创建函数<ul>
<li>获取所有数据库的用户信息，用一个列表存储</li>
<li>使用html渲染</li>
</ul>
</li>
</ul>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/1d920cb48e006bea50e076c373ebc19c.png" alt="image-20231125111520767"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        &#123;% for obj in data_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.password &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.age &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/c077fb1f47233d4cf885fb117c6aa2ee.png" alt="image-20231125111533618"></p>
<h3 id="2-添加用户"><a href="#2-添加用户" class="headerlink" title="2.添加用户"></a>2.添加用户</h3><ul>
<li>URL</li>
<li>函数<ul>
<li>get请求，看到页面，输入内容</li>
<li>post，提交–&gt;写入到数据库</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">info_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;info_add.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取用户提交的数据</span></span><br><span class="line">    user = request.POST.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    pwd = request.POST.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">    age = request.POST.get(<span class="string">&quot;age&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加到数据库</span></span><br><span class="line">    UserInfo.objects.create(name=user,password=pwd,age=age)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重定向自动跳转到列表查看页面</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/info/list/&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-删除用户"><a href="#3-删除用户" class="headerlink" title="3.删除用户"></a>3.删除用户</h3><ul>
<li>URL</li>
<li>函数</li>
</ul>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/aee803df1398e88af1d2a11cbdab9a4a.png" alt="image-20231125111547924"></p>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/6deea7551e75c8455ee7b8c1ba8b8921.png" alt="image-20231125111558552"></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django学习</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>03-项目开发-1_学习day03</title>
    <url>/2023/11/22/Python/Django/03-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-1-%E8%A1%A8%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="1、设计表结构"><a href="#1、设计表结构" class="headerlink" title="1、设计表结构"></a>1、设计表结构</h2><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/a4fa3347d1dc5fc83b2464b4eaef7a68.png" alt="image-20231125111622492"></p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Department</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 部门表 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># verbose_name=&#x27;&#x27;：是用来对列字段进行备注，可写可不写</span></span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">&#x27;标题&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 员工表 &quot;&quot;&quot;</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;姓名&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    password = models.CharField(verbose_name=<span class="string">&#x27;密码&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    age = models.IntegerField(verbose_name=<span class="string">&#x27;年龄&#x27;</span>)</span><br><span class="line">    account = models.DecimalField(verbose_name=<span class="string">&#x27;账户余额&#x27;</span>, max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, default=<span class="number">0</span>)</span><br><span class="line">    creat_time = models.DateTimeField(verbose_name=<span class="string">&#x27;入职时间&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建部门id是有约束的</span></span><br><span class="line">    <span class="comment"># to 表示与哪张表关联</span></span><br><span class="line">    <span class="comment"># to_field 表示与表中哪一列关联</span></span><br><span class="line">    <span class="comment"># --1、如果部门表删除，1）级联删除</span></span><br><span class="line">    depart = models.ForeignKey(to=<span class="string">&quot;Department&quot;</span>, to_field=<span class="string">&quot;id&quot;</span>, on_delete=models.CASCADE)</span><br><span class="line">    <span class="comment"># --2) 置空</span></span><br><span class="line">    <span class="comment"># depart = models.ForeignKey(to=&quot;Department&quot;, to_field=&quot;id&quot;, null=True,blank=True,on_delete=models.SET_NULL)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在django中做约束，性别</span></span><br><span class="line">    gender_choices = (</span><br><span class="line">        (<span class="number">1</span>,<span class="string">&#x27;男&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>,<span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    gender = models.SmallIntegerField(verbose_name=<span class="string">&#x27;性别&#x27;</span>,choices=gender_choices)</span><br></pre></td></tr></table></figure>

<h2 id="2、在MySQL中创建数据库"><a href="#2、在MySQL中创建数据库" class="headerlink" title="2、在MySQL中创建数据库"></a>2、在MySQL中创建数据库</h2><ul>
<li><p>创建数据库django_learn</p>
</li>
<li><p>修改settings.py文件中DATABASES</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django_learn&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;123123&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>django命令生成表（快捷键ctrl+alt+R，然后输入一下命令）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3、部门管理"><a href="#3、部门管理" class="headerlink" title="3、部门管理"></a>3、部门管理</h2><blockquote>
<ul>
<li>先体验最原始的方法来做</li>
<li>Django中提供Form和ModelForm组件（方便）</li>
</ul>
</blockquote>
<h3 id="3-1、部门列表"><a href="#3-1、部门列表" class="headerlink" title="3.1、部门列表"></a>3.1、部门列表</h3><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/6a1a4c46eb854d4fa326088a2b19a36a.png" alt="image-20231125111637064"></p>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/ea2d89ec3459f333a5795148946808de.png" alt="image-20231125111648648"></p>
<ul>
<li><p>部门列表从数据库中取出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">depart_list</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 部门列表 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 去数据库中获取所有的部门列表</span></span><br><span class="line">    data_list = models.Department.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&quot;depart_list.html&quot;</span>, &#123;<span class="string">&quot;data_list&quot;</span>: data_list&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          &#123;% for obj in data_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span> &gt;</span>&#123;&#123; obj.id &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.title &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-sm&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger btn-sm&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>使用for循环读取数据库的数据，并显示</p>
</li>
<li><p>新建部门页面</p>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/5237a0b89fe5306961cad2d2c04e0f83.png" alt="image-20231125111658361"></p>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/46a516efa6bb575f9fb7436eb82ae6dc.png" alt="image-20231125111708472"></p>
</li>
<li><p>添加、删除、修改部门</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">depart_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;添加部门&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;depart_add.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取用户POST提交过来的数据</span></span><br><span class="line">    title = request.POST.get(<span class="string">&quot;title&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存到数据库</span></span><br><span class="line">    models.Department.objects.create(title=title)</span><br><span class="line">    <span class="comment"># 重定向回部门列表</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/depart/list/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">depart_del</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;删除部门&quot;&quot;&quot;</span></span><br><span class="line">    nid = request.GET.get(<span class="string">&#x27;nid&#x27;</span>)</span><br><span class="line">    models.Department.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).delete()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/depart/list/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">depart_edit</span>(<span class="params">request, nid</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;修改部门&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="comment"># 根据nid，获取数据</span></span><br><span class="line">        row_obj = models.Department.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).first()</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&quot;depart_edit.html&quot;</span>,&#123;<span class="string">&quot;row_obj&quot;</span>:row_obj&#125;)</span><br><span class="line">    <span class="comment"># 获取数据</span></span><br><span class="line">    title = request.POST.get(<span class="string">&quot;title&quot;</span>)</span><br><span class="line">    <span class="comment"># 根据ID找到数据库中的数据并进行更新</span></span><br><span class="line">    models.Department.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).update(title=title)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/depart/list/&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django学习</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>04-项目开发-2_学习day04</title>
    <url>/2023/11/24/Python/Django/04-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-2-ModelForm/</url>
    <content><![CDATA[<h2 id="1、模板的继承"><a href="#1、模板的继承" class="headerlink" title="1、模板的继承"></a>1、模板的继承</h2><ul>
<li><p>创建一个母板：使用<code> &#123;% block content %&#125; &#123;% endblock %&#125;</code>用来表示子板的内容</p>
</li>
<li><p>子板继承时</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% extends <span class="string">&#x27;layout.html&#x27;</span> %&#125;	 <span class="comment"># layout.html可以自定义其他名字</span></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">	<span class="comment"># 子板特有的内容</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/5584615b4d7c3529c69279b87416f519.png" alt="image-20231123220425430"></p>
<h2 id="2、用户管理"><a href="#2、用户管理" class="headerlink" title="2、用户管理"></a>2、用户管理</h2><ul>
<li>向数据库表中插入一些数据</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into app01_userinfo (name,password,age,account,creat_time,gender,depart_id)</span><br><span class="line">values (&#x27;张三&#x27;,&#x27;123&#x27;,23,100.68,&#x27;2021-11-11&#x27;,1,1),</span><br><span class="line">(&#x27;大乔&#x27;,&#x27;333dsf&#x27;,24,200.00,&#x27;2021-12-12&#x27;,2,2),</span><br><span class="line">(&#x27;小乔&#x27;,&#x27;23dsf&#x27;,20,321.00,&#x27;2018-05-23&#x27;,2,2),</span><br><span class="line">(&#x27;张飞&#x27;,&#x27;55ggg&#x27;,25,251.66,&#x27;2020-08-13&#x27;,1,5),</span><br><span class="line">(&#x27;关羽&#x27;,&#x27;666888&#x27;,27,342.55,&#x27;2019-05-15&#x27;,1,5),</span><br><span class="line">(&#x27;刘备&#x27;,&#x27;ggg321&#x27;,29,666.68,&#x27;2017-07-12&#x27;,1,1);</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在Django中可以使用 get_字段名_display() 的方式来获取元组中数字对应的中文名称</span></span><br><span class="line"><span class="comment"># 例如获取性别：</span></span><br><span class="line"> gender_choices = (</span><br><span class="line">        (<span class="number">1</span>,<span class="string">&#x27;男&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>,<span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line"> gender = models.SmallIntegerField(verbose_name=<span class="string">&#x27;性别&#x27;</span>,choices=gender_choices)</span><br><span class="line"><span class="comment"># obj.get_gender_display(), 根据在models.py文件中设置的上述两条语句，如果数据库表中gender字段的值为1，则打印输出‘男’ ，字段的值为2，则打印输出‘女’ </span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>获取时间戳，并设置格式<code> obj.creat_time.strftime(&quot;%Y-%m-%d&quot;)</code></p>
</li>
<li><p>存在关联数据时，Django会根据设置的关联变量自动去关联表，并根据id获取那一行的数据对象：<code> obj.depart.title</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># depart 是用来关联的变量</span></span><br><span class="line">depart = models.ForeignKey(to=<span class="string">&quot;Department&quot;</span>, to_field=<span class="string">&quot;id&quot;</span>, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在html中使用模板语言，对时间进行格式设置，需要用过滤器 |  <code> &#123;&#123; obj.creat_time | data:"Y-m-d" &#125;&#125;</code></p>
</li>
</ul>
<img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/cd3640e44f1d6f14047adde28ff894fd.png" alt="image-20231124102145498" style="zoom:80%;" />

<h2 id="3、新建用户"><a href="#3、新建用户" class="headerlink" title="3、新建用户"></a>3、新建用户</h2><ul>
<li><p>原始方法：一般不采用【麻烦】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 用户提交数据没有校验</span><br><span class="line">- 错误输入时，应该有错误提示</span><br><span class="line">- 页面上，每一个字段都需要重新写一遍</span><br><span class="line">- 关联的数据，需要手动去获取并循环展示在页面中</span><br></pre></td></tr></table></figure>
</li>
<li><p>Django组件</p>
<ul>
<li>Form组件（较简便）</li>
<li>ModeForm组件（最简便）</li>
</ul>
</li>
</ul>
<h3 id="3-1-原始方法"><a href="#3-1-原始方法" class="headerlink" title="3.1 原始方法"></a>3.1 原始方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;添加用户(原始方法)&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="comment"># 使用一个字典保存数据库中的性别元组</span></span><br><span class="line">        context = &#123;</span><br><span class="line">            <span class="string">&#x27;gender_choices&#x27;</span>: models.UserInfo.gender_choices,</span><br><span class="line">            <span class="string">&#x27;depart_list&#x27;</span>:models.Department.objects.<span class="built_in">all</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;user_add.html&quot;</span>, context)</span><br><span class="line">    <span class="comment"># 获取用户提交的数据</span></span><br><span class="line">    name = request.POST.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    pwd = request.POST.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">    age = request.POST.get(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">    ac = request.POST.get(<span class="string">&quot;ac&quot;</span>)</span><br><span class="line">    dt = request.POST.get(<span class="string">&quot;dt&quot;</span>)</span><br><span class="line">    gd = request.POST.get(<span class="string">&quot;gd&quot;</span>)</span><br><span class="line">    dp = request.POST.get(<span class="string">&quot;dp&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加到数据库</span></span><br><span class="line">    models.UserInfo.objects.create(name=name,password=pwd,age=age,</span><br><span class="line">                                   account=ac,creat_time=dt,</span><br><span class="line">                                   gender=gd,depart_id=dp)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/user/list/&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># user_add.html</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">    &lt;label&gt;性别&lt;/label&gt;</span><br><span class="line">    &lt;select <span class="keyword">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span><br><span class="line">          &#123;% <span class="keyword">for</span> item <span class="keyword">in</span> gender_choices %&#125;</span><br><span class="line">               &lt;option value=<span class="string">&quot;&#123;&#123; item.0 &#125;&#125;&quot;</span>&gt;&#123;&#123; item<span class="number">.1</span> &#125;&#125;&lt;/option&gt;	<span class="comment"># 模板语言</span></span><br><span class="line">          &#123;% endfor %&#125;</span><br><span class="line">     &lt;/select&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">     &lt;label&gt;部门&lt;/label&gt;</span><br><span class="line">     &lt;select <span class="keyword">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span><br><span class="line">           &#123;% <span class="keyword">for</span> depart <span class="keyword">in</span> depart_list %&#125;</span><br><span class="line">                 &lt;option value=<span class="string">&quot;&#123;&#123; depart.id &#125;&#125;&quot;</span>&gt;&#123;&#123; depart.title &#125;&#125;&lt;/option&gt;</span><br><span class="line">           &#123;% endfor %&#125;</span><br><span class="line">      &lt;/select&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/d4a11b32b4726bb11b8a78a4c006b8b5.png" alt="image-20231124105649979" style="zoom: 80%;" />

<h3 id="3-2-初识Form"><a href="#3-2-初识Form" class="headerlink" title="3.2 初识Form"></a>3.2 初识Form</h3><h4 id="1、views-py"><a href="#1、views-py" class="headerlink" title="1、views.py"></a>1、views.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个类，继承Django的Form</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyForm</span>(<span class="title class_ inherited__">Form</span>):</span><br><span class="line">    user = forms.CharField(widget=forms.Input)	<span class="comment"># django会自己创建输入框，不用在html中写输入框了</span></span><br><span class="line">    pwd = forms.CharField(widget=forms.Input)</span><br><span class="line">    email = forms.CharField(widget=forms.Input)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">		form = MyForm()    <span class="comment"># 实例Form对象</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;user_add.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>:form&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="2、user-add-html"><a href="#2、user-add-html" class="headerlink" title="2、user_add.html"></a>2、user_add.html</h4><ul>
<li>通过for循环来加载form</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;% for field in form %&#125;</span><br><span class="line">    	&#123;&#123; field &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-初识ModelForm（推荐）"><a href="#3-3-初识ModelForm（推荐）" class="headerlink" title="3.3 初识ModelForm（推荐）"></a>3.3 初识ModelForm（推荐）</h3><h4 id="0、models-py"><a href="#0、models-py" class="headerlink" title="0、models.py"></a>0、models.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 员工表 &quot;&quot;&quot;</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;姓名&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    password = models.CharField(verbose_name=<span class="string">&#x27;密码&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    age = models.IntegerField(verbose_name=<span class="string">&#x27;年龄&#x27;</span>)</span><br><span class="line">    account = models.DecimalField(verbose_name=<span class="string">&#x27;账户余额&#x27;</span>, max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, default=<span class="number">0</span>)</span><br><span class="line">    creat_time = models.DateTimeField(verbose_name=<span class="string">&#x27;入职时间&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    depart = models.ForeignKey(to=<span class="string">&quot;Department&quot;</span>, to_field=<span class="string">&quot;id&quot;</span>, on_delete=models.CASCADE)</span><br><span class="line">   </span><br><span class="line">    gender_choices = (</span><br><span class="line">        (<span class="number">1</span>,<span class="string">&#x27;男&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>,<span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    gender = models.SmallIntegerField(verbose_name=<span class="string">&#x27;性别&#x27;</span>,choices=gender_choices)</span><br></pre></td></tr></table></figure>

<h4 id="1、views-py-1"><a href="#1、views-py-1" class="headerlink" title="1、views.py"></a>1、views.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个类，继承Django的ModelForm</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyForm</span>(<span class="title class_ inherited__">ModelForm</span>):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = UserInfo</span><br><span class="line">        fields = [<span class="string">&quot;name&quot;</span>,<span class="string">&quot;password&quot;</span>,<span class="string">&quot;age&quot;</span>]	<span class="comment"># 直接写表中的字段名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">		form = MyForm()    <span class="comment"># 实例Form对象</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;user_add.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>:form&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="2、user-add-html-1"><a href="#2、user-add-html-1" class="headerlink" title="2、user_add.html"></a>2、user_add.html</h4><ul>
<li>通过for循环来加载form</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;% for field in form %&#125;</span><br><span class="line">    	&#123;&#123; field &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-使用ModelForm新建用户"><a href="#3-4-使用ModelForm新建用户" class="headerlink" title="3.4 使用ModelForm新建用户"></a>3.4 使用ModelForm新建用户</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ------------modelForm示例------------ #</span></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserModelForm</span>(forms.ModelForm):</span><br><span class="line">    <span class="comment"># 添加验证规则</span></span><br><span class="line">    name = forms.CharField(min_length=<span class="number">3</span>,label=<span class="string">&quot;姓名&quot;</span>)</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.UserInfo</span><br><span class="line">        fields = [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;age&quot;</span>,<span class="string">&quot;account&quot;</span>,<span class="string">&quot;creat_time&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;gender&quot;</span>,<span class="string">&quot;depart&quot;</span>]</span><br><span class="line">    <span class="comment"># 批量更改样式    </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 循环找到所有的插件，添加&quot;class&quot;:&quot;form-control&quot;样式</span></span><br><span class="line">        <span class="keyword">for</span> name, field <span class="keyword">in</span> self.fields.items():</span><br><span class="line">            field.widget.attrs = &#123;<span class="string">&quot;class&quot;</span>:<span class="string">&quot;form-control&quot;</span>,<span class="string">&quot;placeholder&quot;</span>:field.label&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_model_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;添加用户（modelForm版本）&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method ==<span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = UserModelForm()</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;user_model_add.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line">    <span class="comment"># 用户提交数据，需要校验</span></span><br><span class="line">    form = UserModelForm(data=request.POST)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        <span class="comment"># 如果数据合法，则保存到数据库</span></span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/user/list/&quot;</span>)</span><br><span class="line">    <span class="comment"># 如果有错误信息</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;user_model_add.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">	&#123;% for field in form %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lable</span>&gt;</span>&#123;&#123; field.label &#125;&#125;: <span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line">        &#123;&#123; field &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; field.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>错误验证</p>
<img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/1467098d0465dbc6ec3e4ab6c18daa83.png" alt="image-20231124170504488" style="zoom:80%;" /></li>
</ul>
<h2 id="4、编辑用户"><a href="#4、编辑用户" class="headerlink" title="4、编辑用户"></a>4、编辑用户</h2><ul>
<li>点击编辑，跳转到编辑页面（将编辑行的ID携带过去）</li>
<li>编辑页面（含有默认数据，根据ID获取并设置到页面中）</li>
<li>提交<ul>
<li>数据错误</li>
<li>数据校验</li>
<li>在数据库更新</li>
</ul>
</li>
</ul>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/6ce885333375433e7e602e76a53d82d6.png" alt="image-20231125104104499"></p>
<h2 id="5、删除用户"><a href="#5、删除用户" class="headerlink" title="5、删除用户"></a>5、删除用户</h2><p>设计逻辑和删除部门一样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_delete</span>(<span class="params">request,nid</span>):</span><br><span class="line"></span><br><span class="line">    models.UserInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).delete()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/user/list/&quot;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
        <category>Django学习</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>06-项目开发-4_学习day06</title>
    <url>/2023/11/30/Python/Django/06-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-4-%E8%A1%A5%E5%85%85/</url>
    <content><![CDATA[<h1 id="0-上一节的补充"><a href="#0-上一节的补充" class="headerlink" title="0- 上一节的补充"></a>0- 上一节的补充</h1><h2 id="1、时间插件"><a href="#1、时间插件" class="headerlink" title="1、时间插件"></a>1、时间插件</h2><p>引入CSS、js样式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% block css %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;plugins/bootstrap-datepicker/css/bootstrap-datepicker.min.css&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;plugins/bootstrap-datepicker/js/bootstrap-datepicker.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;plugins/bootstrap-datepicker/locales/bootstrap-datepicker.zh-CN.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          $(<span class="string">&#x27;#id_creat_time&#x27;</span>).<span class="title function_">datepicker</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">format</span>: <span class="string">&#x27;yyyy-mm-dd&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">language</span>: <span class="string">&#x27;zh-CN&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">autoclose</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/1e25acc80986b3d7de1ecf2258e014c6.png" alt="image-20231130103423168"></p>
<h2 id="2、ModelForm与bootstrap"><a href="#2、ModelForm与bootstrap" class="headerlink" title="2、ModelForm与bootstrap"></a>2、ModelForm与bootstrap</h2><ul>
<li><p>重新定义的init方法，批量设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserModelForm</span>(forms.ModelForm):</span><br><span class="line">    <span class="comment"># 添加验证规则</span></span><br><span class="line">    name = forms.CharField(min_length=<span class="number">2</span>, label=<span class="string">&quot;姓名&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.UserInfo</span><br><span class="line">        fields = [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;account&quot;</span>, <span class="string">&quot;creat_time&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;gender&quot;</span>, <span class="string">&quot;depart&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 循环找到所有的字段，给每个字段添加&quot;class&quot;:&quot;form-control&quot;样式</span></span><br><span class="line">        <span class="keyword">for</span> name, field <span class="keyword">in</span> self.fields.items():</span><br><span class="line">            field.widget.attrs = &#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;form-control&quot;</span>, <span class="string">&quot;placeholder&quot;</span>: field.label&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p> 优化版本–自定义一个bootstrap 类，以后用到的时候，直接继承他</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BootStrapModelForm</span>(forms.ModelForm):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 循环找到所有的字段，给每个字段添加&quot;class&quot;:&quot;form-control&quot;样式</span></span><br><span class="line">        <span class="keyword">for</span> name, field <span class="keyword">in</span> self.fields.items():</span><br><span class="line">            <span class="comment"># 字段中有属性，保留原来的属性，没有属性，才增加</span></span><br><span class="line">            <span class="keyword">if</span> field.widget.attrs:</span><br><span class="line">                field.widget.attrs[<span class="string">&quot;class&quot;</span>] = <span class="string">&quot;form-control&quot;</span></span><br><span class="line">                field.widget.attrs[<span class="string">&quot;placeholder&quot;</span>] = field.label</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">            	field.widget.attrs = &#123;</span><br><span class="line">                    <span class="string">&quot;class&quot;</span>: <span class="string">&quot;form-control&quot;</span>, </span><br><span class="line">                    <span class="string">&quot;placeholder&quot;</span>: field.label&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserModelForm</span>(<span class="title class_ inherited__">BootStrapModelForm</span>):</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.UserInfo</span><br><span class="line">        fields = [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;age&quot;</span>]</span><br></pre></td></tr></table></figure>

<h1 id="1-管理员操作"><a href="#1-管理员操作" class="headerlink" title="1-管理员操作"></a>1-管理员操作</h1><h2 id="1、管理员表创建"><a href="#1、管理员表创建" class="headerlink" title="1、管理员表创建"></a>1、管理员表创建</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Admin</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;管理员表&quot;&quot;&quot;</span></span><br><span class="line">    username = models.CharField(verbose_name=<span class="string">&#x27;用户名&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    password = models.CharField(verbose_name=<span class="string">&#x27;密码&#x27;</span>, max_length=<span class="number">64</span>)</span><br></pre></td></tr></table></figure>

<h2 id="2、新建管理员"><a href="#2、新建管理员" class="headerlink" title="2、新建管理员"></a>2、新建管理员</h2><ul>
<li><p>新建了一个公共页面：change.html  用于所有新建任务的页面，只需要更改对应的标题就可以，不同的forms根据数据库字段设置</p>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/62afe2b3e05be634bede64888a053fdd.png" alt="image-20231130172021809"></p>
</li>
<li><p>添加确认密码字段</p>
</li>
<li><p>使用插件，让密码不是明文显示</p>
</li>
<li><p>定义钩子函数，验证确认密码与密码是否一致</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入报错模块</span></span><br><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> ValidationError</span><br><span class="line"><span class="keyword">from</span> app01.utils.encrypt <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdminModelForm</span>(<span class="title class_ inherited__">BootStrapModelForm</span>):</span><br><span class="line">    <span class="comment"># 增加确认密码字段</span></span><br><span class="line">    confirm_password = forms.CharField(</span><br><span class="line">        label=<span class="string">&quot;确认密码&quot;</span>,</span><br><span class="line">        widget=forms.PasswordInput(render_value=<span class="literal">True</span>)   <span class="comment"># render_value=True：当两次密码不一致时，提交过后任然保持数据在输入框，不会清空</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.Admin</span><br><span class="line">        <span class="comment"># fields = &quot;__all__&quot;  # 表示数据库中所有字段</span></span><br><span class="line">        fields = [<span class="string">&quot;username&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;confirm_password&quot;</span>]</span><br><span class="line">        widgets = &#123;</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: forms.PasswordInput(render_value=<span class="literal">True</span>)  <span class="comment"># 插件，让密码不是明文显示</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加密数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean_password</span>(<span class="params">self</span>):</span><br><span class="line">        pwd = self.cleaned_data.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> md5(pwd)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个钩子函数，验证确认密码与密码是否一致</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean_confirm_password</span>(<span class="params">self</span>):</span><br><span class="line">        pwd = self.cleaned_data.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">        confirm = md5(self.cleaned_data.get(<span class="string">&quot;confirm_password&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> confirm != pwd:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&quot;密码不一致&quot;</span>)</span><br><span class="line">        <span class="comment"># 此处返回什么字段，以后保存到数据库就是什么字段的值</span></span><br><span class="line">        <span class="keyword">return</span> confirm</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果两次输入密码不一致，在点击提交后，两个密码输入框的数据会清空。</span></span><br><span class="line"><span class="comment"># 如果不想清空，则在插件部分加上render_value=True</span></span><br><span class="line">widgets = &#123;<span class="string">&quot;password&quot;</span>: forms.PasswordInput(render_value=<span class="literal">True</span>)&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>md5加密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app01/utils/encrypt.py</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">data_string</span>):</span><br><span class="line"></span><br><span class="line">    obj = hashlib.md5(settings.SECRET_KEY.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    obj.update(data_string.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> obj.hexdigest()</span><br></pre></td></tr></table></figure></li>
</ul>
<img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/1d222bf3992d6ab0a6ec29ad1e8e13b0.png" alt="image-20231130164802339" style="zoom:80%;" />

<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/88d04facd812be63753551c7aeb3a13e.png" alt="image-20231130164729643"></p>
<h2 id="3、编辑管理员"><a href="#3、编辑管理员" class="headerlink" title="3、编辑管理员"></a>3、编辑管理员</h2><ul>
<li><p>增加form对编辑页面进行设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AdminEditModelForm</span>(<span class="title class_ inherited__">BootStrapModelForm</span>):</span><br><span class="line">    <span class="comment"># 增加确认密码字段</span></span><br><span class="line">    confirm_password = forms.CharField(</span><br><span class="line">        label=<span class="string">&quot;确认密码&quot;</span>,</span><br><span class="line">        widget=forms.PasswordInput(render_value=<span class="literal">True</span>)  <span class="comment"># render_value=True：当两次密码不一致时，提交过后任然保持数据在输入框，不会清空</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.Admin</span><br><span class="line">        fields = [<span class="string">&quot;password&quot;</span>]</span><br><span class="line">        widgets = &#123;</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: forms.PasswordInput(render_value=<span class="literal">True</span>)  <span class="comment"># 插件，让密码不是明文显示</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 加密数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean_password</span>(<span class="params">self</span>):</span><br><span class="line">        pwd = self.cleaned_data.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> md5(pwd)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个钩子函数，验证确认密码与密码是否一致</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean_confirm_password</span>(<span class="params">self</span>):</span><br><span class="line">        pwd = self.cleaned_data.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">        confirm = md5(self.cleaned_data.get(<span class="string">&quot;confirm_password&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> confirm != pwd:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&quot;密码不一致&quot;</span>)</span><br><span class="line">        <span class="comment"># 此处返回什么字段，以后保存到数据库就是什么字段的值</span></span><br><span class="line">        <span class="keyword">return</span> confirm</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">admin_edit</span>(<span class="params">request, nid</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;编辑管理员&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获取id对象</span></span><br><span class="line">    row_obj = models.Admin.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).first()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> row_obj:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/admin/list/&quot;</span>)  <span class="comment"># 如果对象不存在，可以返回列表页面，也可以返回自己定义的错误提示页面</span></span><br><span class="line"></span><br><span class="line">    title = <span class="string">&quot;编辑管理员&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = AdminEditModelForm(instance=row_obj)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;change.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form, <span class="string">&quot;title&quot;</span>: title&#125;)</span><br><span class="line"></span><br><span class="line">    form = AdminEditModelForm(data=request.POST, instance=row_obj)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/admin/list/&quot;</span>)</span><br><span class="line">    <span class="comment"># 如果有错误信息</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;change.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form, <span class="string">&quot;title&quot;</span>: title&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/9eaeebe82affa51a07d251b35872b285.png" alt="image-20231130172207651"></p>
<ul>
<li><p>加一个新功能：验证编辑后的密码是否与之前的密码一致，如果一致，则提示密码与之前一致修改失败。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 class AdminEditModelForm(BootStrapModelForm) 中</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean_password</span>(<span class="params">self</span>):</span><br><span class="line">        pwd = self.cleaned_data.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">        md5_pwd = md5(pwd)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 去数据库校验当前密码和新输入的密码是否一致</span></span><br><span class="line">        exists = models.Admin.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=self.instance.pk,password=md5_pwd).exists()</span><br><span class="line">        <span class="keyword">if</span> exists:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&quot;密码与之前一致,修改失败!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> md5_pwd</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django学习</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>07-项目开发-5_学习day07-用户认证、图片验证</title>
    <url>/2023/12/03/Python/Django/07-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-5-%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E3%80%81%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<h1 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h1><h2 id="1、用户登录简单实现"><a href="#1、用户登录简单实现" class="headerlink" title="1、用户登录简单实现"></a>1、用户登录简单实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用户登录&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = LoginForm()</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line">    form = LoginForm(data=request.POST)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        <span class="comment"># 1. form.cleaned_data是提交的用户名密码</span></span><br><span class="line">        <span class="comment"># print(form.cleaned_data)</span></span><br><span class="line">        <span class="comment"># 2. 去数据库校验</span></span><br><span class="line">        admin_obj = models.Admin.objects.<span class="built_in">filter</span>(**form.cleaned_data).first()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> admin_obj <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 主动显示错误信息</span></span><br><span class="line">            form.add_error(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;用户名或密码错误&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line">        <span class="comment"># 用户名密码正确后,写入session</span></span><br><span class="line">        request.session[<span class="string">&quot;info&quot;</span>] = &#123;<span class="string">&quot;id&quot;</span>: admin_obj.<span class="built_in">id</span>, <span class="string">&quot;username&quot;</span>: admin_obj.username&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/admin/list/&quot;</span>)</span><br><span class="line">    <span class="comment"># 如果有错误信息</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="2、用户登录验证"><a href="#2、用户登录验证" class="headerlink" title="2、用户登录验证"></a>2、用户登录验证</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">admin_list</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;管理员列表&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查用户是否已登录，若已登录则继续，未登录则跳转回登录页面</span></span><br><span class="line">    <span class="comment"># 用户发来请求，获取cookie随机字符串，拿随机字符串对比session中有没有</span></span><br><span class="line">    info = request.session.get(<span class="string">&quot;info&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> info:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/login/&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>以上判断可以加入中间件来使用</li>
</ul>
<h3 id="2-1-中间件"><a href="#2-1-中间件" class="headerlink" title="2.1 中间件"></a>2.1 中间件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;中间件编写&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">M1</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;进入中间件&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self,request,response</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;退出中间件&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>还需要在settings.py中注册中间件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&quot;django.middleware.security.SecurityMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.sessions.middleware.SessionMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.middleware.common.CommonMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.middleware.csrf.CsrfViewMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.auth.middleware.AuthenticationMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.messages.middleware.MessageMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.middleware.clickjacking.XFrameOptionsMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;app01.middleware.auth.M1&quot;</span>,	<span class="comment"># 加入创建的中间件</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;中间件编写&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">M1</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 0. 排出那些而不需要登录就能访问的页面</span></span><br><span class="line">        <span class="keyword">if</span> request.path_info == <span class="string">&quot;/login/&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 1. 读取当前访问的用户的session信息，如果能读到，说明已登录过，就可以继续后续操作</span></span><br><span class="line">        info_dict = request.session.get(<span class="string">&quot;info&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> info_dict:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 2. 如果没有登录，则重新返回登录页面</span></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/login/&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="3、用户注销"><a href="#3、用户注销" class="headerlink" title="3、用户注销"></a>3、用户注销</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;注销&quot;&quot;&quot;</span></span><br><span class="line">    request.session.clear()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/login/&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>用户登录后需要显示登录用户的名字</p>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/d9955a11d1008ff482671ec6bb671c11.png" alt="image-20231205151805919"></p>
</li>
</ul>
<h2 id="4、图片验证码"><a href="#4、图片验证码" class="headerlink" title="4、图片验证码"></a>4、图片验证码</h2><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/4ec6d9468ef2a9fec7bf11293d4a2498.png" alt="image-20231205155226655" style="zoom: 67%;" />

<h3 id="4-1-生成验证码图片"><a href="#4-1-生成验证码图片" class="headerlink" title="4.1 生成验证码图片"></a>4.1 生成验证码图片</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip instill pillow	<span class="comment"># 使用第三方插件</span></span><br></pre></td></tr></table></figure>

<ul>
<li>参考：<a href="https://www.cnblogs.com/wupeiqi/articles/5812291.html">https://www.cnblogs.com/wupeiqi/articles/5812291.html</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;生成随机验证码&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFilter, Image, ImageDraw, ImageFont</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_code</span>(<span class="params">width=<span class="number">120</span>, height=<span class="number">30</span>, char_length=<span class="number">5</span>, font_file=<span class="string">&#x27;Monaco.ttf&#x27;</span>, font_size=<span class="number">28</span></span>):</span><br><span class="line">    code = []</span><br><span class="line">    img = Image.new(mode=<span class="string">&#x27;RGB&#x27;</span>, size=(width, height), color=(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">    draw = ImageDraw.Draw(img, mode=<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rndChar</span>():</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        生成随机字母</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">chr</span>(random.randint(<span class="number">65</span>, <span class="number">90</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rndColor</span>():</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        生成随机颜色</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">10</span>, <span class="number">255</span>), random.randint(<span class="number">64</span>, <span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写文字</span></span><br><span class="line">    font = ImageFont.truetype(font_file, font_size)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(char_length):</span><br><span class="line">        char = rndChar()</span><br><span class="line">        code.append(char)</span><br><span class="line">        h = random.randint(<span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">        draw.text([i * width / char_length, h], char, font=font, fill=rndColor())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写干扰点</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">        draw.point([random.randint(<span class="number">0</span>, width), random.randint(<span class="number">0</span>, height)], fill=rndColor())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写干扰圆圈</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">        draw.point([random.randint(<span class="number">0</span>, width), random.randint(<span class="number">0</span>, height)], fill=rndColor())</span><br><span class="line">        x = random.randint(<span class="number">0</span>, width)</span><br><span class="line">        y = random.randint(<span class="number">0</span>, height)</span><br><span class="line">        draw.arc((x, y, x + <span class="number">4</span>, y + <span class="number">4</span>), <span class="number">0</span>, <span class="number">90</span>, fill=rndColor())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画干扰线</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        x1 = random.randint(<span class="number">0</span>, width)</span><br><span class="line">        y1 = random.randint(<span class="number">0</span>, height)</span><br><span class="line">        x2 = random.randint(<span class="number">0</span>, width)</span><br><span class="line">        y2 = random.randint(<span class="number">0</span>, height)</span><br><span class="line"></span><br><span class="line">        draw.line((x1, y1, x2, y2), fill=rndColor())</span><br><span class="line"></span><br><span class="line">    img = img.<span class="built_in">filter</span>(ImageFilter.EDGE_ENHANCE_MORE)</span><br><span class="line">    <span class="keyword">return</span> img, <span class="string">&#x27;&#x27;</span>.join(code)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-2-在Django中使用生成随机验证码图片"><a href="#4-2-在Django中使用生成随机验证码图片" class="headerlink" title="4.2 在Django中使用生成随机验证码图片"></a>4.2 在Django中使用生成随机验证码图片</h3><ul>
<li><p>创建url，创建函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO  <span class="comment">#将生成的图片对象保存到内存中</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">image_code</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成图片验证码&quot;&quot;&quot;</span></span><br><span class="line">    img, code = check_code()</span><br><span class="line">    stream = BytesIO()</span><br><span class="line">    img.save(stream, <span class="string">&#x27;png&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(stream.getvalue())</span><br></pre></td></tr></table></figure>
</li>
<li><p>在登录页面的html中，将图片验证码出的src地址改为上一步创建的url</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/image/code/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;yzmimg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>中间件函数中，排除那些而不需要登录就能访问的页面</p>
</li>
</ul>
<p>​	<img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/423aabf0ce31c74c4c5769405a044d1a.png" alt="image-20231205162507583"></p>
<h3 id="4-3-验证输入的验证码是否匹配"><a href="#4-3-验证输入的验证码是否匹配" class="headerlink" title="4.3 验证输入的验证码是否匹配"></a>4.3 验证输入的验证码是否匹配</h3><ul>
<li><p>使用Form来创建前端验证码的输入框</p>
<img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/fa6b6af2d03393beb292266f70ce6a21.png" alt="image-20231205165841082" style="zoom:80%;" />
</li>
<li><p>在登录的函数中做验证</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 验证码校验</span></span><br><span class="line">user_input_code = form.cleaned_data.pop(<span class="string">&#x27;code&#x27;</span>) <span class="comment"># 前端获取输入的验证码</span></span><br><span class="line">real_code = request.session.get(<span class="string">&#x27;image_code&#x27;</span>,<span class="string">&#x27;&#x27;</span>)    <span class="comment"># 真正生成的验证码</span></span><br><span class="line"><span class="keyword">if</span> real_code.lower() != user_input_code.lower():	<span class="comment"># 进行比较判断</span></span><br><span class="line">    form.add_error(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;验证码错误&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果</p>
<img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/99e224787a9efe1eb2c4b7b688eae19c.png" alt="image-20231205170032801" style="zoom:80%;" /></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django学习</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>08-项目开发-6_学习day08-Ajax请求</title>
    <url>/2023/12/05/Python/Django/08-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-6-Ajax%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<h1 id="Ajax请求"><a href="#Ajax请求" class="headerlink" title="Ajax请求"></a>Ajax请求</h1><p>目前浏览器向网站发送请求时：为URL和表单的形式提交。</p>
<ul>
<li>GET</li>
<li>POST</li>
</ul>
<p>特点是：提交后页面刷新。</p>
<p>除此之外，可以基于Ajax向后台发送请求（异步请求）</p>
<ul>
<li><p>依赖jQuery</p>
</li>
<li><p>编写ajax代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;发送的地址&quot;</span>,</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">n1</span>:<span class="number">123</span>,</span><br><span class="line">        <span class="attr">n2</span>:<span class="number">456</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="1、使用Ajax提交post请求"><a href="#1、使用Ajax提交post请求" class="headerlink" title="1、使用Ajax提交post请求"></a>1、使用Ajax提交post请求</h2><p>需要导入<code>csrf_exempt</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在URL函数上方加上装饰器</span></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xxx</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h2 id="2、Ajax请求返回值一般是json格式"><a href="#2、Ajax请求返回值一般是json格式" class="headerlink" title="2、Ajax请求返回值一般是json格式"></a>2、Ajax请求返回值一般是json格式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在URL函数上方加上装饰器</span></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xxx</span>(<span class="params">request</span>):</span><br><span class="line">    data_dic = &#123;<span class="string">&quot;status&quot;</span>:<span class="literal">True</span>, <span class="string">&quot;data&quot;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(json.dumps(data_dic))	<span class="comment"># json.dumps(data_dic)转成json</span></span><br></pre></td></tr></table></figure>

<h2 id="3、案例"><a href="#3、案例" class="headerlink" title="3、案例"></a>3、案例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ajax案例</span></span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_ajax_list</span>(<span class="params">request</span>):</span><br><span class="line">    form = TaskModelForm()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;task_ajax_list.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用Ajax，post请求时。在URL函数上方加上装饰器</span></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_ajax_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 1.用户发送过来的数据做校验（ModelForm进行校验）</span></span><br><span class="line">    form = TaskModelForm(data=request.POST)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        data_dict = &#123;<span class="string">&quot;status&quot;</span>: <span class="literal">True</span>, <span class="string">&quot;data&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(json.dumps(data_dict))</span><br><span class="line">    <span class="comment"># 2. 如果出错，则后端返回错误信息</span></span><br><span class="line">    data_dict = &#123;<span class="string">&quot;status&quot;</span>: <span class="literal">False</span>, <span class="string">&quot;error&quot;</span>: form.errors&#125;</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(json.dumps(data_dict, ensure_ascii=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li><p>通过ajax提交form表单时，.serialize()方式会失效</p>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/dcf408257b06db6471d3b46a3abd8f32.png" alt="image-20231206201433969"></p>
<ul>
<li><p>解决方法：创建Form对象，并将<code>processData</code>与<code>contentType</code>两个参数设置为false</p>
<img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/b743616ceb3f69d7e2b40fd32f993db8.png" alt="image-20231206201646979" style="zoom:80%;" />
</li>
<li><p>参考博客：<a href="https://blog.csdn.net/qq_34422681/article/details/127712777">https://blog.csdn.net/qq_34422681/article/details/127712777</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_42774234/article/details/134443472">https://blog.csdn.net/qq_42774234/article/details/134443472</a></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django学习</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>05-项目开发-3_学习day05</title>
    <url>/2023/11/29/Python/Django/05-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-3-%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="day05-靓号管理"><a href="#day05-靓号管理" class="headerlink" title="day05 - 靓号管理"></a>day05 - 靓号管理</h1><h2 id="1、表结构"><a href="#1、表结构" class="headerlink" title="1、表结构"></a>1、表结构</h2><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/86fb3514ce1cc077ccf752ce0ce36766.png" alt="image-20231125113221381"></p>
<p>根据表结构的需求，在models.py中创建类（由类生成数据库中的表）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PrettyNum</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 靓号表 &quot;&quot;&quot;</span></span><br><span class="line">    mobile = models.CharField(verbose_name=<span class="string">&quot;手机号&quot;</span>, max_length=<span class="number">32</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 想要允许为空，则在参数中加入null=True,blank=True</span></span><br><span class="line">    price = models.IntegerField(verbose_name=<span class="string">&quot;价格&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    level_choices = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&quot;1级&quot;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&quot;2级&quot;</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">&quot;3级&quot;</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="string">&quot;4级&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">    level = models.SmallIntegerField(verbose_name=<span class="string">&quot;级别&quot;</span>, choices=level_choices, default=<span class="number">1</span>)</span><br><span class="line">    status_choices = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&quot;已占用&quot;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&quot;未使用&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">    status = models.SmallIntegerField(verbose_name=<span class="string">&quot;状态&quot;</span>, choices=status_choices, default=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>两条执行数据库命令：工具-&gt;运行manage.py—&gt; 1).  makemigrations   2).  migrate</p>
</blockquote>
<h2 id="2、靓号列表"><a href="#2、靓号列表" class="headerlink" title="2、靓号列表"></a>2、靓号列表</h2><ul>
<li><p>url</p>
</li>
<li><p>函数</p>
<ul>
<li><p>获取所有靓号</p>
</li>
<li><p>结合html+render将靓号罗列出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id	号码	价格	级别(中文)	状态(中文)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">phone_list</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 去数据库中获取所有的靓号列表</span></span><br><span class="line">    <span class="comment"># 查询的数据结果可以使用order by排序，“-level”，添加减号表示倒序排，</span></span><br><span class="line">    <span class="comment"># phones_list = models.PrettyNum.objects.all().order_by(&quot;-price&quot;)</span></span><br><span class="line">    phones_list = models.PrettyNum.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;phone_list.html&quot;</span>, &#123;<span class="string">&quot;phones_list&quot;</span>: phones_list&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="3、新建靓号"><a href="#3、新建靓号" class="headerlink" title="3、新建靓号"></a>3、新建靓号</h2><ul>
<li><p>列表点击新建跳转：&#x2F;phone&#x2F;add&#x2F;</p>
</li>
<li><p>URL</p>
</li>
<li><p>ModelForm类</p>
</li>
<li><p>函数</p>
<ul>
<li>实例化类的对象</li>
<li>通过render将对象传入到HTML中</li>
<li>模板循环展示所有的字段</li>
</ul>
</li>
<li><p>点击提交</p>
<ul>
<li>数据校验</li>
<li>保存到数据库</li>
<li>跳转回靓号列表</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.validators <span class="keyword">import</span> RegexValidator</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneModelForm</span>(forms.ModelForm):</span><br><span class="line">    <span class="comment"># 添加验证规则，通过正则表达式来限制输入</span></span><br><span class="line">    mobile = forms.CharField(</span><br><span class="line">        label=<span class="string">&quot;号码&quot;</span>,</span><br><span class="line">        validators=[RegexValidator(<span class="string">r&#x27;^1[3-9]\d&#123;9&#125;$&#x27;</span>, <span class="string">&#x27;号码必须以1开头, 第二位必须取[3-9], 号码长度11位数字&#x27;</span>)]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.PrettyNum</span><br><span class="line">        <span class="comment"># fields = [&quot;mobile&quot;, &quot;price&quot;, &quot;level&quot;, &quot;status&quot;]</span></span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span>  <span class="comment"># 表示数据库中所有字段</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 循环找到所有的插件，添加&quot;class&quot;:&quot;form-control&quot;样式</span></span><br><span class="line">        <span class="keyword">for</span> name, field <span class="keyword">in</span> self.fields.items():</span><br><span class="line">            field.widget.attrs = &#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;form-control&quot;</span>, <span class="string">&quot;placeholder&quot;</span>: field.label&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phone_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;添加靓号（modelForm版本）&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = PhoneModelForm()</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;phone_add.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line">    <span class="comment"># 用户提交数据，需要校验</span></span><br><span class="line">    form = PhoneModelForm(data=request.POST)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        <span class="comment"># 如果数据合法，则保存到数据库</span></span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/phone/list/&quot;</span>)</span><br><span class="line">    <span class="comment"># 如果有错误信息</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;phone_add.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4、编辑靓号"><a href="#4、编辑靓号" class="headerlink" title="4、编辑靓号"></a>4、编辑靓号</h2><ul>
<li>URL</li>
<li>函数<ul>
<li>根据ID获取当前编辑的对象</li>
<li>ModelForm配合，默认显示数据</li>
<li>提交修改</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">phone_edit</span>(<span class="params">request, nid</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;编辑靓号&quot;&quot;&quot;</span></span><br><span class="line">    row_obj = models.PrettyNum.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).first()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="comment"># 输入框中的默认值设置</span></span><br><span class="line">        <span class="comment"># 根据ID去数据看看获取要编辑的那一行数据</span></span><br><span class="line">        <span class="comment"># instance会默认将获取到的数据显示出来</span></span><br><span class="line">        form = PhoneModelForm(instance=row_obj)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;phone_edit.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用户提交数据，需要校验</span></span><br><span class="line">    form = PhoneModelForm(data=request.POST, instance=row_obj)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        <span class="comment"># 默认保存的是用户输入的所有数据，如果想要再增加额外的值</span></span><br><span class="line">        <span class="comment"># form.instance.字段名 = 值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果数据合法，则保存到数据库</span></span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/phone/list/&quot;</span>)</span><br><span class="line">    <span class="comment"># 如果有错误信息</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;phone_edit.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="5、删除靓号"><a href="#5、删除靓号" class="headerlink" title="5、删除靓号"></a>5、删除靓号</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">phone_del</span>(<span class="params">request, nid</span>):</span><br><span class="line">    models.PrettyNum.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).delete()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/phone/list/&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="6、搜索手机号"><a href="#6、搜索手机号" class="headerlink" title="6、搜索手机号"></a>6、搜索手机号</h2><ul>
<li>针对数字的查找条件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">models.PrettyNum.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">12</span>)			<span class="comment"># 等于12</span></span><br><span class="line">models.PrettyNum.objects.<span class="built_in">filter</span>(id__gt=<span class="number">12</span>)		<span class="comment"># 大于12</span></span><br><span class="line">models.PrettyNum.objects.<span class="built_in">filter</span>(id__gte=<span class="number">12</span>)		<span class="comment"># 大于等于12</span></span><br><span class="line">models.PrettyNum.objects.<span class="built_in">filter</span>(id__lt=<span class="number">12</span>)		<span class="comment"># 小于12</span></span><br><span class="line">models.PrettyNum.objects.<span class="built_in">filter</span>(id__lte=<span class="number">12</span>)		<span class="comment"># 小于等于12</span></span><br></pre></td></tr></table></figure>

<ul>
<li>针对字符串的查找条件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">models.PrettyNum.objects.<span class="built_in">filter</span>(mobile__startswith=<span class="string">&quot;1999&quot;</span>)	<span class="comment"># 以“1999”开头的字符串</span></span><br><span class="line">models.PrettyNum.objects.<span class="built_in">filter</span>(mobile__endswith=<span class="string">&quot;1999&quot;</span>)	<span class="comment"># 以“1999”结尾的字符串</span></span><br><span class="line">models.PrettyNum.objects.<span class="built_in">filter</span>(mobile__contains=<span class="string">&quot;1999&quot;</span>)	<span class="comment"># 包含“1999”的字符串</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>功能实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">phone_list</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 搜索手机号</span></span><br><span class="line">    data_list = &#123;&#125;</span><br><span class="line">    value = request.GET.get(<span class="string">&#x27;q&#x27;</span>,<span class="string">&quot;&quot;</span>)		<span class="comment"># 搜索框中传输参数变量q</span></span><br><span class="line">    <span class="keyword">if</span> value:</span><br><span class="line">        data_list[<span class="string">&#x27;mobile__contains&#x27;</span>] = value</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 去数据库中获取所有的靓号列表</span></span><br><span class="line">    <span class="comment"># 查询的数据结果可以使用order by排序，“-level”，添加减号表示倒序排，</span></span><br><span class="line">    <span class="comment"># phones_list = models.PrettyNum.objects.all().order_by(&quot;-price&quot;)</span></span><br><span class="line">    <span class="comment"># phones_list = models.PrettyNum.objects.all()</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;根据条件搜索想要的数据&quot;&quot;&quot;</span></span><br><span class="line">    phones_list = models.PrettyNum.objects.<span class="built_in">filter</span>(**data_list)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;phone_list.html&quot;</span>, &#123;<span class="string">&quot;phones_list&quot;</span>: phones_list,<span class="string">&quot;search&quot;</span>:value&#125;)	<span class="comment"># 将搜索框中的数据显示在前端页面中</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/a92cec1ab2ee17e211709dff6c65fa9c.png" alt="image-20231129160824753"></p>
<h2 id="7、分页展示靓号"><a href="#7、分页展示靓号" class="headerlink" title="7、分页展示靓号"></a>7、分页展示靓号</h2><ul>
<li>建立一个分页组件，名为 pagination.py，以后要使用到分页的，都可以引用它</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">自定义的分页组件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">使用方法：</span></span><br><span class="line"><span class="string">在views.py导入该类 from app01.utils.pagination import Pagination</span></span><br><span class="line"><span class="string">使用以下代码即可：</span></span><br><span class="line"><span class="string">        queryset = models.PrettyNum.objects.all()  # 分页展示的显示逻辑</span></span><br><span class="line"><span class="string">        page_object = Pagination(request, queryset,page_size=2)</span></span><br><span class="line"><span class="string">        context = &#123;</span></span><br><span class="line"><span class="string">                &quot;phones_list&quot;: page_object.page_queryset,   # 分完页的数据</span></span><br><span class="line"><span class="string">                &quot;page_string&quot;: page_object.html()   # 页码</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"><span class="keyword">from</span> django.http.request <span class="keyword">import</span> QueryDict</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pagination</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, request, queryset, page_size=<span class="number">8</span>, page_param=<span class="string">&quot;page&quot;</span>, plus=<span class="number">3</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param request:</span></span><br><span class="line"><span class="string">        :param queryset: 分页逻辑</span></span><br><span class="line"><span class="string">        :param page_size: 每页显示多少行数据</span></span><br><span class="line"><span class="string">        :param page_param: 当前页面对象</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        query_dict = copy.deepcopy(request.GET)</span><br><span class="line">        query_dict._mtable = query_dict  <span class="comment"># 拼接URL参数</span></span><br><span class="line">        self.query_dict = query_dict</span><br><span class="line"></span><br><span class="line">        self.page_apram = page_param</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        page = request.GET.get(page_param, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> page.isdecimal():</span><br><span class="line">            page = <span class="built_in">int</span>(page)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            page = <span class="number">1</span></span><br><span class="line">        self.page = page</span><br><span class="line">        self.page_size = page_size</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 分页的起始和结束值</span></span><br><span class="line">        self.start = (page - <span class="number">1</span>) * page_size</span><br><span class="line">        self.end = page * page_size</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 分页逻辑</span></span><br><span class="line">        self.page_queryset = queryset[self.start:self.end]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算分页数</span></span><br><span class="line">        total_count = queryset.count()  <span class="comment"># 获取数据的总条数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># divmod: Return the tuple (x//y, x%y)</span></span><br><span class="line">        total_page_count, div = <span class="built_in">divmod</span>(total_count, page_size)  <span class="comment"># 计算总页码数</span></span><br><span class="line">        <span class="keyword">if</span> div:  <span class="comment"># 如果有余数，则总页数+1</span></span><br><span class="line">            total_page_count += <span class="number">1</span></span><br><span class="line">        self.total_page_count = total_page_count</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算出显示当前页的前5页，后5页</span></span><br><span class="line">        self.plus = plus</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">html</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.total_page_count &lt;= <span class="number">2</span> * self.plus + <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 如果数据库中数据比较少，都没有达到11页</span></span><br><span class="line">            start_page = <span class="number">1</span></span><br><span class="line">            end_page = self.total_page_count</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果数据库中数据页数 &gt;11页</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 当前页&lt;5时，控制最左端</span></span><br><span class="line">            <span class="keyword">if</span> self.page &lt;= self.plus:</span><br><span class="line">                start_page = <span class="number">1</span></span><br><span class="line">                end_page = <span class="number">2</span> * self.plus + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 当前页 &gt; 5，控制最右端</span></span><br><span class="line">                <span class="comment"># 当前页+5 &gt; 总页面</span></span><br><span class="line">                <span class="keyword">if</span> (self.page + self.plus) &gt; self.total_page_count:</span><br><span class="line">                    start_page = self.total_page_count - <span class="number">2</span> * self.plus</span><br><span class="line">                    end_page = self.total_page_count</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    start_page = self.page - self.plus</span><br><span class="line">                    end_page = self.page + self.plus</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 页码</span></span><br><span class="line">        page_str_list = []</span><br><span class="line"></span><br><span class="line">        self.query_dict.setlist(self.page_apram, [<span class="number">1</span>])</span><br><span class="line">        page_str_list.append(</span><br><span class="line">            <span class="string">&#x27;&lt;li class=&quot;page-item&quot;&gt;&lt;a class=&quot;page-link&quot; href=&quot;?&#123;&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(self.query_dict.urlencode()))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 上一页</span></span><br><span class="line">        <span class="keyword">if</span> self.page &gt; <span class="number">1</span>:</span><br><span class="line">            self.query_dict.setlist(self.page_apram, [self.page - <span class="number">1</span>])</span><br><span class="line">            prev = <span class="string">&#x27;&lt;li class=&quot;page-item&quot;&gt;&lt;a class=&quot;page-link&quot; href=&quot;?&#123;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(self.query_dict.urlencode())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.query_dict.setlist(self.page_apram, [<span class="number">1</span>])</span><br><span class="line">            prev = <span class="string">&#x27;&lt;li class=&quot;page-item&quot;&gt;&lt;a class=&quot;page-link&quot; href=&quot;?&#123;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(self.query_dict.urlencode())</span><br><span class="line">        page_str_list.append(prev)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 页码</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_page, end_page + <span class="number">1</span>):</span><br><span class="line">            self.query_dict.setlist(self.page_apram, [i])</span><br><span class="line">            <span class="keyword">if</span> i == self.page:  <span class="comment"># 如果是当前页就高光</span></span><br><span class="line">                ele = <span class="string">&#x27;&lt;li class=&quot;page-item active&quot;&gt;&lt;a class=&quot;page-link&quot; href=&quot;?&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(self.query_dict.urlencode(), i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ele = <span class="string">&#x27;&lt;li class=&quot;page-item&quot;&gt;&lt;a class=&quot;page-link&quot; href=&quot;?&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(self.query_dict.urlencode(), i)</span><br><span class="line">            page_str_list.append(ele)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 下一页</span></span><br><span class="line">        <span class="keyword">if</span> self.page &lt; self.total_page_count:</span><br><span class="line">            self.query_dict.setlist(self.page_apram, [self.page + <span class="number">1</span>])</span><br><span class="line">            prev = <span class="string">&#x27;&lt;li class=&quot;page-item&quot;&gt;&lt;a class=&quot;page-link&quot; href=&quot;?&#123;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(self.query_dict.urlencode())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.query_dict.setlist(self.page_apram, [self.total_page_count])</span><br><span class="line">            prev = <span class="string">&#x27;&lt;li class=&quot;page-item&quot;&gt;&lt;a class=&quot;page-link&quot; href=&quot;?&#123;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(self.query_dict.urlencode())</span><br><span class="line">        page_str_list.append(prev)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 尾页</span></span><br><span class="line">        self.query_dict.setlist(self.page_apram, [self.total_page_count])</span><br><span class="line">        page_str_list.append(</span><br><span class="line">            <span class="string">&#x27;&lt;li class=&quot;page-item&quot;&gt;&lt;a class=&quot;page-link&quot; href=&quot;?&#123;&#125;&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(self.query_dict.urlencode()))</span><br><span class="line"></span><br><span class="line">        page_string = mark_safe(<span class="string">&quot;&quot;</span>.join(page_str_list))</span><br><span class="line">        <span class="keyword">return</span> page_string</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/b144eec8e2bb78724e5205781665e14c.png" alt="image-20231129214851082"></p>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/f7017ef705d8bf579f6aedf2171b7c92.png" alt="image-20231129214932853"></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django学习</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>09-项目开发-7_学习day09</title>
    <url>/2023/12/07/Python/Django/09-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-7-Ajax%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<p> &#x1F680; &#x3D;&#x3D;继续上节Ajax案例进行&#x3D;&#x3D;</p>
<ul>
<li><p>在任务提交页面下方显示提交的任务列表</p>
<img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/eabf5a3436d3a61c4fed9f8c9e1a1d5d.png" alt="image-20231207092223275" style="zoom:80%;" />
</li>
<li><p>提交成功后，弹出“添加成功”的弹窗，点击弹窗中的确定，会刷新页面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该功能实现可以使用js语法</span></span><br><span class="line"><span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(res.<span class="property">status</span>)&#123;</span><br><span class="line">        <span class="comment">// alert弹窗</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;添加成功！&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用js实现页面刷新</span></span><br><span class="line">        location.<span class="title function_">reload</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $.<span class="title function_">each</span>(res.<span class="property">error</span>, <span class="keyword">function</span> (<span class="params">name,data</span>)&#123;</span><br><span class="line">            &#123;#<span class="variable language_">console</span>.<span class="title function_">log</span>(name,data)#&#125;</span><br><span class="line">                $(<span class="string">&quot;#id_&quot;</span> + name).<span class="title function_">next</span>().<span class="title function_">text</span>(data[<span class="number">0</span>]);</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>​	<img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/2330f756672797733e799e5a55ca3914.png" alt="image-20231207092608056" style="zoom:80%;" /></p>
<h2 id="1、订单管理"><a href="#1、订单管理" class="headerlink" title="1、订单管理"></a>1、订单管理</h2><h3 id="1-1-表结构"><a href="#1-1-表结构" class="headerlink" title="1.1 表结构"></a>1.1 表结构</h3><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/ecc3bcbfbc7a443271a7fa81e2a88dc0.png" alt="image-20231207094307430" style="zoom:80%;" />

<ul>
<li><p>表结构设计</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;工单表&quot;&quot;&quot;</span></span><br><span class="line">    oid = models.CharField(verbose_name=<span class="string">&quot;订单号&quot;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">&quot;名称&quot;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.DecimalField(verbose_name=<span class="string">&#x27;价格&#x27;</span>, max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, default=<span class="number">0</span>)</span><br><span class="line">    status_choices = (</span><br><span class="line">        (<span class="number">1</span>,<span class="string">&quot;待支付&quot;</span>),</span><br><span class="line">        (<span class="number">2</span>,<span class="string">&quot;已支付&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">    status = models.SmallIntegerField(verbose_name=<span class="string">&quot;状态&quot;</span>, choices=status_choices, default=<span class="number">1</span>)</span><br><span class="line">    user_admin = models.ForeignKey(verbose_name=<span class="string">&quot;负责人&quot;</span>, to=<span class="string">&quot;Admin&quot;</span>, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-2-Ajax显示对话框"><a href="#1-2-Ajax显示对话框" class="headerlink" title="1.2 Ajax显示对话框"></a>1.2 Ajax显示对话框</h3><ul>
<li><p>从<a href="https://www.bookstack.cn/books/bootstrap-v4.0-zh">Bootstrap</a>手册中导入<code> 弹出模态框</code>的模板</p>
</li>
<li><p>可以使用Ajax激活，当点击新建按钮时，弹出对话框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% block js %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">bindBtnAddEvent</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">bindBtnAddEvent</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#btnAdd&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 点击新建按钮，显示对话框,myModal是对话框id</span></span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&#x27;#myModal&#x27;</span>).<span class="title function_">modal</span>(<span class="string">&#x27;show&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-3-新建订单"><a href="#1-3-新建订单" class="headerlink" title="1.3 新建订单"></a>1.3 新建订单</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">order_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;新建订单&quot;&quot;&quot;</span></span><br><span class="line">    form = OrderModelForm(data=request.POST)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        <span class="comment"># 订单号：由于在表单中，oid是没有自己写入的，需要动态生成</span></span><br><span class="line">        form.instance.oid = datetime.now().strftime(<span class="string">&quot;%Y%m%d%H%M%S&quot;</span>) + <span class="built_in">str</span>(random.randint(<span class="number">1000</span>,<span class="number">9999</span>))</span><br><span class="line">        <span class="comment"># 获取当前登录的管理员id</span></span><br><span class="line">        form.instance.user_admin_id = request.session[<span class="string">&quot;info&quot;</span>][<span class="string">&quot;id&quot;</span>]</span><br><span class="line">        <span class="comment"># 保存到数据库</span></span><br><span class="line">        form.save()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;status&quot;</span>: <span class="literal">True</span>, <span class="string">&quot;data&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;)</span><br><span class="line">        <span class="comment"># 2. 如果出错，则后端返回错误信息</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;status&quot;</span>: <span class="literal">False</span>, <span class="string">&quot;error&quot;</span>: form.errors&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>HTML部分的关于弹出框的一些设置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">status</span>)&#123;</span><br><span class="line">            <span class="comment">// alert弹窗</span></span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;添加成功！&quot;</span>);</span><br><span class="line">            <span class="comment">// 使用js实现页面刷新</span></span><br><span class="line">            <span class="comment">//location.reload();</span></span><br><span class="line">            <span class="comment">// 如果保持弹出输入框不关闭，且清空输入框内容</span></span><br><span class="line">            &#123;#$(<span class="string">&quot;#addForm&quot;</span>)[<span class="number">0</span>].<span class="title function_">reset</span>();#&#125;</span><br><span class="line">            <span class="comment">// 关闭弹出框</span></span><br><span class="line">            $(<span class="string">&#x27;#myModal&#x27;</span>).<span class="title function_">modal</span>(<span class="string">&#x27;hide&#x27;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $.<span class="title function_">each</span>(res.<span class="property">error</span>, <span class="keyword">function</span> (<span class="params">name,data</span>)&#123;</span><br><span class="line">                &#123;#<span class="variable language_">console</span>.<span class="title function_">log</span>(name,data)#&#125;</span><br><span class="line">                $(<span class="string">&quot;#id_&quot;</span> + name).<span class="title function_">next</span>().<span class="title function_">text</span>(data[<span class="number">0</span>]);</span><br><span class="line">            &#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-4-删除订单"><a href="#1-4-删除订单" class="headerlink" title="1.4 删除订单"></a>1.4 删除订单</h3><ul>
<li>点击删除，弹出警告框，确认是否删除</li>
</ul>
<p>​	<img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/70eddb2a068d9a94b1b4393579204c79.png" alt="image-20231208163722575"></p>
<ul>
<li><p>点击确定，可以删除对应的订单号</p>
<ul>
<li><p>实现方式：在js中添加全局变量，并且在删除按钮上添加uid变量，这样点击不同订单的删除，就可以获取对应的id值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">uid</span>=<span class="string">&quot;&#123;&#123; obj.id &#125;&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger btn-sm btn-delete&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/a56d4458f54c32a123ee53aa4ad1ed18.png" alt="image-20231208164703525"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bindBtnConfirmDeleteEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#btnConfirmDelete&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击了&quot;</span>)</span><br><span class="line">        <span class="comment">//点击确认删除按钮，将全局变量中设置的那个要删除ID发送到后台</span></span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&quot;/order/delete/&quot;</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&quot;GET&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="attr">uid</span>:<span class="variable constant_">DELETE_ID</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(res.<span class="property">status</span>)&#123;</span><br><span class="line">                    <span class="comment">// alert弹窗</span></span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">                    <span class="comment">// 使用js实现页面刷新</span></span><br><span class="line">                    location.<span class="title function_">reload</span>();</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//删除失败</span></span><br><span class="line">                    <span class="title function_">alert</span>(res.<span class="property">error</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>获取id后，在数据库中找到对应的数据并删除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">order_delete</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;删除订单&quot;&quot;&quot;</span></span><br><span class="line">    uid = request.GET.get(<span class="string">&#x27;uid&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(uid)</span><br><span class="line">    exists = models.Order.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=uid).exists()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exists:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;status&quot;</span>: <span class="literal">False</span>, <span class="string">&quot;error&quot;</span>:<span class="string">&quot;删除失败，数据不存在&quot;</span>&#125;)</span><br><span class="line">    models.Order.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=uid).delete()</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;status&quot;</span>: <span class="literal">True</span>&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="1-5-编辑订单"><a href="#1-5-编辑订单" class="headerlink" title="1.5 编辑订单"></a>1.5 编辑订单</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># row_dict返回的是字典,因为在filter后面加上values是返回字典类型</span></span><br><span class="line">  row_dict = models.Order.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=uid).values(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;price&quot;</span>,<span class="string">&quot;status&quot;</span>).first()</span><br></pre></td></tr></table></figure>

<ul>
<li><p>根据id获取订单详情</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">order_detail</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;根据id获取订单详细&quot;&quot;&quot;</span></span><br><span class="line">    uid = request.GET.get(<span class="string">&#x27;uid&#x27;</span>)</span><br><span class="line">    <span class="comment"># row_dict返回的是字典</span></span><br><span class="line">    row_dict = models.Order.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=uid).values(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;price&quot;</span>, <span class="string">&quot;status&quot;</span>).first()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> row_dict:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;status&quot;</span>: <span class="literal">False</span>, <span class="string">&quot;error&quot;</span>: <span class="string">&quot;数据不存在&quot;</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;status&quot;</span>: <span class="literal">True</span>, <span class="string">&quot;data&quot;</span>: row_dict&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/0bf76072f1a3e2a403b6adcd35657ce7.png" alt="image-20231211104334037" style="zoom:80%;" />
]]></content>
      <categories>
        <category>Python</category>
        <category>Django学习</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>10-项目开发-8-文件上传_学习day10</title>
    <url>/2023/12/11/Python/Django/10-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-8-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1. 基本操作"></a>1. 基本操作</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">upload_list</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&quot;upload_list.html&quot;</span>)</span><br><span class="line">    <span class="comment"># 获取文件对象</span></span><br><span class="line">    file_obj = request.FILES.get(<span class="string">&#x27;avatar&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将上传的文件本地保存</span></span><br><span class="line">    f = <span class="built_in">open</span>(file_obj.name,mode=<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    <span class="comment"># 上传的文件按一块一块的读取</span></span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> file_obj.chunks():</span><br><span class="line">        f.write(chunk)</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;上传成功！&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="2-案例：批量上传数据"><a href="#2-案例：批量上传数据" class="headerlink" title="2. 案例：批量上传数据"></a>2. 案例：批量上传数据</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/depart/multi/&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;exc&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">depart_multi</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;批量上传excel文件&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. 获取对象</span></span><br><span class="line">    file_obj = request.FILES.get(<span class="string">&quot;exc&quot;</span>)</span><br><span class="line">    <span class="comment"># 2. 将对象传递给 openpyxl，由 openpyxl读取文件的内容</span></span><br><span class="line">    wb = load_workbook(file_obj)</span><br><span class="line">    sheet = wb.worksheets[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 3. 循环获取每一行的数据，排除第一行</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> sheet.iter_rows(min_row=<span class="number">2</span>):</span><br><span class="line">        text = row[<span class="number">0</span>].value</span><br><span class="line">        <span class="comment"># print(text)</span></span><br><span class="line">        <span class="comment"># 加入到数据库</span></span><br><span class="line">        exists = models.Department.objects.<span class="built_in">filter</span>(title=text).exists()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> exists:</span><br><span class="line">            models.Department.objects.create(title=text)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/depart/list/&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="3-混合数据上传（Form）"><a href="#3-混合数据上传（Form）" class="headerlink" title="3. 混合数据上传（Form）"></a>3. 混合数据上传（Form）</h2><ul>
<li>提交页面时，用户输入数据+文件（输入不能为空、报错）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UpForm</span>(forms.Form):</span><br><span class="line">    name = forms.CharField(label=<span class="string">&quot;姓名&quot;</span>)</span><br><span class="line">    age = forms.IntegerField(label=<span class="string">&quot;年龄&quot;</span>)</span><br><span class="line">    img = forms.FileField(label=<span class="string">&quot;头像&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-primary&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 40rem;margin-top: 20px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">            &#123;% csrf_token %&#125;</span><br><span class="line"></span><br><span class="line">            &#123;% for field in form %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">lable</span>&gt;</span>&#123;&#123; field.label &#125;&#125;: <span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line">                &#123;&#123; field &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; field.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-1-创建一个数据库用来保存提交的数据"><a href="#3-1-创建一个数据库用来保存提交的数据" class="headerlink" title="3.1 创建一个数据库用来保存提交的数据"></a>3.1 创建一个数据库用来保存提交的数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Boss</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;演示上传文件&quot;&quot;&quot;</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&quot;姓名&quot;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField(verbose_name=<span class="string">&quot;年龄&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line">    img = models.CharField(verbose_name=<span class="string">&quot;头像&quot;</span>,max_length=<span class="number">128</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-2-读取上传的文件内容，写入到文件夹中并获取文件路径，将路径保存到数据库"><a href="#3-2-读取上传的文件内容，写入到文件夹中并获取文件路径，将路径保存到数据库" class="headerlink" title="3.2 读取上传的文件内容，写入到文件夹中并获取文件路径，将路径保存到数据库"></a>3.2 读取上传的文件内容，写入到文件夹中并获取文件路径，将路径保存到数据库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">upload_list</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;===================Form操作=====================&quot;&quot;&quot;</span></span><br><span class="line">    title = <span class="string">&quot;Form上传&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = UpForm()</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;upload_list.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form, <span class="string">&quot;title&quot;</span>: title&#125;)</span><br><span class="line">    form = UpForm(data=request.POST, files=request.FILES)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        <span class="comment"># 1.读取上传的文件内容，写入到文件夹中并获取文件路径</span></span><br><span class="line">        file_obj = form.cleaned_data.get(<span class="string">&quot;img&quot;</span>)</span><br><span class="line">        db_file_path = os.path.join(<span class="string">&quot;static&quot;</span>, <span class="string">&quot;images&quot;</span>, file_obj.name)  <span class="comment"># 在数据库中存储路径</span></span><br><span class="line">        file_path = os.path.join(<span class="string">&quot;app01&quot;</span>, db_file_path)</span><br><span class="line">        f = <span class="built_in">open</span>(file_path,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> file_obj.chunks():</span><br><span class="line">            f.write(chunk)</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="comment"># 2. 将文件路径保存到数据库</span></span><br><span class="line">        models.Boss.objects.create(</span><br><span class="line">            name=form.cleaned_data[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">            age=form.cleaned_data[<span class="string">&quot;age&quot;</span>],</span><br><span class="line">            img=db_file_path,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;...&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;upload_list.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form, <span class="string">&quot;title&quot;</span>: title&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="4-media文件夹-存放用户上传文件"><a href="#4-media文件夹-存放用户上传文件" class="headerlink" title="4. media文件夹-存放用户上传文件"></a>4. media文件夹-存放用户上传文件</h2><blockquote>
<p>在urls.py 文件中进行配置</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line"><span class="keyword">from</span> day02 <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;media/(?P&lt;path&gt;.*)$&#x27;</span>,serve,&#123;<span class="string">&#x27;document_root&#x27;</span>:settings.MEDIA_ROOT&#125;,name=<span class="string">&#x27;media&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>settings.py中设置</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">&quot;media&quot;</span>)</span><br><span class="line">MEDIA_URL = <span class="string">&quot;/media/&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-混合数据上传（ModelForm）"><a href="#5-混合数据上传（ModelForm）" class="headerlink" title="5. 混合数据上传（ModelForm）"></a>5. 混合数据上传（ModelForm）</h2><ul>
<li><p>models.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">City</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;演示上传文件（ModelForm版本）&quot;&quot;&quot;</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&quot;名称&quot;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    count = models.IntegerField(verbose_name=<span class="string">&quot;人口&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># FileField会自动保存文件路径到数据库，upload_to会将文件保存到相应路径</span></span><br><span class="line">    img = models.FileField(verbose_name=<span class="string">&quot;Logo&quot;</span>, max_length=<span class="number">128</span>, upload_to=<span class="string">&#x27;city/&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义ModelForm</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UpModelForm</span>(<span class="title class_ inherited__">BootStrapModelForm</span>):</span><br><span class="line">    boot_exclude = [<span class="string">&#x27;img&#x27;</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.City</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>视图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">upload_model_list</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;上传数据（ModelForm版本）&quot;&quot;&quot;</span></span><br><span class="line">    title = <span class="string">&quot;ModelForm上传&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = UpModelForm()</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;upload_model_list.html&#x27;</span>,&#123;<span class="string">&quot;form&quot;</span>:form, <span class="string">&quot;title&quot;</span>: title&#125;)</span><br><span class="line">    form = UpModelForm(data=request.POST, files=request.FILES)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;上传成功&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;upload_model_list.html&#x27;</span>, &#123;<span class="string">&quot;form&quot;</span>: form, <span class="string">&quot;title&quot;</span>: title&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django学习</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>01.drf学习day01</title>
    <url>/2023/12/15/Python/Django-drf/01-drf%E5%AD%A6%E4%B9%A0_1/</url>
    <content><![CDATA[<h1 id="1、drf初步使用"><a href="#1、drf初步使用" class="headerlink" title="1、drf初步使用"></a>1、drf初步使用</h1><ul>
<li><p>安装：pip install djangorestframework</p>
</li>
<li><p>注册：在settings.py中</p>
<ul>
<li><pre><code class="python">INSTALLED_APPS = [
    &quot;django.contrib.staticfiles&quot;,
    &quot;app01.apps.App01Config&quot;,
    &quot;rest_framework&quot;
]
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 1、路由显示</span><br><span class="line"></span><br><span class="line">#### 1-方法一：函数方式</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"># urls.py</span><br><span class="line">from django.urls import path</span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    # path(&quot;admin/&quot;, admin.site.urls),</span><br><span class="line">    path(&quot;auth/&quot;, views.auth),</span><br><span class="line">    path(&quot;login/&quot;, views.login),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)	</span><span class="comment"># 需要使用装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> Response(&#123;<span class="string">&quot;status&quot;</span>: <span class="literal">True</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello World!&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="2-方法二：类方式-后续主要使用"><a href="#2-方法二：类方式-后续主要使用" class="headerlink" title="2-方法二：类方式 (后续主要使用)"></a>2-方法二：类方式 (后续主要使用)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;info/&quot;</span>, views.InfoView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InfoView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;status&quot;</span>: <span class="literal">True</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello view&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="2、FBV（函数视图）和CBV（类视图）"><a href="#2、FBV（函数视图）和CBV（类视图）" class="headerlink" title="2、FBV（函数视图）和CBV（类视图）"></a>2、FBV（函数视图）和CBV（类视图）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;auth/&quot;</span>, views.auth),	<span class="comment"># FBV</span></span><br><span class="line">    path(<span class="string">&quot;info/&quot;</span>, views.InfoView.as_view()),	<span class="comment"># CBV</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InfoView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request,*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request,*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request,*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, request,*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<div class="note danger flat"><p>在使用drf时，会遇见ContenType错误，解决方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在settings.py加入下面语句</span></span><br><span class="line">REST_FRAMEWORK=&#123;</span><br><span class="line">    <span class="string">&quot;UNAUTHENTICATED_USER&quot;</span>: <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</div>

<p>​	</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django-drf</category>
      </categories>
      <tags>
        <tag>Django-drf</tag>
      </tags>
  </entry>
  <entry>
    <title>0.ACM模式输入模板</title>
    <url>/2023/12/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/LeetCode%E5%88%B7%E9%A2%98/0-ACM%E6%A8%A1%E5%BC%8F%E8%BE%93%E5%85%A5/</url>
    <content><![CDATA[<h2 id="1、一行输入多个整数"><a href="#1、一行输入多个整数" class="headerlink" title="1、一行输入多个整数"></a>1、一行输入多个整数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&quot; &quot;</span>)))</span><br></pre></td></tr></table></figure>

<h2 id="2、第一行为需要输入的行数m，接下来每一行包括多个整数"><a href="#2、第一行为需要输入的行数m，接下来每一行包括多个整数" class="headerlink" title="2、第一行为需要输入的行数m，接下来每一行包括多个整数"></a>2、第一行为需要输入的行数m，接下来每一行包括多个整数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&quot; &quot;</span>)))</span><br></pre></td></tr></table></figure>

<h2 id="3、输入为字符串-每个字符串以空格隔开"><a href="#3、输入为字符串-每个字符串以空格隔开" class="headerlink" title="3、输入为字符串,每个字符串以空格隔开"></a>3、输入为字符串,每个字符串以空格隔开</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        n = <span class="built_in">input</span>().split()</span><br><span class="line">        a = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> n:</span><br><span class="line">            a.append(i)</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h2 id="4、链表"><a href="#4、链表" class="headerlink" title="4、链表"></a>4、链表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span>, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nums_to_linklist</span>(<span class="params">nums</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    root = ListNode(nums[<span class="number">0</span>])</span><br><span class="line">    node = root</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums[<span class="number">1</span>:]:</span><br><span class="line">        node.<span class="built_in">next</span> = ListNode(i)</span><br><span class="line">        node = node.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    root = nums_to_linklist(nums)</span><br><span class="line">    <span class="keyword">while</span> root:</span><br><span class="line">        <span class="built_in">print</span>(root.val, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        root = root.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>

<h2 id="5、二叉树"><a href="#5、二叉树" class="headerlink" title="5、二叉树"></a>5、二叉树</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BiTree</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span>, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nums_to_tree</span>(<span class="params">nums</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    queue = collections.deque()</span><br><span class="line">    root = BiTree(nums[<span class="number">0</span>])</span><br><span class="line">    queue.append(root)</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(nums):</span><br><span class="line">        node = queue.popleft()</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(nums) <span class="keyword">and</span> nums[i] != -<span class="number">1</span>:</span><br><span class="line">            node.left = BiTree(nums[i])</span><br><span class="line">            queue.append(node.left)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(nums) <span class="keyword">and</span> nums[i] != -<span class="number">1</span>:</span><br><span class="line">            node.right = BiTree(nums[i])</span><br><span class="line">            queue.append(node.right)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 中序遍历</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">in_order</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    in_order(root.left)</span><br><span class="line">    <span class="built_in">print</span>(root.val, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    in_order(root.right)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入 1 null 1 null 1 2</span></span><br><span class="line"><span class="comment">#    1</span></span><br><span class="line"><span class="comment">#  /  \</span></span><br><span class="line"><span class="comment"># null  1</span></span><br><span class="line"><span class="comment">#      /  \</span></span><br><span class="line"><span class="comment">#   null  1</span></span><br><span class="line"><span class="comment">#        /</span></span><br><span class="line"><span class="comment">#       2</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    nums = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;null&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;null&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>]</span><br><span class="line">    nums = [<span class="built_in">int</span>(i) <span class="keyword">if</span> i != <span class="string">&quot;null&quot;</span> <span class="keyword">else</span> -<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> nums]</span><br><span class="line">    root = nums_to_tree(nums)</span><br><span class="line">    in_order(root)</span><br></pre></td></tr></table></figure>

<h2 id="6、一些python函数"><a href="#6、一些python函数" class="headerlink" title="6、一些python函数"></a>6、一些python函数</h2><p>s为字符串<br>s.isalnum()所有字符都是数字或者字母<br>s.isalpha()所有字符都是字母<br>s.isdigit()所有字符都是数字<br>s.islower()所有字符都是小写<br>s.isupper()所有字符都是大写<br>s.istitle()所有单词都是首字母大写，像标题<br>s.isspace()所有字符都是空白字符、\t、\n、\r</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>LeetCode刷题</category>
      </categories>
      <tags>
        <tag>ACM输入模板</tag>
      </tags>
  </entry>
  <entry>
    <title>二分法</title>
    <url>/2024/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/LeetCode%E5%88%B7%E9%A2%98/%E4%BA%8C%E5%88%86%E6%B3%95/</url>
    <content><![CDATA[<h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><ul>
<li>数组一般有序，且数组元素无重复，可以考虑使用二分法</li>
<li>时间复杂度：O（logN）</li>
</ul>
<h2 id="两种写法"><a href="#两种写法" class="headerlink" title="两种写法"></a>两种写法</h2><h3 id="1、左闭右闭区间"><a href="#1、左闭右闭区间" class="headerlink" title="1、左闭右闭区间"></a>1、左闭右闭区间</h3><p>右指针：right &#x3D; len(nums) - 1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">nums,target</span>):</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(nums)-<span class="number">1</span>	<span class="comment"># 左闭右闭区间</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right：	<span class="comment"># 当left=right时，是有意义的</span></span><br><span class="line">    	mid = left + (right-left)//<span class="number">2</span>	<span class="comment"># 防止溢出</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">if</span> nums[mid] &gt; target:	<span class="comment"># 此时mid处肯定不是target，所以right = mid -1</span></span><br><span class="line">            right = mid -<span class="number">1</span>	</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">     <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="2、左闭右开区间"><a href="#2、左闭右开区间" class="headerlink" title="2、左闭右开区间"></a>2、左闭右开区间</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">nums,target</span>):</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(nums)	<span class="comment"># 左闭右开区间</span></span><br><span class="line">    <span class="keyword">while</span> left &lt; right：	<span class="comment"># 当left=right时，没有意义的</span></span><br><span class="line">    	mid = left + (right-left)//<span class="number">2</span>	<span class="comment"># 防止溢出</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">if</span> num[mid] &gt; target:	</span><br><span class="line">            right = mid	<span class="comment"># 因为是开区间，此时right可以使mid</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">     <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="3、左开右开区间"><a href="#3、左开右开区间" class="headerlink" title="3、左开右开区间"></a>3、左开右开区间</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">nums,target</span>):</span><br><span class="line">    left = -<span class="number">1</span></span><br><span class="line">    right = <span class="built_in">len</span>(nums)	<span class="comment"># 左开右开区间</span></span><br><span class="line">    <span class="keyword">while</span> left + <span class="number">1</span> &lt; right：	<span class="comment"># 当left=right时，没有意义的</span></span><br><span class="line">    	mid = left + (right-left)//<span class="number">2</span>	<span class="comment"># 防止溢出</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">if</span> num[mid] &gt; target:	</span><br><span class="line">            right = mid	<span class="comment"># 因为是开区间，此时right可以使mid</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = mid</span><br><span class="line">     <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>L - 1始终是红色；R+1始终是蓝色</p>
<h2 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h2><h3 id="33-搜索旋转排序数组"><a href="#33-搜索旋转排序数组" class="headerlink" title="33. 搜索旋转排序数组"></a><a href="https://leetcode.cn/problems/search-in-rotated-sorted-array/">33. 搜索旋转排序数组</a></h3><ul>
<li>题目中数组中的值是互不相同的， 输入的数组nums是将有序数组旋转得来的</li>
</ul>
<p><strong>思路：</strong></p>
<ul>
<li>采用二分方法，先找到mid，判断nums[mid] &#x3D;&#x3D; target?，如果相同直接返回mid</li>
<li>如果不相同，则分为两种情况：<ul>
<li>mid的左半边区域有序：nums[0]&lt;&#x3D;nums[mid]<ul>
<li>判断target是否在nums[0] ~ nums[mid]区间：if nums[0]&lt;&#x3D; target &lt; nums[mid]: right &#x3D; mid -1 else: left &#x3D; mid + 1</li>
</ul>
</li>
<li>mid的右半边区域有序：nums[0]&gt;nums[mid]，则nums[mid] ~ nums[lenn(nums)-1]区间有序<ul>
<li>判断target是否在nums[mid] ~ nums[lenn(nums)-1]区间：if nums[mid]&lt; target &lt;&#x3D; nums[len(nujms)-1]: left &#x3D; mid + 1 else: right &#x3D; mid -1</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(nums)-<span class="number">1</span> <span class="comment"># 左闭右闭区间</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = left + (right-left)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">if</span> nums[<span class="number">0</span>]&lt;=nums[mid]:   <span class="comment"># 说明mid左半边是有序的</span></span><br><span class="line">                <span class="keyword">if</span> nums[<span class="number">0</span>]&lt;= target &lt; nums[mid]:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:   <span class="comment"># 否则在mid的右半区间是有序的</span></span><br><span class="line">                <span class="keyword">if</span> nums[mid]&lt; target &lt;= nums[<span class="built_in">len</span>(nums)-<span class="number">1</span>]:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid -<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>  </span><br></pre></td></tr></table></figure>

<h3 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></h3><ul>
<li>数组按非递减顺序排列，其中目标值可能不只一个</li>
</ul>
<p>思路：</p>
<ul>
<li><p>先找第一个目标值：使用二分法查找</p>
<ul>
<li>注意：返回的值是left指针</li>
</ul>
</li>
<li><p>第一个值得到后先判断是否是想要的目标值：if start &#x3D;&#x3D; len(nums) or nums[start] !&#x3D; target: return [-1, -1]</p>
</li>
<li><p>如果第一个值是目标值，则目标元素的最后一个位置一定存在</p>
<ul>
<li>这里使用二分查找比目标值大1的数的位置</li>
<li>找到该位置后，-1就是目标值的最后一个位置</li>
</ul>
</li>
<li><p>有序数组中二分查找的四种类型（下面的转换仅适用于数组中都是整数）<br>   1. 第一个大于等于x的下标： low_bound(x)<br>   2. 第一个大于x的下标：可以转换为<code>第一个大于等于 x+1 的下标</code> ，low_bound(x+1)<br>   3. 最后一个小于x的下标：可以转换为<code>第一个大于等于 x 的下标</code> 的<code>左边位置</code>, low_bound(x) - 1;<br>   4. 最后一个小于等于x的下标：可以转换为<code>第一个大于等于 x+1 的下标</code> 的 <code>左边位置</code>, low_bound(x+1) - 1;</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="comment"># 使用二分法找到元素</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">selef, nums, target</span>):</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(nums)-<span class="number">1</span>  <span class="comment"># 左闭右闭区间</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:  <span class="comment"># 当left=right时，是有意义的</span></span><br><span class="line">            mid = left + (right-left)//<span class="number">2</span>  <span class="comment"># 防止溢出</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt; target:</span><br><span class="line">                left = mid + <span class="number">1</span>	<span class="comment"># 范围缩小到[mid+1, right]</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid - <span class="number">1</span>	<span class="comment"># 范围缩小到[left, mid-1]</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line">    <span class="comment"># 左开右开区间，right最终指向答案</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search2</span>(<span class="params">selef, nums, target</span>):</span><br><span class="line">        left = -<span class="number">1</span></span><br><span class="line">        right = <span class="built_in">len</span>(nums)  <span class="comment"># 左开右开区间</span></span><br><span class="line">        <span class="keyword">while</span> left + <span class="number">1</span> &lt; right:  <span class="comment"># 当left=right时，没有有意义的</span></span><br><span class="line">            mid = left + (right-left)//<span class="number">2</span>  <span class="comment"># 防止溢出</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt; target:</span><br><span class="line">                left = mid	</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid	</span><br><span class="line">        <span class="keyword">return</span> right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchRange</span>(<span class="params">self, nums, target: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">        start = self.search(nums, target)</span><br><span class="line">        <span class="keyword">if</span> start == <span class="built_in">len</span>(nums) <span class="keyword">or</span> nums[start] != target:</span><br><span class="line">            <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 如果start存在，则end一定存在</span></span><br><span class="line">        end = self.search(nums, target+<span class="number">1</span>) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> [start, end]</span><br></pre></td></tr></table></figure>

<h3 id="287-寻找重复数"><a href="#287-寻找重复数" class="headerlink" title="287. 寻找重复数"></a><a href="https://leetcode.cn/problems/find-the-duplicate-number/">287. 寻找重复数</a></h3><p>给定一个包含 <code>n + 1</code> 个整数的数组 <code>nums</code> ，其数字都在 <code>[1, n]</code> 范围内（包括 <code>1</code> 和 <code>n</code>），可知至少存在一个重复的整数。假设 <code>nums</code> 只有 <strong>一个重复的整数</strong> ，返回 <strong>这个重复的数</strong> 。</p>
<ul>
<li><p>该数组并没有说一定有序</p>
</li>
<li><p><code>1 &lt;= nums[i] &lt;= n</code></p>
</li>
<li><p>数组的长度限制了数组的元素取值</p>
</li>
<li><p>题目要找的是一个 <strong>整数</strong>，并且这个整数有明确的范围，所以可以使用「二分查找」。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_duplicate</span>(<span class="params">nums</span>):</span><br><span class="line">    left, right = <span class="number">1</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">    <span class="comment"># 通过计数检查重复数字是在i之前还是之后</span></span><br><span class="line">    <span class="comment"># 如果小于等于i的数字个数也小于等于i，就说明还没遇到重复数字</span></span><br><span class="line">    <span class="comment"># 反之，则说明遇到了重复数字（也可能就是i）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> i &lt;= mid:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> count &gt; mid:</span><br><span class="line">            right = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure>

<h3 id="162-寻找峰值"><a href="#162-寻找峰值" class="headerlink" title="162. 寻找峰值"></a><a href="https://leetcode.cn/problems/find-peak-element/">162. 寻找峰值</a></h3><ul>
<li>峰值左边的元素都小于它，峰值及峰值右边元素是大于等于它，因此数组随后一位元素一定属于峰值或峰值右边，所以二分区间为[0, n-2]，写成开区间就是(-1, n-1)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findPeakElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 峰值左边设为红色，峰值及峰值右边设为蓝色，则n-1即最后一个位置为蓝色，所以区间范围变成【0，n-2】</span></span><br><span class="line">        <span class="comment"># 闭区间[0，n-2]转换成开区间就是[-1,n-1]</span></span><br><span class="line">        l = -<span class="number">1</span></span><br><span class="line">        r = <span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l+<span class="number">1</span>  &lt; r:</span><br><span class="line">            mid = l + (r-l)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid]&gt;nums[mid+<span class="number">1</span>]:   <span class="comment"># mid右半边都是蓝色</span></span><br><span class="line">                r = mid</span><br><span class="line">            <span class="keyword">else</span>:   <span class="comment"># mid左半边都是红色</span></span><br><span class="line">                l = mid</span><br><span class="line">        <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure>

<h3 id="240-搜索二维矩阵-II"><a href="#240-搜索二维矩阵-II" class="headerlink" title="240. 搜索二维矩阵 II"></a><a href="https://leetcode.cn/problems/search-a-2d-matrix-ii/">240. 搜索二维矩阵 II</a></h3><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2024/03/3ad86d1afd4747bcabf4c204385ee10c.png" alt="image-20240314155922599" style="zoom: 67%;" />

<ul>
<li><p>方法1：从矩阵左下角元素matrix[i,j] 进行二分查找。</p>
<ul>
<li>如果 matrix[i,j]&#x3D;&#x3D;target，则找到该元素；</li>
<li>如果matrix[i,j] &lt; target，说明该元素第j列元素都小于target，所以 j +&#x3D; 1；</li>
<li>如果matrix[i,j] &gt; target，说明该元素第j列元素都大于target，所以 i -&#x3D; 1；</li>
</ul>
</li>
<li><p>方法二：先取矩阵的第一行，然后在该行进行二分查找target，没有找到就取第二行元素进行二分查找，依次遍历矩阵。该方法最坏情况的时间复杂度为 <strong>O(MlogN)</strong></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 法一：时间复杂度：O(logN)；空间复杂度：O(1)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchMatrix</span>(<span class="params">self, matrix, target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        m, n = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 从左下角元素开始进行二分</span></span><br><span class="line">        i = m-<span class="number">1</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 什么时候结束，while i&gt;=0 and j&lt;n</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> j &lt; n:</span><br><span class="line">            <span class="keyword">if</span> matrix[i][j] == target:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> matrix[i][j] &lt; target:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 法二：时间复杂度：最坏O(MlogN)；空间复杂度：O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">arr, target</span>):</span><br><span class="line">    l = <span class="number">0</span></span><br><span class="line">    r = <span class="built_in">len</span>(arr)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">        mid = (l+r)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> arr[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> arr[mid] &gt; target:</span><br><span class="line">            r = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> l &lt; <span class="built_in">len</span>(arr) <span class="keyword">and</span> arr[l] == target:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution2</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchMatrix</span>(<span class="params">self, matrix, target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        m, n = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])    <span class="comment"># m = 5, n = 5</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">if</span> search(matrix[i], target):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="153-寻找旋转排序数组中的最小值"><a href="#153-寻找旋转排序数组中的最小值" class="headerlink" title="153. 寻找旋转排序数组中的最小值"></a><a href="https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/">153. 寻找旋转排序数组中的最小值</a></h3><ul>
<li><p>数组元素互不相同，且升序排列</p>
</li>
<li><p>思路：首先找到中间值mid，比较nums[mid] 和 nums[-1]，如果nums[mid] &gt; nums[-1]，表明mid最小值不在左边区间，此时移动左指针 l &#x3D; mid +1；如果nums[mid] &lt;&#x3D; nums[-1], 表明mid右边区间是顺序的，因此找最小值需要右指针往左缩：r &#x3D; mid-1；当l&gt;r时结束循环，返回num[l]为答案</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findMin</span>(<span class="params">self, nums</span>):</span><br><span class="line">        l,r = <span class="number">0</span>, <span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">            mid = (l+r)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &gt; nums[-<span class="number">1</span>]:</span><br><span class="line">                l = mid +<span class="number">1</span> </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                r = mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> nums[l]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>LeetCode刷题</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树</title>
    <url>/2023/09/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/LeetCode%E5%88%B7%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<p>结点：树中的元素，包含一个数据元素及若干指向子树的分支<br />结点的度：结点拥有的子树数量<br /></p>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/d7b34fd25025a8458071b3bc9c156093.png" alt="image"><a name="A7udv"></a></p>
<h2 id="1、什么是二叉树？"><a href="#1、什么是二叉树？" class="headerlink" title="1、什么是二叉树？"></a>1、什么是二叉树？</h2><p><strong>定义：二叉树是每个结点最多有两个子树的树结构</strong><br /><strong>应用：</strong>1、window和linux等文件管理系统都是树型结构<br />    2、二叉树的中序遍历形式被用来存放C 语言中的表达式<br />    3、二叉排序树被用于数据的排序和快速查找。<br />    4、霍夫曼编码</p>
<ul>
<li>结点：树中的元素，包含一个数据元素及若干指向子树的分支</li>
<li>结点的度：结点拥有的子树数量</li>
<li>叶子结点就是度为0的结点</li>
<li><strong>二叉树的高度：</strong>指从根节点到叶子节点的最长路径上的节点数</li>
<li><strong>二叉树的某节点深度：</strong>指从根节点到该节点的最长路径上的节点数<br><a name="Iw6Qt"></a></li>
</ul>
<h3 id="1-1-满二叉树"><a href="#1-1-满二叉树" class="headerlink" title="1.1 满二叉树"></a>1.1 满二叉树</h3><p>如果一棵二叉树只有度为0的结点和度为2的结点，并且度为0的结点在同一层上，则这棵二叉树为满二叉树。<strong>也可以说深度为k，有2^k-1个节点的二叉树。</strong><br><a name="LnZrX"></a></p>
<h3 id="1-2-完全二叉树"><a href="#1-2-完全二叉树" class="headerlink" title="1.2 完全二叉树"></a>1.2 完全二叉树</h3><p>在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。<strong>特点</strong>：所有子节点都出现在第k层或k-1层。<br><a name="BKOmj"></a></p>
<h3 id="1-3-二叉搜索树"><a href="#1-3-二叉搜索树" class="headerlink" title="1.3 二叉搜索树"></a>1.3 二叉搜索树</h3><p>二叉搜索树是一个有序树</p>
<ul>
<li>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li>
<li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li>
<li>它的左、右子树也分别为二叉排序树<br><a name="xaBDA"></a></li>
</ul>
<h3 id="1-4-平衡二叉搜索树"><a href="#1-4-平衡二叉搜索树" class="headerlink" title="1.4 平衡二叉搜索树"></a>1.4 平衡二叉搜索树</h3><p>又称AVL树。具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p>
<ul>
<li><strong>C++中map、set、multimap，multiset的底层实现都是平衡二叉搜索树</strong>，所以map、set的增删操作时间时间复杂度是logn<br><a name="QGY4k"></a></li>
</ul>
<h3 id="1-5-代码定义树节点"><a href="#1-5-代码定义树节点" class="headerlink" title="1.5 代码定义树节点"></a>1.5 代码定义树节点</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br></pre></td></tr></table></figure>
<p><a name="jR37Y"></a></p>
<h2 id="2、二叉树遍历"><a href="#2、二叉树遍历" class="headerlink" title="2、二叉树遍历"></a>2、二叉树遍历</h2><p>二叉树主要有两种遍历方式：</p>
<ol>
<li><strong>深度优先遍历</strong>：先往深走，遇到叶子节点再往回走。</li>
<li><strong>广度优先遍历</strong>：一层一层的去遍历。</li>
</ol>
<ul>
<li>深度优先遍历<ul>
<li>前序遍历（递归法，迭代法）</li>
<li>中序遍历（递归法，迭代法）</li>
<li>后序遍历（递归法，迭代法）</li>
</ul>
</li>
<li>广度优先遍历<ul>
<li>层次遍历（迭代法）<br> <a name="LA7Uv"></a></li>
</ul>
</li>
</ul>
<h3 id="2-1-递归遍历"><a href="#2-1-递归遍历" class="headerlink" title="2.1 递归遍历"></a>2.1 递归遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前序遍历</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">preorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:    <span class="comment"># 根节点为空就返回空列表，不用再遍历下去了。</span></span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        left = self.preorderTraversal(root.left)</span><br><span class="line">        right = self.preorderTraversal(root.right)</span><br><span class="line">        <span class="keyword">return</span> [root.val] + left + right</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 中序遍历</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        left = self.inorderTraversal(root.left)</span><br><span class="line">        right = self.inorderTraversal(root.right)</span><br><span class="line">        <span class="keyword">return</span> left + [root.val] + right</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 后序遍历</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">postorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        left = self.postorderTraversal(root.left)</span><br><span class="line">        right = self.postorderTraversal(root.right)</span><br><span class="line">        <span class="keyword">return</span> left + right + [root.val]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a name="se6AH"></a></p>
<h3 id="2-2-非递归遍历"><a href="#2-2-非递归遍历" class="headerlink" title="2.2 非递归遍历"></a>2.2 非递归遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    统一格式的非递归写法</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 前序遍历：中左右，那么代码顺序是右左中</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">preorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        stack = [root]</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> node != <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> node.right:  <span class="comment"># 右</span></span><br><span class="line">                    stack.append(node.right)</span><br><span class="line">                <span class="keyword">if</span> node.left:   <span class="comment"># 左</span></span><br><span class="line">                    stack.append(node.left)</span><br><span class="line">                stack.append(node)  <span class="comment"># 中</span></span><br><span class="line">                stack.append(<span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = stack.pop()</span><br><span class="line">                result.append(node.val)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 中序遍历：左中右，那么代码顶序是右中左</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        stack = [root]</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> node != <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> node.right:  <span class="comment"># 右</span></span><br><span class="line">                    stack.append(node.right)</span><br><span class="line">                stack.append(node)  <span class="comment"># 中</span></span><br><span class="line">                stack.append(<span class="literal">None</span>)</span><br><span class="line">                <span class="keyword">if</span> node.left:   <span class="comment"># 左</span></span><br><span class="line">                    stack.append(node.left)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = stack.pop()</span><br><span class="line">                result.append(node.val)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="comment">#  后序遍历：左右中，那么代码顶序是中右左</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        stack = [root]</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> node != <span class="literal">None</span>:</span><br><span class="line">                stack.append(node)  <span class="comment"># 中</span></span><br><span class="line">                stack.append(<span class="literal">None</span>)</span><br><span class="line">                <span class="keyword">if</span> node.right:  <span class="comment"># 右</span></span><br><span class="line">                    stack.append(node.right)</span><br><span class="line">                <span class="keyword">if</span> node.left:   <span class="comment"># 左</span></span><br><span class="line">                    stack.append(node.left)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = stack.pop()</span><br><span class="line">                result.append(node.val)</span><br><span class="line">        <span class="keyword">return</span> result          </span><br></pre></td></tr></table></figure>
<p><a name="pHizx"></a></p>
<h3 id="2-3-102-层序遍历"><a href="#2-3-102-层序遍历" class="headerlink" title="2.3  102 层序遍历"></a>2.3  102 层序遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用队列法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">levelOrder</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:    <span class="comment"># 判断根节点是否为空</span></span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        queue = collections.deque([root])   <span class="comment"># 引入队列</span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            level = []</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(queue)):</span><br><span class="line">                node = queue.popleft()  <span class="comment"># 从队列左端删除</span></span><br><span class="line">                level.append(node.val)</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    queue.append(node.right)</span><br><span class="line">            result.append(level)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<p><a name="iqNY4"></a></p>
<h3 id="2-4-算法题"><a href="#2-4-算法题" class="headerlink" title="2.4 算法题"></a>2.4 算法题</h3><p><a name="c3vfT"></a></p>
<h4 id="107-二叉树的层序遍历II"><a href="#107-二叉树的层序遍历II" class="headerlink" title="107.二叉树的层序遍历II"></a>107.二叉树的层序遍历II</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将层序遍历的结果倒序输出</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">levelOrderBottom</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []     </span><br><span class="line">        queue = collections.deque([root])</span><br><span class="line">        result = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            level = [] <span class="comment"># 记录每一层</span></span><br><span class="line">            n = <span class="built_in">len</span>(queue)</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                node = queue.popleft()</span><br><span class="line">                level.append(node.val)</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    queue.append(node.right)</span><br><span class="line">            result.append(level)</span><br><span class="line">        <span class="keyword">return</span> result[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p><a name="iogrB"></a></p>
<h4 id="199-二叉树的右视图"><a href="#199-二叉树的右视图" class="headerlink" title="199.二叉树的右视图"></a><a href="https://leetcode.cn/problems/binary-tree-right-side-view/">199.二叉树的右视图</a></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rightSideView</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        queue = collections.deque([root])</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            level = []</span><br><span class="line">            n = <span class="built_in">len</span>(queue)</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                node = queue.popleft()</span><br><span class="line">                level.append(node.val)</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    queue.append(node.right)</span><br><span class="line">            result.append(level[-<span class="number">1</span>])	<span class="comment"># 将每一层的最后一位数添加到列表中</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<p><a name="PwPJO"></a></p>
<h4 id="637-二叉树的层平均值"><a href="#637-二叉树的层平均值" class="headerlink" title="637.二叉树的层平均值"></a><a href="https://leetcode.cn/problems/average-of-levels-in-binary-tree/">637.二叉树的层平均值</a></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">averageOfLevels</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="type">List</span>[<span class="built_in">float</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        </span><br><span class="line">        queue = collections.deque([root])</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            level = <span class="number">0</span></span><br><span class="line">            n = <span class="built_in">len</span>(queue)</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                node = queue.popleft()</span><br><span class="line">                level += node.val</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    queue.append(node.right)          </span><br><span class="line">            result.append(level/n)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<p><a name="vjy3r"></a></p>
<h4 id="429-N-叉树的层序遍历"><a href="#429-N-叉树的层序遍历" class="headerlink" title="429.N 叉树的层序遍历"></a><a href="https://leetcode.cn/problems/n-ary-tree-level-order-traversal/">429.N 叉树的层序遍历</a></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="literal">None</span>, children=<span class="literal">None</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.children = children</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">levelOrder</span>(<span class="params">self, root: <span class="string">&#x27;Node&#x27;</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        queue = collections.deque([root])</span><br><span class="line">        result = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            level = []</span><br><span class="line">            n = <span class="built_in">len</span>(queue)</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                node = queue.popleft()</span><br><span class="line">                level.append(node.val)</span><br><span class="line">                <span class="keyword">for</span> child <span class="keyword">in</span> node.children:</span><br><span class="line">                    queue.append(child)</span><br><span class="line"></span><br><span class="line">            result.append(level)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<p><a name="vPYE6"></a></p>
<h4 id="515-在每个树行中找最大值"><a href="#515-在每个树行中找最大值" class="headerlink" title="515.在每个树行中找最大值"></a><a href="https://leetcode.cn/problems/find-largest-value-in-each-tree-row/">515.在每个树行中找最大值</a></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">largestValues</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        queue = collections.deque([root])</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            level = []</span><br><span class="line">            n = <span class="built_in">len</span>(queue)</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                node = queue.popleft()</span><br><span class="line">                level.append(node.val)</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    queue.append(node.right)</span><br><span class="line">            ans.append(<span class="built_in">max</span>(level))</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/"><strong>104.二叉树的最大深度</strong></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxDepth</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        queue = collections.deque([root])</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            ans += <span class="number">1</span></span><br><span class="line">            n = <span class="built_in">len</span>(queue)</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                node = queue.popleft()</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    queue.append(node.right) </span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxDepth</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left = self.maxDepth(node.left)</span><br><span class="line">        right = self.maxDepth(node.right)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(left,right) + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>需要收集孩子节点的信息返回给上一层时，再用后续遍历</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>LeetCode刷题</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算</title>
    <url>/2023/12/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/LeetCode%E5%88%B7%E9%A2%98/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h1 id="python中的位运算"><a href="#python中的位运算" class="headerlink" title="python中的位运算"></a>python中的位运算</h1><ul>
<li>左移 &lt;&lt;：位运算左移一位 &lt;&lt;1 相当于乘以二</li>
<li>右移 &gt;&gt;：位运算左移一位 &gt;&gt;1 相当于除以二</li>
<li>按位或|：同时为0才为0，其余为1</li>
<li>按位与&amp;：同时为1才为1，其余为0</li>
<li>异或 ^ ：相同为0，不同为1</li>
</ul>
<h2 id="一、-模板代码"><a href="#一、-模板代码" class="headerlink" title="一、 模板代码"></a>一、 模板代码</h2><h3 id="1-仅剩二进制最低位1，其余置0：x-x"><a href="#1-仅剩二进制最低位1，其余置0：x-x" class="headerlink" title="1. 仅剩二进制最低位1，其余置0：x&amp;-x"></a>1. 仅剩二进制最低位1，其余置0：x&amp;-x</h3><ul>
<li>考虑数 x &#x3D; 100010</li>
<li>x取反 ~x &#x3D; 011101</li>
<li>~x+1即-x &#x3D; 011110</li>
<li>发现x&amp;-x正好只剩下最低位的1</li>
</ul>
<h3 id="2-去掉最低位的1，保留其余位：x-x-1"><a href="#2-去掉最低位的1，保留其余位：x-x-1" class="headerlink" title="2. 去掉最低位的1，保留其余位：x &amp;&#x3D; (x-1)"></a>2. 去掉最低位的1，保留其余位：x &amp;&#x3D; (x-1)</h3><ul>
<li>考虑数 x &#x3D; 100010</li>
<li>则x-1 : x &#x3D; 100001</li>
<li>x &amp;(x-1) &#x3D; 100000</li>
</ul>
<h3 id="3-把最低位的0置1其余保留-填上最低位的0-：x-x-1"><a href="#3-把最低位的0置1其余保留-填上最低位的0-：x-x-1" class="headerlink" title="3. 把最低位的0置1其余保留(填上最低位的0)：x |&#x3D; x+1"></a>3. 把最低位的0置1其余保留(填上最低位的0)：x |&#x3D; x+1</h3><ul>
<li>考虑x &#x3D; 100101</li>
<li>x+1 &#x3D; 100110</li>
<li>x|(x+1) &#x3D; 100111</li>
</ul>
<h3 id="4-判断一个数x是不是2的次幂-x的因子只含2或1-x-0-and-x-x-1-0"><a href="#4-判断一个数x是不是2的次幂-x的因子只含2或1-x-0-and-x-x-1-0" class="headerlink" title="4. 判断一个数x是不是2的次幂(x的因子只含2或1) x&gt;0 and x&amp;(x-1) &#x3D;&#x3D; 0"></a>4. 判断一个数x是不是2的次幂(x的因子只含2或1) x&gt;0 and x&amp;(x-1) &#x3D;&#x3D; 0</h3><ul>
<li>去掉lowbit就是0，那么说明这个数只含一个1。</li>
</ul>
<h3 id="5-判断一个数x是否含有相邻的1，x-1-x-0"><a href="#5-判断一个数x是否含有相邻的1，x-1-x-0" class="headerlink" title="5. 判断一个数x是否含有相邻的1，x&gt;&gt;1&amp;x&gt;0"></a>5. 判断一个数x是否含有相邻的1，x&gt;&gt;1&amp;x&gt;0</h3><ul>
<li>把x右移一位，和自己与操作，如果还有1则说明有相邻的1。</li>
</ul>
<h3 id="6-判断一个数x是否含有相邻的0（不考虑前导0），x-x-1-return-x-x-1-0"><a href="#6-判断一个数x是否含有相邻的0（不考虑前导0），x-x-1-return-x-x-1-0" class="headerlink" title="6. 判断一个数x是否含有相邻的0（不考虑前导0），x|&#x3D;x&gt;&gt;1;return x&amp;(x+1)&gt;0"></a>6. 判断一个数x是否含有相邻的0（不考虑前导0），x|&#x3D;x&gt;&gt;1;return x&amp;(x+1)&gt;0</h3><ul>
<li>把x右移一位，和自己与操作，如果还有1则说明有相邻的1。</li>
</ul>
<h3 id="7-判断一个数x的二进制里是不是全是1（不考虑前导0），x-x-1-0"><a href="#7-判断一个数x的二进制里是不是全是1（不考虑前导0），x-x-1-0" class="headerlink" title="7. 判断一个数x的二进制里是不是全是1（不考虑前导0），x&amp;(x+1)&#x3D;&#x3D;0"></a>7. 判断一个数x的二进制里是不是全是1（不考虑前导0），x&amp;(x+1)&#x3D;&#x3D;0</h3><ul>
<li>x+&#x3D;1;return x&amp;(x-1)&#x3D;&#x3D;0即可。</li>
<li>全1的数加上1一定是个2的次幂。</li>
</ul>
<h2 id="二、题目"><a href="#二、题目" class="headerlink" title="二、题目"></a>二、题目</h2><h3 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136. 只出现一次的数字"></a><a href="https://leetcode.cn/problems/single-number/">136. 只出现一次的数字</a></h3><p>思路：</p>
<ul>
<li>使用异或运算，设一个变量a &#x3D; 0，遍历异或数组的每个元素</li>
<li>除了某个元素只出现一次以外，其余每个元素均出现两次。偶数次异或皆为0，最后只剩出现一次的数，就是答案</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">singleNumber</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            ans ^= i</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

<h3 id="137-只出现一次的数字-II"><a href="#137-只出现一次的数字-II" class="headerlink" title="137. 只出现一次的数字 II"></a><a href="https://leetcode.cn/problems/single-number-ii/">137. 只出现一次的数字 II</a></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">singleNumber</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        t = [<span class="number">0</span>]*<span class="number">32</span></span><br><span class="line">        <span class="comment"># t[0]表示 0位置的1出现了几次</span></span><br><span class="line">        <span class="comment"># t[1]表示 1位置的1出现了几次</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">                <span class="keyword">if</span> (i &gt;&gt; j) &amp; <span class="number">1</span>: <span class="comment"># 如果i的第j位为1，则&amp;1 结果为1，累加t的该位置1的个数</span></span><br><span class="line">                    t[j] += <span class="number">1</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            <span class="keyword">if</span> t[i]%<span class="number">3</span>: <span class="comment"># 如果t[i] % m != 0，则表示在该位置上为1的的数量不是m的整数倍，还包含k次出现的数</span></span><br><span class="line">                ans |= (<span class="number">1</span>&lt;&lt;i)</span><br><span class="line">        <span class="comment"># python 中当输出是负数时，会把32位有符号整型认为成无符号整型，就会报错，要对结果做如下修改：</span></span><br><span class="line">        <span class="keyword">if</span> ans&gt; <span class="number">2</span>**<span class="number">31</span>-<span class="number">1</span>:</span><br><span class="line">            ans -= <span class="number">2</span>**<span class="number">32</span> </span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

<h3 id="260-只出现一次的数字-III"><a href="#260-只出现一次的数字-III" class="headerlink" title="260. 只出现一次的数字 III"></a><a href="https://leetcode.cn/problems/single-number-iii/">260. 只出现一次的数字 III</a></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">singleNumber</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        xor_result = <span class="number">0</span> <span class="comment"># 设置一个变量来遍历异或</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            xor_result ^= i</span><br><span class="line">        <span class="comment"># 3.因为两个奇数次数a和b是两种数，所以遍历完以后xor_result = a ^ b,且xor_result != 0</span></span><br><span class="line">        <span class="comment">#   因为a和b是不同的数 所以异或结果一定存在某一位上为1，则a和b在该位置一定是分别为1和0.</span></span><br><span class="line">        <span class="comment"># 4.然后找到xor_result最右边的1</span></span><br><span class="line">        right_one = xor_result &amp; (-xor_result)</span><br><span class="line">  </span><br><span class="line">     <span class="comment"># 现在用两个变量再去遍历异或，这就分为了两组，一组是该位置为1，另一组是为0，遍历完就能提取出这两个数。</span></span><br><span class="line">        num1, num2 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> (i &amp; right_one):</span><br><span class="line">                num1 ^= i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num2 ^= i</span><br><span class="line">        <span class="keyword">return</span> [num1,num2]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>LeetCode刷题</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>双指针</title>
    <url>/2024/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/LeetCode%E5%88%B7%E9%A2%98/%E5%8F%8C%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><h2 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h2><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2024/03/56d9b8e13b1421bf1fba9a4a0ef503c4.png" alt="image-20240311205603588"></p>
<h3 id="88-合并两个有序数组"><a href="#88-合并两个有序数组" class="headerlink" title="88. 合并两个有序数组"></a><a href="https://leetcode.cn/problems/merge-sorted-array/">88. 合并两个有序数组</a></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], m: <span class="built_in">int</span>, nums2: <span class="type">List</span>[<span class="built_in">int</span>], n: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 使用三个指针，p1,p2,p = m-1,n-1,m+n-1,比较p1和p2处的值，谁大就和p交换位置，之后p移到下一个位置</span></span><br><span class="line">        p1,p2,p = m-<span class="number">1</span>,n-<span class="number">1</span>,m+n-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> p2&gt;=<span class="number">0</span>: <span class="comment"># nums2数组还有元素</span></span><br><span class="line">            <span class="keyword">if</span> p1&gt;=<span class="number">0</span> <span class="keyword">and</span> nums1[p1]&gt;nums2[p2]:</span><br><span class="line">                nums1[p] = nums1[p1]</span><br><span class="line">                p1 -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums1[p] = nums2[p2]</span><br><span class="line">                p2 -= <span class="number">1</span></span><br><span class="line">            p -= <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="125-验证回文串"><a href="#125-验证回文串" class="headerlink" title="125. 验证回文串"></a><a href="https://leetcode.cn/problems/valid-palindrome/">125. 验证回文串</a></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="comment"># 双指针方法</span></span><br><span class="line">        s=s.lower()</span><br><span class="line">        l,r = <span class="number">0</span>,<span class="built_in">len</span>(s)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;r:</span><br><span class="line">            <span class="keyword">while</span> l&lt;<span class="built_in">len</span>(s)-<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">not</span> s[l].isalnum():</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> r&gt;<span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> s[r].isalnum():</span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> s[l].isalnum() <span class="keyword">and</span> s[r].isalnum():</span><br><span class="line">                <span class="keyword">if</span> s[l]!=s[r]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                l+=<span class="number">1</span></span><br><span class="line">                r-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h2 id="同向双指针（快慢）"><a href="#同向双指针（快慢）" class="headerlink" title="同向双指针（快慢）"></a>同向双指针（快慢）</h2><h3 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a><a href="https://leetcode.cn/problems/move-zeroes/">283. 移动零</a></h3><ul>
<li>同向快慢双指针：快指针每次循环走一步，当快指针遇到非0元素时，慢指针走一步，并且此时交换快慢指针的元素，否则慢指针不移动</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">moveZeroes</span>(<span class="params">self, nums</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        low,fast = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> fast &lt; <span class="built_in">len</span>(nums):	<span class="comment">#不超过边界</span></span><br><span class="line">            <span class="keyword">if</span> nums[fast] != <span class="number">0</span>:</span><br><span class="line">                nums[low],nums[fast] = nums[fast],nums[low]</span><br><span class="line">                low += <span class="number">1</span></span><br><span class="line">            fast += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26. 删除有序数组中的重复项</a></h3><ul>
<li>数组非严格递增，<strong>原地</strong>删除重复元素，返回删除后的数组长度</li>
<li>思路：快慢指针，如果nums[low] !&#x3D; nums[fast]则 慢指针右移一步，并交换nums[low],nums[fast] &#x3D; nums[fast],nums[low]，快指针每次循环右移一步。</li>
<li>注意：fast +&#x3D; 1应该写在if后面，否则会出现溢出错误</li>
<li>最后，low指针左侧的元素为唯一项，返回数组长度low+1</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeDuplicates</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        low,fast = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> fast&lt;<span class="built_in">len</span>(nums):           </span><br><span class="line">            <span class="keyword">if</span> nums[low] != nums[fast]:</span><br><span class="line">                low += <span class="number">1</span>	<span class="comment"># 注意先移动慢指针，再交换元素</span></span><br><span class="line">                nums[low],nums[fast] = nums[fast],nums[low]</span><br><span class="line">            fast += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> low+<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        l,f = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> f&lt;<span class="built_in">len</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> nums[f]!=val:</span><br><span class="line">                nums[l],nums[f] = nums[f],nums[l]	<span class="comment"># # 注意先交换元素，再移动慢指针</span></span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">            f += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure>

<h2 id="相向双指针"><a href="#相向双指针" class="headerlink" title="相向双指针"></a>相向双指针</h2><h3 id="167-两数之和-II-输入有序数组"><a href="#167-两数之和-II-输入有序数组" class="headerlink" title="167. 两数之和 II - 输入有序数组"></a><a href="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/">167. 两数之和 II - 输入有序数组</a></h3><ul>
<li>数组下标从1开始，所以之后返回的双指针得要+1</li>
<li>数组非递减顺序排列</li>
<li>每个target只对应唯一的答案</li>
<li>空间要求O(1)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 时间复杂度O(N)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, numbers: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        l,r = <span class="number">0</span>,<span class="built_in">len</span>(numbers)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;r:</span><br><span class="line">            <span class="keyword">if</span> numbers[l]+numbers[r]&gt;target:</span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> numbers[l] + numbers[r]&lt;target:</span><br><span class="line">                l += <span class="number">1</span>              </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> [l+<span class="number">1</span>,r+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>

<h3 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a></h3><ul>
<li>因为题目没有说有序，先进行排序</li>
</ul>
<img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2024/03/abdd5d9da6644916be50d736c9da8237.png" alt="image-20240315214820829" style="zoom:80%;" />

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 时间复杂度O(N^2)；空间复杂度O(1)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">threeSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="comment"># 先进行排序</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        result = [] <span class="comment"># 存放结果</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)-<span class="number">2</span>):</span><br><span class="line">            <span class="comment"># 如果当前的元素与它左边的元素相同，就跳过</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i-<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 优化：当nums[i]+nums[i+1]+nums[i+2]&gt;0，就直接返回</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[i+<span class="number">1</span>] +nums[i+<span class="number">2</span>]&gt;<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> nums[i]+nums[-<span class="number">2</span>]+ nums[-<span class="number">1</span>]&lt;<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            l = i + <span class="number">1</span></span><br><span class="line">            r = <span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> l&lt;r:</span><br><span class="line">                s = nums[i]+nums[l]+nums[r]            </span><br><span class="line">                <span class="keyword">if</span> s == <span class="number">0</span>:</span><br><span class="line">                    result.append([nums[i],nums[l],nums[r]])</span><br><span class="line">                    <span class="keyword">while</span> l&lt;r <span class="keyword">and</span> nums[r] == nums[r-<span class="number">1</span>]:</span><br><span class="line">                        r -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> l&lt;r <span class="keyword">and</span> nums[l] == nums[l+<span class="number">1</span>]:</span><br><span class="line">                        l += <span class="number">1</span></span><br><span class="line">                    r -= <span class="number">1</span></span><br><span class="line">                    l += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> s&gt; <span class="number">0</span>:</span><br><span class="line">                    r -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    l += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>LeetCode刷题</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>01-第一节-认识复杂度、对数器、二分法</title>
    <url>/2023/11/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%A9%AC%E5%A3%AB%E5%85%B5%E7%AE%97%E6%B3%95%E4%BD%93%E7%B3%BB%E7%8F%AD/01-%E7%AC%AC%E4%B8%80%E8%8A%82-%E8%AE%A4%E8%AF%86%E5%A4%8D%E6%9D%82%E5%BA%A6%E3%80%81%E5%AF%B9%E6%95%B0%E5%99%A8%E3%80%81%E4%BA%8C%E5%88%86%E6%B3%95/</url>
    <content><![CDATA[<h2 id="1、认识复杂度"><a href="#1、认识复杂度" class="headerlink" title="1、认识复杂度"></a>1、认识复杂度</h2><p>等差数列求和，最终可以化成<br>$$<br>a<em>N^2+b</em>N+c<br>$$<br>因此，计算时间复杂度时，记作O(N^2)</p>
<h3 id="常见的常数时间操作O-1"><a href="#常见的常数时间操作O-1" class="headerlink" title="常见的常数时间操作O(1)"></a>常见的常数时间操作O(1)</h3><ul>
<li>常见的算术运算（+、-、*、&#x2F;、%等）</li>
<li>常见的位运算（&gt;&gt;、&gt;&gt;&gt;、&lt;&lt;、|、&amp;、^等）</li>
<li>赋值、比较、自增、自减操作</li>
<li>数组寻址操作</li>
</ul>
<p>计算算法的时间复杂度时，需要将算法步骤拆分到常数时间操作，再去计算。</p>
<p>当时间复杂度指标相同时，比较两个算法，则使用常数量去分析。可以随机生成数据直接测。</p>
<h2 id="2、对数器"><a href="#2、对数器" class="headerlink" title="2、对数器"></a>2、对数器</h2><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/a3e1447d698db74e90d7932446ef9bbc.png" alt="image-20231125111749845"></p>
<p>通过大样本，对比两种方法，如果两种方法都能通过，则算法正确</p>
<ul>
<li><p>以测试冒泡算法为例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 冒泡排序,时间复杂度O(N^2)</span></span><br><span class="line"><span class="comment"># 使用对数器来验证算法</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 冒泡排序算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">alist</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(alist)</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        newn = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> alist[i - <span class="number">1</span>] &gt; alist[i]:</span><br><span class="line">                alist[i - <span class="number">1</span>], alist[i] = alist[i], alist[i - <span class="number">1</span>]</span><br><span class="line">                newn = i</span><br><span class="line">        n = newn</span><br><span class="line">    <span class="keyword">return</span> alist</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----- 对数器 -----</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num_test</span>(<span class="params">testTime, maxSize, maxValue</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    testTime：测试次数</span></span><br><span class="line"><span class="string">    maxSize：数据的长度</span></span><br><span class="line"><span class="string">    maxValue：数据的范围</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    succeed = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(testTime):</span><br><span class="line">        arr1 = [random.randint(-maxValue, maxValue) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(maxSize)]</span><br><span class="line">        arr2 = arr1.copy()</span><br><span class="line">        arr3 = arr1.copy()</span><br><span class="line"></span><br><span class="line">        bubble_sort(arr2)</span><br><span class="line">        arr3.sort()</span><br><span class="line">        <span class="keyword">if</span> arr2 != arr3:</span><br><span class="line">            succeed = <span class="literal">False</span></span><br><span class="line">            <span class="built_in">print</span>(arr1)</span><br><span class="line">            <span class="built_in">print</span>(arr2)</span><br><span class="line">            <span class="built_in">print</span>(arr3)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;succeed&quot;</span> <span class="keyword">if</span> succeed <span class="keyword">else</span> <span class="string">&quot;failed&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    num_test(<span class="number">1000</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3、二分法"><a href="#3、二分法" class="headerlink" title="3、二分法"></a>3、二分法</h2><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/11/4fb29acc0a498ca57ca1e2eb65ade871.png" alt="image-20231125111801690"></p>
<ul>
<li>二分法取中位数时使用<code> mid = L+(R-L)/2</code>能防止溢出</li>
<li>一个数<code>N/2 = N &gt;&gt; 1</code>，位移运算比算术运算快</li>
</ul>
<blockquote>
<ul>
<li><p>right &#x3D; len(nums)-1</p>
<p>while left &lt;&#x3D; right时：right &#x3D; mid-1	# 左闭右闭区间</p>
</li>
<li><p>right &#x3D; len(nums) </p>
<p>while left &lt; right时：right &#x3D; mid         # 左闭右开区间</p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>马士兵算法体系班</category>
      </categories>
      <tags>
        <tag>马士兵算法</tag>
      </tags>
  </entry>
  <entry>
    <title>02-第二节-异或运算相关面试题</title>
    <url>/2023/11/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%A9%AC%E5%A3%AB%E5%85%B5%E7%AE%97%E6%B3%95%E4%BD%93%E7%B3%BB%E7%8F%AD/02-%E7%AC%AC%E4%BA%8C%E8%8A%82-%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1、异或运算"><a href="#1、异或运算" class="headerlink" title="1、异或运算"></a>1、异或运算</h2><ul>
<li><p>概念：相同为0，不同为1</p>
<blockquote>
<p>a&#x3D;7 ^ b&#x3D;13  ——》    00111 ^ 01101 &#x3D; 01010（十进制10）</p>
</blockquote>
</li>
<li><p>0 ^ N &#x3D; N</p>
</li>
<li><p>N ^ N &#x3D; 0</p>
</li>
<li><p>满足交换律：a ^ b &#x3D; b ^ a</p>
</li>
<li><p>满足结合律：(a ^ b) ^ c &#x3D; a ^ (b ^ c)</p>
</li>
</ul>
<h3 id="1-题目一：不添加额外变量下，交换两个变量的值"><a href="#1-题目一：不添加额外变量下，交换两个变量的值" class="headerlink" title="1. 题目一：不添加额外变量下，交换两个变量的值"></a>1. 题目一：不添加额外变量下，交换两个变量的值</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a = 3，int b = 6</span><br><span class="line">-----操作------</span><br><span class="line">a = a ^ b</span><br><span class="line">b = a ^ b</span><br><span class="line">a = a ^ b	# 这三句代码之后，a和b的值互换</span><br></pre></td></tr></table></figure>

<h3 id="2-题目二：一个数组中有一种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这种数"><a href="#2-题目二：一个数组中有一种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这种数" class="headerlink" title="2. 题目二：一个数组中有一种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这种数"></a>2. 题目二：一个数组中有一种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这种数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">思路：设一个变量a = 0，然后遍历该数组，每次a = a ^ arr[i]。遍历完以后，a的值就是该数组中出现奇数次的数</span><br></pre></td></tr></table></figure>

<h3 id="3-题目三：怎么把一个int类型的数，提取出最右侧的1来"><a href="#3-题目三：怎么把一个int类型的数，提取出最右侧的1来" class="headerlink" title="3. 题目三：怎么把一个int类型的数，提取出最右侧的1来"></a>3. 题目三：怎么把一个int类型的数，提取出最右侧的1来</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例：a = 0110 0011 0001 0000  要得到 ans = 0000 0000 0001 0000</span><br><span class="line">思路：a &amp; (-a) 等价于 a &amp; (~a + 1)  ~表示取反</span><br><span class="line">知识点：1）二进制中，a的相反数 等于 a取反+1</span><br><span class="line">	  2）与运算：两者同时为1，结果为1，否则为0</span><br></pre></td></tr></table></figure>

<h3 id="4-一个数组中有两种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这两种数"><a href="#4-一个数组中有两种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这两种数" class="headerlink" title="4. 一个数组中有两种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这两种数"></a>4. 一个数组中有两种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这两种数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_two_numbers</span>(<span class="params">arr</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(arr) &lt; <span class="number">2</span>:    <span class="comment"># 1.处理边界值</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    xor_result = <span class="number">0</span>      <span class="comment"># 2.设置一个变量来遍历异或</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">        xor_result ^= i</span><br><span class="line">    <span class="comment"># 3.因为两个奇数次数a和b是两种数，所以遍历完以后xor_result = a ^ b,且xor_result != 0</span></span><br><span class="line">    <span class="comment">#   因为a和b是不同的数 所以异或结果一定存在某一位上为1，则a和b在该位置一定是分别为1和0.</span></span><br><span class="line">    <span class="comment"># 4.然后找到xor_result最右边的1</span></span><br><span class="line">    right_most_one = xor_result &amp; (-xor_result)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 现在用两个变量再去遍历异或，这就分为了两组，一组是该位置为1，另一组是为0，遍历完就能提取出这两个数。</span></span><br><span class="line">    num1 = <span class="number">0</span></span><br><span class="line">    num2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">        <span class="keyword">if</span> (i &amp; right_most_one) == <span class="number">0</span>:</span><br><span class="line">            num1 ^= i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num2 ^= i</span><br><span class="line">    <span class="built_in">print</span>(num1, num2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>]</span><br><span class="line">    find_two_numbers(arr)</span><br></pre></td></tr></table></figure>

<h3 id="5-一个数组中有一种数出现K次，其他数都出现M次，且M-1-K"><a href="#5-一个数组中有一种数出现K次，其他数都出现M次，且M-1-K" class="headerlink" title="5. 一个数组中有一种数出现K次，其他数都出现M次，且M&gt;1,K&lt;M。请找到出现K次的数，要求额外空间复杂的为O(1)，时间复杂度O(N)"></a>5. 一个数组中有一种数出现K次，其他数都出现M次，且M&gt;1,K&lt;M。请找到出现K次的数，要求额外空间复杂的为O(1)，时间复杂度O(N)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 05题 一个数组中有一种数出现K次，其他数都出现M次，且M&gt;1,K&lt;M。请找到出现K次的数，要求额外空间复杂的为O(1)，时间复杂度O(N)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_k_times</span>(<span class="params">arr, k, m</span>):</span><br><span class="line">    t = [<span class="number">0</span>]*<span class="number">32</span></span><br><span class="line">    <span class="comment"># t[0]表示 0位置的1出现了几次</span></span><br><span class="line">    <span class="comment"># t[1]表示 1位置的1出现了几次</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            <span class="keyword">if</span> (i &gt;&gt; j) &amp; <span class="number">1</span>:    <span class="comment"># 如果i的第j位为1，则&amp;1 结果为1</span></span><br><span class="line">                t[j] += <span class="number">1</span>       <span class="comment"># 那么在该j位置上计数+1</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        <span class="keyword">if</span> t[i] % m:   <span class="comment"># 如果t[i] % m != 0，则表示在该位置上为1的的数量不是m的整数倍，还包含k次出现的数</span></span><br><span class="line">            ans |= (<span class="number">1</span> &lt;&lt; i)  <span class="comment"># i位置有1的就 &#x27;或&#x27;，为0就不变，因此遍历完以后，ans就是出现k次的数</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Hash_test</span>(<span class="params">arr, k, m</span>):  <span class="comment"># 另一种方法，哈希表法，来验证上面方法的正确性</span></span><br><span class="line">    counts = <span class="built_in">dict</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> counts:</span><br><span class="line">            counts[i] = counts.get(i) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            counts[i] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> counts.keys():</span><br><span class="line">        <span class="keyword">if</span> counts.get(i) == k:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ========= 接下来使用对数器来验证 =========</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_array</span>(<span class="params">max_kinds, max_value, k, m</span>):</span><br><span class="line">    k_num = random.randint(-max_value, max_value)  <span class="comment"># k次数</span></span><br><span class="line">    numKinds = random.randint(<span class="number">2</span>, max_kinds)  <span class="comment"># 数组中数的种类</span></span><br><span class="line">    len_arr = k + m * (numKinds-<span class="number">1</span>)  <span class="comment"># 数组长度</span></span><br><span class="line">    arr = [<span class="number">0</span>]*len_arr</span><br><span class="line"></span><br><span class="line">    i_num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):  <span class="comment"># 将k次数放入数组</span></span><br><span class="line">        arr[i] = k_num</span><br><span class="line">        i_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    numKinds -= <span class="number">1</span>   <span class="comment"># 减去k次数的种类</span></span><br><span class="line">    a_set = <span class="built_in">set</span>()</span><br><span class="line">    a_set.add(k_num)    <span class="comment"># 将k次数放入集合</span></span><br><span class="line">    <span class="keyword">while</span> numKinds:</span><br><span class="line">        <span class="comment">#  构造出现m次的数，并且无重复</span></span><br><span class="line">        curNum = random.randint(-max_value, max_value)</span><br><span class="line">        <span class="keyword">while</span> curNum <span class="keyword">in</span> a_set:  <span class="comment"># 如果curNum在集合中，则重新生成</span></span><br><span class="line">            curNum = random.randint(-max_value, max_value)</span><br><span class="line">        a_set.add(curNum)   <span class="comment"># 将出现m次的数放入集合</span></span><br><span class="line"></span><br><span class="line">        numKinds -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            arr[i_num] = curNum</span><br><span class="line">            i_num += <span class="number">1</span></span><br><span class="line">    random.shuffle(arr)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    max_kinds = <span class="number">4</span>  <span class="comment"># 数组的最大种类</span></span><br><span class="line">    max_range = <span class="number">200</span>  <span class="comment"># 数组中的元素取值范围为[-max_range, max_range]</span></span><br><span class="line">    testTimes = <span class="number">10000</span>  <span class="comment"># 测试次数</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试开始&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(testTimes):</span><br><span class="line">        <span class="comment"># 构造 k 和 m</span></span><br><span class="line">        a = random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 随机生成1-9的数</span></span><br><span class="line">        b = random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">        k = <span class="built_in">min</span>(a, b)</span><br><span class="line">        m = <span class="built_in">max</span>(a, b)</span><br><span class="line">        <span class="keyword">if</span> k == m:</span><br><span class="line">            m += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 构造arr</span></span><br><span class="line">        arr = generate_random_array(max_kinds, max_range, k, m)</span><br><span class="line">        <span class="comment"># print(arr)</span></span><br><span class="line">        <span class="comment"># 测试</span></span><br><span class="line">        ans1 = Hash_test(arr, k, m)</span><br><span class="line">        ans2 = find_k_times(arr, k, m)</span><br><span class="line">        ans3 = ans1 &amp; <span class="number">0xffffffff</span>    <span class="comment"># 将32位整数ans1转换为无符号整数，以便比较</span></span><br><span class="line">        <span class="keyword">if</span> ans3 != ans2:</span><br><span class="line">            <span class="built_in">print</span>(arr)</span><br><span class="line">            <span class="built_in">print</span>(ans1, ans2, ans3)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;出错了!&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试结束&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>马士兵算法体系班</category>
      </categories>
      <tags>
        <tag>马士兵算法</tag>
      </tags>
  </entry>
  <entry>
    <title>03-第三节-一些基础的数据结构</title>
    <url>/2023/12/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%A9%AC%E5%A3%AB%E5%85%B5%E7%AE%97%E6%B3%95%E4%BD%93%E7%B3%BB%E7%8F%AD/03-%E7%AC%AC%E4%B8%89%E8%8A%82-%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="1、链表"><a href="#1、链表" class="headerlink" title="1、链表"></a>1、链表</h2><ul>
<li>题型<ul>
<li>单链表或双链表的翻转</li>
<li>删除某些给定的值</li>
</ul>
</li>
</ul>
<h2 id="2、栈和队列"><a href="#2、栈和队列" class="headerlink" title="2、栈和队列"></a>2、栈和队列</h2><ul>
<li><p>题型</p>
<ul>
<li>双向链表或数组来实现栈和队列</li>
</ul>
</li>
<li><p>常见面试题</p>
<ul>
<li><p>实现一个特殊的栈，在基本功能的基础上，再实现返回栈中自小元素的功能</p>
<ul>
<li>pop、push、getMin操作的时间复杂度都是O(1)</li>
<li>设计的栈类型可以使用现成的栈结构</li>
</ul>
</li>
<li><p>如何用栈实现队列（两个栈：push栈和pop栈）</p>
<ul>
<li>push栈要一次性倒入到pop栈中</li>
<li>pop栈中如果有元素，则push栈中无法加入元素</li>
</ul>
</li>
<li><p>如何用队列实现栈结构（两个队列来回倒）</p>
</li>
</ul>
</li>
</ul>
<h2 id="3、递归"><a href="#3、递归" class="headerlink" title="3、递归"></a>3、递归</h2><p>任何递归行为一定可以改为迭代行为。</p>
<ul>
<li>递归何时结束</li>
<li>把调用的过程画出结构图是必须的，有利于分析递归</li>
</ul>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/77f69a82bffb9a3a57d7b08c3a24c34c.png" alt="image-20231204153341042"></p>
<ul>
<li><strong>Master公式可以估算递归的时间复杂度</strong> ，条件：递归的子问题复杂度一致。上面公式中log(b,a) 表示log以b为底</li>
</ul>
<h2 id="4、哈希表"><a href="#4、哈希表" class="headerlink" title="4、哈希表"></a>4、哈希表</h2><p>哈希表增、删、查，时间复杂度为常数类型</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>马士兵算法体系班</category>
      </categories>
      <tags>
        <tag>马士兵算法</tag>
      </tags>
  </entry>
  <entry>
    <title>02.jmeter工具使用1</title>
    <url>/2024/01/02/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/02_jmeter%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1、JMeter功能概要"><a href="#1、JMeter功能概要" class="headerlink" title="1、JMeter功能概要"></a>1、JMeter功能概要</h1>]]></content>
      <categories>
        <category>测试开发</category>
        <category>性能测试学习</category>
      </categories>
      <tags>
        <tag>性能测试学习,jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>01.性能测试的理论</title>
    <url>/2023/12/14/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/01_%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="1、性能测试的概念"><a href="#1、性能测试的概念" class="headerlink" title="1、性能测试的概念"></a>1、性能测试的概念</h1><div class="note success flat"><p>为什么要做性能测试？</p>
</div>

<p>进行性能测试：满足真实业务场景、支持大量的用户。满足商用要求</p>
<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><ul>
<li><p>性能：就是软件质量属性中的<code>效率</code>特性</p>
<ul>
<li>效率特性：<ul>
<li>时间特性：表示系统处理用户请求的响应时间</li>
<li>资源特性：指系统在运行过程中，系统资源的消耗情况（CPU、内存、磁盘IO）</li>
</ul>
</li>
</ul>
</li>
<li><p>什么是性能测试？</p>
<p>概念：使用<strong>自动化工具</strong>，模拟<strong>不同的场景</strong>，对<strong>软件各项性能指标</strong>进行测试和评估的过程就是性能测试。</p>
</li>
</ul>
<p>​		包含：1. 后台处理程序的性能（代码性能）</p>
<p>​				    2. 中间件、数据库、架构设计等是否存在瓶颈</p>
<p>​				    3. 服务器资源消耗（CPU、内存、磁盘、网络）</p>
<ul>
<li>性能测试的目的<ul>
<li>评估当前系统能力<ul>
<li>例如：验收第三方提供的软件</li>
<li>例如：获取关键的性能指标，与其他类似产品进行比较</li>
</ul>
</li>
<li>寻找性能瓶颈，优化性能</li>
<li>评估软件是否能够满足未来的需要</li>
</ul>
</li>
</ul>
<h2 id="2-性能测试与功能测试"><a href="#2-性能测试与功能测试" class="headerlink" title="2. 性能测试与功能测试"></a>2. 性能测试与功能测试</h2><h3 id="2-1-焦点不一样"><a href="#2-1-焦点不一样" class="headerlink" title="2.1 焦点不一样"></a>2.1 焦点不一样</h3><ul>
<li><p>功能测试：验证软件系统操作功能是否符合产品<strong>功能需求规格</strong>，主要焦点在功能（<strong>正向、逆向</strong>）；</p>
</li>
<li><p>性能测试：验证软件系统是否满足业务<strong>需求场景</strong>，主要焦点是业务场景的满足(<strong>时间、资源</strong>、正向)；</p>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/17475ae0356f4575442576bf1ed0d09f.png" alt="image-20231214101357875"></p>
</li>
</ul>
<h3 id="2-2-关系"><a href="#2-2-关系" class="headerlink" title="2.2 关系"></a>2.2 关系</h3><ul>
<li>功能测试和性能测试是相辅相成的，对于一款优秀的软件产品来讲，它们是不可减少的2个重要测试环节；</li>
<li>注意：一般新项目中，先功能测试通过后，再进行性能测试。</li>
</ul>
<h1 id="2、性能测试的策略"><a href="#2、性能测试的策略" class="headerlink" title="2、性能测试的策略"></a>2、性能测试的策略</h1><ul>
<li>基准测试</li>
<li>负载测试</li>
<li>稳定性测试</li>
<li>其他：并发测试、压力测试、容量测试等</li>
</ul>
<h2 id="1-基准测试"><a href="#1-基准测试" class="headerlink" title="1. 基准测试"></a>1. 基准测试</h2><ul>
<li><p>狭义上讲：也是单用户测试，测试环境确定以后，对业务模型中的重要业务做单独的测试，获取单用户运行时的各项性能指标。（进行基础的数据采集），单用户测多次</p>
</li>
<li><p>广义上讲：是一种测量和评估软件性能指标的活动。你可以在某个时刻通过基准测试建立一个已知的性能水平（称为基准线），当系统的软硬件环境发生变化之后再进行一次基准测试以确定那些变化对性能的影响。</p>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/5c7d3bbaf07c4934dee1dcb087fd9312.png" alt="image-20231214104917048"></p>
</li>
<li><p>基准测试数据的用途：</p>
<ol>
<li><p>为多用户并发测试和综合场景测试等性能分析提供参考依据</p>
</li>
<li><p>识别系统或环境的配置变更对性能响应带来的影响</p>
</li>
<li><p>为系统优化前后的性能提升&#x2F;下降提供参考指标</p>
</li>
</ol>
</li>
</ul>
<h2 id="2-负载测试"><a href="#2-负载测试" class="headerlink" title="2. 负载测试"></a>2. 负载测试</h2><ul>
<li>说明：通过<strong>逐步增加系统负载</strong>，测试系统性能的变化，并最终确定在<strong>满足系统的性能指标情况下</strong>，系统所能够承受的<strong>最大负载量</strong>的测试。</li>
<li>负载：指向服务器发送的请求数量，请求越多，负载越高</li>
<li>负载测试关注的重点是<strong>逐步增加压力</strong></li>
</ul>
<img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/29ca991729ca2aeb95bb7820936c89d0.png" alt="image-20231214110344179" style="zoom:80%;" />

<h2 id="3-稳定性测试"><a href="#3-稳定性测试" class="headerlink" title="3. 稳定性测试"></a>3. 稳定性测试</h2><p>稳定性测试是指，在服务器<strong>稳定运行（用户正常的业务负载下）</strong>的情况下进行长时间测试，并最终保证服务器能满足线上业务需求。时长<strong>一般为1天、一周</strong>等。</p>
<div class="note warning flat"><p>稳定运行时的负载量设置为多少？</p>
</div>

<p>例如：前面电梯案例中，实际测试的最大负载为：13人</p>
<ul>
<li>场景1：如果甲方要求用户正常的负载人数为15人，稳定运行的负载量为多少？<ul>
<li>答：实际性能达不到要求，这时候就要提BUG，进行修复以达到要求性能后再测试</li>
</ul>
</li>
<li>场景2：如果甲方要求用户正常的负载人数为10人，稳定运行的负载量为多少？<ul>
<li>答：稳定运行的负载量为10就可以了</li>
</ul>
</li>
</ul>
<h2 id="4-压力测试"><a href="#4-压力测试" class="headerlink" title="4. 压力测试"></a>4. 压力测试</h2><ul>
<li><p>为什么要进行压力测试？</p>
<ul>
<li>软件实际使用时，用户量超过预期（系统最大负载量），改如何反应？</li>
<li>软件由于意外情况出现问题，多久能恢复</li>
</ul>
</li>
<li><p>在强负载下的测试，查看系统在<strong>峰值情况下</strong>是否功能隐患、系统是否具有良好的<strong>容错能力</strong>和<strong>可恢复能力</strong>。</p>
</li>
<li><p><strong>两个场景</strong>：1、极限负载情况下导致系统崩溃的破坏性压力测试【C-D区间】；2、高负载下的长时间的稳定性压力测试【B-C区间】</p>
</li>
</ul>
<img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/5f4daa5414355d3fc94c213efe0aabbd.jpg" style="zoom:80%;" />

<h2 id="5-并发测试"><a href="#5-并发测试" class="headerlink" title="5. 并发测试"></a>5. 并发测试</h2><ul>
<li><p>为什么要进行并发测试？</p>
<ul>
<li>电商系统能抗住双11的考验，能保证在秒杀活动时不出问题吗？</li>
</ul>
</li>
<li><p>并发测试（绝对并发）：是指在<strong>极短的时间内</strong>，发送<strong>多个请求</strong>，来验证服务器对<strong>并发的处理能力</strong>。</p>
<p>如：抢红包、抢购、秒杀活动等。</p>
</li>
</ul>
<h1 id="3、性能测试指标"><a href="#3、性能测试指标" class="headerlink" title="3、性能测试指标"></a>3、性能测试指标</h1><ul>
<li>响应时间</li>
<li>并发数</li>
<li>吞吐量</li>
<li>点击数</li>
<li>错误率</li>
<li>资源利用率</li>
<li>PV和UV</li>
</ul>
<h2 id="1-响应时间"><a href="#1-响应时间" class="headerlink" title="1. 响应时间"></a>1. 响应时间</h2><p>说明：响应时间指用户<strong>从客户端发起一个请求开始</strong>，到客户端接收<strong>到从服务器端返回的结果</strong>，整个过程所耗费的时间。</p>
<ul>
<li>注意：不包括 <strong>发送消息时前端页面的处理时间</strong> 和 <strong>收到消息后前端页面的渲染显示时间</strong></li>
</ul>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/2d80224a5f582f9702f0865fe0288d7d.png" alt="image-20231214115320201"></p>
<p>总结：响应时间 &#x3D; 网络传输时间 + 服务器处理时间</p>
<h2 id="2-并发数"><a href="#2-并发数" class="headerlink" title="2. 并发数"></a>2. 并发数</h2><p>并发(用户)数：某一时刻同时向服务器发送请求的用户数。</p>
<p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/ce36c4f96eceb922fb8630a015977680.png" alt="image-20231214115600973"></p>
<h2 id="3-吞吐量"><a href="#3-吞吐量" class="headerlink" title="3. 吞吐量"></a>3. 吞吐量</h2><p>吞吐量：指的是<strong>单位时间内</strong>处理的客户端<strong>请求数量</strong>，直接体现软件系统的性能承载能力。</p>
<ol>
<li>从业务角度来看，吞吐量也可以用“业务数&#x2F;小时”、“业务数&#x2F;天”、“访问人数&#x2F;天”、“页面访问量&#x2F;天”来衡量</li>
<li>从网络角度来看，还可以用“字节数&#x2F;小时”、“字节数&#x2F;天”等来衡量网络的流量</li>
<li>从技术指标来看，可以用<strong>每秒事务数（TPS）</strong>和<strong>每秒查询数（QPS）</strong>来衡量服务器具体性能处理能力</li>
</ol>
<ul>
<li><strong>QPS每秒查询数：</strong>控制服务器<strong>每秒</strong>处理的指定<strong>请求</strong>的数量，不同请求不一样</li>
<li><strong>TPS每秒事务数：</strong>控制服务器<strong>每秒</strong>处理的<strong>事务请求</strong>的数量<ul>
<li>事务：即业务，页面上的一次操作，可能对应一个请求&#x2F;多个请求</li>
</ul>
</li>
<li><strong>QPS和TPS有什么关系？</strong><ul>
<li>一个事务对应一个请求时： TPS &#x3D; QPS</li>
<li>一个事务对应n个请求时： QPS &#x3D; n * TPS</li>
</ul>
</li>
</ul>
<h2 id="4-点击数"><a href="#4-点击数" class="headerlink" title="4. 点击数"></a>4. 点击数</h2><p>指客户端向服务端发送请求时，所有的页面资源元素（如：图片、链接、框架css、js等）的请求总数量。</p>
<ul>
<li>只有web项目才有此指标</li>
<li>点击数不是页面上的一次点击</li>
</ul>
<h2 id="5-错误率"><a href="#5-错误率" class="headerlink" title="5. 错误率"></a>5. 错误率</h2><p>错误率：指系统在<strong>负载情况</strong>下，失败业务的概率。错误率＝(失败业务数&#x2F;业务总数)*100%。</p>
<ul>
<li>大多系统都会要求错误率无限接近于0</li>
<li>错误率是一个性能指标，不是功能上的随机bug</li>
</ul>
<h2 id="6-资源利用率"><a href="#6-资源利用率" class="headerlink" title="6. 资源利用率"></a>6. 资源利用率</h2><p>是指系统各种资源的使用情况，一般用“资源的使用量&#x2F;总的资源可用量×100%”形成资源利用率的数据。</p>
<p>根据经验，资源指标通常要求：<br>（1）CPU不高于75%-85%<br>（2）内存不高于80%<br>（3）磁盘IO（速率）不高于90%<br>（4）网络（速率）不高于80%</p>
<h1 id="4、性能测试的流程"><a href="#4、性能测试的流程" class="headerlink" title="4、性能测试的流程"></a>4、性能测试的流程</h1><ol>
<li>性能测试需求分析：熟悉需求，获取性能需求指标</li>
<li>性能测试计划及方案：测什么，谁来测、怎么测</li>
<li>性能测试用例：用来验证系统是否符合需求</li>
<li>测试脚本编写&#x2F;录制：建立测试环境、编写测试脚本、性能测试监控、执行测试脚本</li>
<li>性能分析和调优：分析性能结果，针对性能bug调优</li>
<li>性能测试报告总结</li>
</ol>
<h2 id="1-性能测试需求分析"><a href="#1-性能测试需求分析" class="headerlink" title="1. 性能测试需求分析"></a>1. 性能测试需求分析</h2><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/4c840cc428ff15131d8701113ef3c28e.png" alt="image-20231215103432087"></p>
<h2 id="2-性能测试计划和方案"><a href="#2-性能测试计划和方案" class="headerlink" title="2. 性能测试计划和方案"></a>2. 性能测试计划和方案</h2><ul>
<li><p>测什么</p>
<ul>
<li><p>项目背景</p>
</li>
<li><p>测试目的</p>
</li>
<li><p>测试范围</p>
</li>
</ul>
</li>
<li><p>谁来测</p>
<ul>
<li>进度与分工</li>
<li>交付清单</li>
</ul>
</li>
<li><p>怎么测</p>
<ul>
<li>测试策略</li>
</ul>
</li>
</ul>
<h2 id="3-性能测试用例"><a href="#3-性能测试用例" class="headerlink" title="3. 性能测试用例"></a>3. 性能测试用例</h2><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/fadd09adf4829e29663152de0fbe7227.jpg" style="zoom:80%;" />

<h2 id="4-性能测试执行"><a href="#4-性能测试执行" class="headerlink" title="4. 性能测试执行"></a>4. 性能测试执行</h2><p><img src="https://pub-81a2ad723f3e4d99be8db0e68d1903d2.r2.dev/2023/12/f37f3ca382d400b4e6b2d59dc5331240.png" alt="image-20231215104326524"></p>
<h2 id="5-性能分析和调优"><a href="#5-性能分析和调优" class="headerlink" title="5. 性能分析和调优"></a>5. 性能分析和调优</h2><p>说明：性能测试分析人员经过对结果的分析以后，如果不符合性能需求，则会提出性能bug，然后由开发人员进行后续的调优。</p>
<p>提示：</p>
<ul>
<li>调优 – 开发人员为主导，数据库管理员、系统管理员、网络管理员、性能测试分析人员配合进行</li>
<li>验证 - 性能测试人员继续进行第二轮、第三轮……的测试，与以前的测试结果进行对比，从而确定经过调整以后系统的性能是否有提升</li>
</ul>
<h2 id="6-性能测试报告"><a href="#6-性能测试报告" class="headerlink" title="6. 性能测试报告"></a>6. 性能测试报告</h2><p>测试报告的主要内容：</p>
<ul>
<li>测试工作的经过回顾</li>
<li>缺陷分析和调优</li>
<li>风险评估</li>
<li>性能测试结果</li>
<li>测试工作总结与改进</li>
</ul>
]]></content>
      <categories>
        <category>测试开发</category>
        <category>性能测试学习</category>
      </categories>
      <tags>
        <tag>性能测试学习</tag>
      </tags>
  </entry>
  <entry>
    <title>01.金蝶_一面_面经</title>
    <url>/2023/11/02/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/%E7%A7%8B%E6%8B%9B%E9%9D%A2%E7%BB%8F/01.%E9%87%91%E8%9D%B6_%E4%B8%80%E9%9D%A2_%E9%9D%A2%E7%BB%8F/</url>
    <content><![CDATA[<h1 id="一面-10-17"><a href="#一面-10-17" class="headerlink" title="一面 10.17"></a>一面 10.17</h1><ul>
<li>对金蝶的了解多少？做哪些业务？</li>
<li>你和这个岗位的匹配度如何？你有哪些优势和缺点？</li>
<li>你觉得如果我们招聘你的话，你会给我们公司带来什么？</li>
<li>在校期间最有成就的事情</li>
<li>未来五年的规划</li>
</ul>
]]></content>
      <categories>
        <category>测试开发</category>
        <category>秋招面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>02.同程旅行_一面_面经</title>
    <url>/2023/11/01/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/%E7%A7%8B%E6%8B%9B%E9%9D%A2%E7%BB%8F/02.%E5%90%8C%E7%A8%8B%E6%97%85%E8%A1%8C_%E4%B8%80%E9%9D%A2_%E9%9D%A2%E7%BB%8F/</url>
    <content><![CDATA[<h1 id="一面-10-24-48min"><a href="#一面-10-24-48min" class="headerlink" title="一面 10.24 (48min)"></a>一面 10.24 (48min)</h1><ul>
<li><p>对于软件测试的了解</p>
</li>
<li><p>质量保障(QA)和软件测试有什么区别没有？</p>
<ul>
<li><p><strong>一、软件测试是一个过程，而软件质量保证是一个方法论。</strong></p>
<p>软件测试是通过执行软件的各种测试活动来检测和发现软件缺陷，例如单元测试、集成测试、系统测试等等。软件质量保障是一种方法论，它涉及管理、规划、监督和控制软件开发过程的各个方面，以确保软件产品的质量。</p>
</li>
<li><p><strong>二、软件测试着眼于软件产品的缺陷，而软件质量保证则关注软件产品的质量。</strong></p>
<p>软件测试是针对软件中的缺陷和错误进行的活动，例如逻辑错误、设计问题、性能问题等。软件质量保证是确保软件产品符合质量标准和用户需求的过程，包括软件设计、开发、测试、部署和维护。</p>
</li>
<li><p><strong>三、软件测试是一项技术任务，而软件质量保证是一项管理任务。</strong></p>
<p>软件测试需要技术人员使用各种测试工具和技术来发现和修复软件缺陷。</p>
<p>而软件质量保证需要管理人员制定和执行质量计划、制定和实施质量标准、指导和培训开发人员等。</p>
</li>
</ul>
</li>
<li><p>软件开发的一个整体流程</p>
</li>
<li><p>测试用例包含哪几项</p>
</li>
<li><p>购物车，测试用例</p>
</li>
<li><p>fiddler抓包原理</p>
</li>
<li><p>fiddler是否可以抓包安卓的https请求？（不可以的）</p>
</li>
<li><p>python：一个列表中嵌套字典，字典中包含名字和分数，现在需要按照分数对该列表进行排序，该怎么实现</p>
</li>
<li><p>装饰器是什么</p>
</li>
<li><p>map(), filter()和reduce()</p>
</li>
<li><p>PO模式的实现</p>
</li>
<li><p>Selenium的元素定位方法</p>
</li>
<li><p>查询所有科目成绩大于60分的学生姓名</p>
<ul>
<li><strong>select name from test_a group by name having min(scores)&gt;60;</strong></li>
</ul>
</li>
<li><p>http协议报文、请求方式、响应状态码</p>
</li>
<li><p>http头有哪些常见字段</p>
</li>
<li><p>接口测试测试用例从哪些方面考虑，例如登录接口的测试用例如何编写</p>
</li>
</ul>
]]></content>
      <categories>
        <category>测试开发</category>
        <category>秋招面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>03.星星充电_一面_面经</title>
    <url>/2023/11/02/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/%E7%A7%8B%E6%8B%9B%E9%9D%A2%E7%BB%8F/03.%E6%98%9F%E6%98%9F%E5%85%85%E7%94%B5_%E4%B8%80%E9%9D%A2_%E9%9D%A2%E7%BB%8F/</url>
    <content><![CDATA[<h1 id="一面-10-30-（32min）"><a href="#一面-10-30-（32min）" class="headerlink" title="一面 10.30 （32min）"></a>一面 10.30 （32min）</h1><ul>
<li>自我介绍</li>
<li>介绍一下项目</li>
<li>怎么理解selenium web driver</li>
<li>那假如我要实现一个场景，用我的一个脚本，然后实现对不同的一些页面的一个兼容性验证。要用到不同版本的浏览器，比方说Chrome、火狐，还有 re ，或者是其他的浏览器，这种你觉得应该怎样去实现?（答：使用selenium grid分布式执行操作）</li>
<li>解释一下装饰器，它与函数的区别</li>
<li>解释一下什么是JSON，JSON返回的元素是有序的还是无序的</li>
<li>假如我现在要做两个JSON 文件的对比，一个老接口的 API输出的结果，一个新接口的输出，我想要对比这两个结果字段有没有差异，我该怎么做?</li>
<li>TCP、UDP介绍，区别，使用场景</li>
<li>get请求和post请求的区别</li>
<li>Linux：查看占用8080端口的进程，并结束该进程</li>
<li>锁的特点和机制</li>
<li>什么是协程？有什么特点？</li>
<li>对公司的了解</li>
<li>对常州有什么印象</li>
<li>你个人最大的优势？</li>
<li>从测试的角度看，如何保证课题的运行结果是满足要求的</li>
<li>课题有遇到什么难点吗</li>
</ul>
<p>反问：</p>
<ul>
<li>软测在公司负责的内容大概是什么</li>
<li>自动化占比？（答：自动化混合在业务中，都会有涉及，没有专门的自动化）</li>
</ul>
]]></content>
      <categories>
        <category>测试开发</category>
        <category>秋招面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>04.力维_一面+二面</title>
    <url>/2023/11/02/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/%E7%A7%8B%E6%8B%9B%E9%9D%A2%E7%BB%8F/04.%E5%8A%9B%E7%BB%B4_%E4%B8%80%E9%9D%A2+%E4%BA%8C%E9%9D%A2/</url>
    <content><![CDATA[<h1 id="一面-10-31-（21min）"><a href="#一面-10-31-（21min）" class="headerlink" title="一面 10.31 （21min）"></a>一面 10.31 （21min）</h1><ul>
<li>自我介绍</li>
<li>说一下整个产品生命周期，软件测试在哪些节点做哪些事</li>
<li>测试的目的</li>
<li>白盒测试和黑盒测试的区别</li>
<li>登录界面，设计测试用例</li>
<li>测试用例包括哪些内容</li>
<li>postman如何做接口测试</li>
<li>接口鉴权token在postman中如何处理</li>
<li>抓包工具怎么使用（fiddler）</li>
<li>selenium使用哪些元素定位方法</li>
<li>下拉菜单的元素如何获取</li>
<li>Linux的常用命令，文件授权命令，vim保存命令</li>
<li>TCP、UDP的区别</li>
<li>OSI模型和TCP&#x2F;IP模型的区别</li>
<li>MySQL中索引的定义，优缺点</li>
<li>MySQL删除表中数据的命令（delete from 表名 where 条件、truncate table 表名）</li>
<li>什么是左连接、右连接</li>
<li>python：字符串拆分（split）、字符串转化成大小写（upper、lower），正则表达式了解吗（不了解）</li>
<li>字典是什么</li>
</ul>
<h1 id="二面-11-1-（23min）"><a href="#二面-11-1-（23min）" class="headerlink" title="二面 11.1 （23min）"></a>二面 11.1 （23min）</h1><ul>
<li>自我介绍</li>
<li>研究生目前做的是什么样的工作（人工智能交叉方向）</li>
<li>你的研究方向好像和测试方向是两个不同的方向，你为什么选择去做测试</li>
<li>手头有offer吗</li>
<li>研究生课题是几个人负责？主要分工咋样</li>
<li>测试流程</li>
<li>测试项目介绍</li>
<li>数据库有用过吗</li>
<li>对公司的了解</li>
<li>做项目过程中遇到的障碍，如何攻克的</li>
<li>在校期间是否担任过一些职位或参加过社团活动</li>
<li>平时业余时间喜欢做什么工作</li>
<li>对于毕业后的第一份工作，你最看重什么</li>
<li>代码量如何</li>
<li>明年三四月能否实习</li>
</ul>
<p>反问：</p>
<p>公司中自动化测试的比例？</p>
]]></content>
      <categories>
        <category>测试开发</category>
        <category>秋招面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>05.TCL格创_一面</title>
    <url>/2023/11/02/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/%E7%A7%8B%E6%8B%9B%E9%9D%A2%E7%BB%8F/05.TCL%E6%A0%BC%E5%88%9B_%E4%B8%80%E9%9D%A2/</url>
    <content><![CDATA[<h1 id="一面-11-1-（25min）"><a href="#一面-11-1-（25min）" class="headerlink" title="一面 11.1 （25min）"></a>一面 11.1 （25min）</h1><ul>
<li><p>自我介绍</p>
</li>
<li><p>项目介绍</p>
</li>
<li><p>购物车测试用例设计</p>
</li>
<li><p>有做过性能测试吗</p>
</li>
<li><p>数据库去重的命令（distinct、group by）</p>
</li>
<li><p>模糊匹配的语句包括（%，_）</p>
<ul>
<li>%代表任意多个字符</li>
<li>_代表任意一个字符</li>
</ul>
</li>
<li><p>浏览器键入网站后经历了哪些步骤</p>
</li>
<li><p>OSI七层模型有哪些组成</p>
</li>
<li><p><strong>链表、栈、哈希表他们的特性以及应用场景</strong></p>
</li>
<li><p><strong>索引类型、使用的存储结构（B+树）</strong></p>
</li>
<li><p>测试的基本流程</p>
</li>
<li><p>在回归测试中，如何进行测试保证问题已经解决并且不会引发其他代码问题或业务功能问题？</p>
</li>
<li><p>有做过购物车下单并发测试吗</p>
</li>
<li><p>postman压测有做过吗</p>
</li>
</ul>
]]></content>
      <categories>
        <category>测试开发</category>
        <category>秋招面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>06.宇视科技_一面</title>
    <url>/2023/11/02/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/%E7%A7%8B%E6%8B%9B%E9%9D%A2%E7%BB%8F/06.%E5%AE%87%E8%A7%86%E7%A7%91%E6%8A%80_%E4%B8%80%E9%9D%A2/</url>
    <content><![CDATA[<h1 id="一面-11-1（16min）"><a href="#一面-11-1（16min）" class="headerlink" title="一面 11.1（16min）"></a>一面 11.1（16min）</h1><ul>
<li>自我介绍</li>
<li>对测试的理解</li>
<li>你做测试的优势</li>
<li>TCP、UDP的使用场景</li>
<li>Linux常用命令、防火墙了解么、统计一个服务器的网口流量用什么命令</li>
<li>测试用例包括哪些内容</li>
<li>项目介绍</li>
<li>自动化测试的优缺点，什么情况下自动化测试是必要的？<ul>
<li>必要性：回归测试和版本迭代时，老的功能可以通过自动化去检验一下</li>
</ul>
</li>
</ul>
<p>反问：</p>
<p>公司自动化测试的比例：公司里手工测试和自动化测试是分开的，会有专门的组做自动化测试</p>
]]></content>
      <categories>
        <category>测试开发</category>
        <category>秋招面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
</search>
